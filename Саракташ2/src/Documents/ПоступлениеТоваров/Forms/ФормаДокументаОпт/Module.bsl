
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ЗаказОснование.Видимость = (ЗначениеЗаполнено(Объект.ЗаказОснование));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Клиент.РассчитатьСуммуТЧ(Элементы.Товары.ТекущиеДанные,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		ТекДанные.Цена = 0;
	Иначе
		ЦеныЗакупки = СлужебныйСервер.ЦеныЗакупки(ТекДанные.Номенклатура, Объект.Поставщик, ?(Параметры.Ключ.Пустая(), Неопределено, Объект.Дата));
		ТекЦена = ЦеныЗакупки[ТекДанные.Номенклатура];
		ТекДанные.Цена = ?(ЗначениеЗаполнено(ТекЦена),ТекЦена,0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Опт = Истина;
		Объект.РегистрироватьЦены = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнительныеЗначенияРеквизитовНайтиПоНаименованию(Наименование)
	
	Возврат Справочники.ДополнительныеЗначенияРеквизитов.НайтиПоНаименованию(Наименование);
	
КонецФункции

&НаКлиенте
Процедура ТоварыТипВязкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	//Элемент.СписокВыбора.Добавить(ДополнительныеЗначенияРеквизитовНайтиПоНаименованию("Машинная вязка"));
	//Элемент.СписокВыбора.Добавить(ДополнительныеЗначенияРеквизитовНайтиПоНаименованию("Ручное"));
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСЗДоступныхЗначенийРазреза(Элементы.Товары.ТекущиеДанные.ТипИзделия, "ТипВязки"));
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦветНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	//Элемент.СписокВыбора.Добавить(ДополнительныеЗначенияРеквизитовНайтиПоНаименованию("Белый"));
	//Элемент.СписокВыбора.Добавить(ДополнительныеЗначенияРеквизитовНайтиПоНаименованию("Серый"));
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСЗДоступныхЗначенийРазреза(Элементы.Товары.ТекущиеДанные.ТипИзделия, "Цвет"));
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	
	//Элемент.СписокВыбора.Добавить(ДополнительныеЗначенияРеквизитовНайтиПоНаименованию("180"));
	//Элемент.СписокВыбора.Добавить(ДополнительныеЗначенияРеквизитовНайтиПоНаименованию("200"));
	//Элемент.СписокВыбора.Добавить(ДополнительныеЗначенияРеквизитовНайтиПоНаименованию("220"));
	//Элемент.СписокВыбора.Добавить(ДополнительныеЗначенияРеквизитовНайтиПоНаименованию("250"));
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПолучитьСЗДоступныхЗначенийРазреза(Элементы.Товары.ТекущиеДанные.ТипИзделия, "Размер"));
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Функция ПолучитьСЗДоступныхЗначенийРазреза(ТипИзделия, Разрез)
	
	//Из настроенных в группе значений разрезов формируем доступные знаечния для выбора
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураОптРазрезыЗначения.Разрез КАК Разрез,
	|	НоменклатураОптРазрезыЗначения.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ОптРазрезыЗначения КАК НоменклатураОптРазрезыЗначения
	|ГДЕ
	|	НоменклатураОптРазрезыЗначения.Ссылка = &ТипИзделия
	|	И НоменклатураОптРазрезыЗначения.Разрез = &Разрез
	|
	|УПОРЯДОЧИТЬ ПО
	|	Значение
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Разрез", Перечисления.ОптРазрезыНоменклатуры[Разрез]);
	Запрос.УстановитьПараметр("ТипИзделия", ТипИзделия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мсРезультат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		мсРезультат.Добавить(Выборка.Значение);
	КонецЦикла;
	
	Возврат мсРезультат;
	
КонецФункции

&НаКлиенте
Процедура ТоварыТипВязкиПриИзменении(Элемент)
	
	СгенерироватьАртикул();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТипИзделияПриИзменении(Элемент)
	
	СгенерироватьАртикул();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦветПриИзменении(Элемент)
	
	СгенерироватьАртикул();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмерПриИзменении(Элемент)
	
	СгенерироватьАртикул();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СгенерироватьАртикул();
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьАртикул()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	стПарметрыГенерацииАртикула = Новый Структура("ТипИзделия, ТипВязки, Цвет, Размер, Цена, ПриДобавлении",
		ТекущиеДанные.ТипИзделия, ТекущиеДанные.ТипВязки, ТекущиеДанные.Цвет, ТекущиеДанные.Размер, ТекущиеДанные.Цена, Ложь);
		
	Элементы.Товары.ТекущиеДанные.Артикул = СгенерироватьАртикулНаСервере(стПарметрыГенерацииАртикула);
	
	Элементы.Товары.ТекущиеДанные.Номенклатура = ПолучитьНоменклутуруПоАртикулу(Элементы.Товары.ТекущиеДанные.Артикул);
	
КонецПроцедуры

Функция СгенерироватьАртикулНаСервере(стПарметрыГенерацииАртикула)
	
	Возврат Справочники.Номенклатура.ГенерацияАртикула(стПарметрыГенерацииАртикула);
	
КонецФункции

Функция ПолучитьНоменклутуруПоАртикулу(Артикул)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	спрНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК спрНоменклатура
	|ГДЕ
	|	НЕ спрНоменклатура.ПометкаУдаления
	|	И спрНоменклатура.Артикул = &Артикул
	|	И спрНоменклатура.ОптовыйТовар";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Номенклатура;
	КонецЦикла;	
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//Проверить если есть строки с пустым товаром, то предлагать создать новый товар
	Для Каждого Строка из Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда 
			
			Если Вопрос("Создать новую номенклатуру?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				
				СоздатьНовыеТовары();
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьНовыеТовары()
	
	Штуки = Справочники.ЕдиницыИзмерения.НайтиПоКоду("796");
	
	Для Каждого Строка из Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			нДокУстановкаЦенЗакупки = Документы.УстановкаЦенЗакупки.СоздатьДокумент(); //Для регистрации закупочной цены
			нДокУстановкаЦенЗакупки.Дата = ТекущаяДата();
			
			//Еще раз попытаемя найти товар с таким артикулом, если его нет, то создаем
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	спрНоменклатура.Ссылка КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК спрНоменклатура
			|ГДЕ
			|	НЕ спрНоменклатура.ПометкаУдаления
			|	И спрНоменклатура.Артикул = &Артикул
			|	И спрНоменклатура.ОптовыйТовар";
			
			Запрос.УстановитьПараметр("Артикул", Строка.Артикул);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Строка.Номенклатура = Выборка.Номенклатура;
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(Строка.Номенклатура) И Лев(Строка.Артикул, 1)  = "Н" Тогда //Если вначале артикула стоит Н и не найдено подходящей номенклатуры, то создать новую
				
				//Ищем товар аналог
				АртикулБезН = Сред(Строка.Артикул, 2, СтрДлина(Строка.Артикул) - 1);
				ПозицияКодаЦены = СтрНайти(АртикулБезН, "-");
				АртикулБезКодаЦены = Лев(АртикулБезН, ПозицияКодаЦены - 1);
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	спрНоменклатура.Ссылка КАК Номенклатура
				|ИЗ
				|	Справочник.Номенклатура КАК спрНоменклатура
				|ГДЕ
				|	спрНоменклатура.ОптовыйТовар
				|	И НЕ спрНоменклатура.ПометкаУдаления
				//|	И спрНоменклатура.Артикул = &Артикул";
				|	И (спрНоменклатура.Артикул ПОДОБНО ""%""+&Артикул+""%""
				|	ИЛИ спрНоменклатура.Артикул ПОДОБНО &Артикул+""%""
				|	ИЛИ спрНоменклатура.Артикул ПОДОБНО ""%""+&Артикул)"; 
				//|	И ПОДСТРОКА(спрНоменклатура.Артикул, 2, 999) ПОДОБНО &Артикул + ""%""";
				
				Запрос.УстановитьПараметр("Артикул", АртикулБезКодаЦены);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				НайденАналог = Ложь;
				
				Если РезультатЗапроса.Пустой() Тогда
					
					Сообщить("Не найден аналогичный товар с артикулом: " + Строка.Артикул + ", т.к. не найден товар с артикулом: " + АртикулБезКодаЦены);
					//Продолжить;
					
					нНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
					нНоменклатура.Наименование = Строка(Строка.ТипИзделия);
					нНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
					нНоменклатура.ЕдиницаИзмерения = Штуки;   
					нНоменклатура.ИспользоватьСерийныеНомера = Истина;

				Иначе
					
					Выборка = РезультатЗапроса.Выбрать();
				
					Пока Выборка.Следующий() Цикл
						НоменклатураАналог = Выборка.Номенклатура;
					КонецЦикла;	
					
					нНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
					нНоменклатура.Родитель = НоменклатураАналог.Родитель;
					нНоменклатура.Наименование = НоменклатураАналог.Наименование;
					нНоменклатура.ЕдиницаИзмерения = НоменклатураАналог.ЕдиницаИзмерения;
					нНоменклатура.IDНаСайте = НоменклатураАналог.IDНаСайте;
					нНоменклатура.ВидНоменклатуры = НоменклатураАналог.ВидНоменклатуры;
					нНоменклатура.НормаНаличия = НоменклатураАналог.НормаНаличия;
					нНоменклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
					нНоменклатура.ИспользоватьСерийныеНомера = НоменклатураАналог.ИспользоватьСерийныеНомера;
					НайденАналог = Истина;

				КонецЕсли; 			
								
				нНоменклатура.Артикул = Строка.Артикул;
				нНоменклатура.ОптовыйТовар = Истина;
				
				//ТипВязки
				нСтрока = нНоменклатура.ДополнительныеРеквизиты.Добавить();
				нСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду("000000003");
				нСтрока.Значение = Строка.ТипВязки;
				
				//Размер
				нСтрока = нНоменклатура.ДополнительныеРеквизиты.Добавить();
				нСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду("000000001");
				нСтрока.Значение = Строка.Размер;
				
				//Цвет
				нСтрока = нНоменклатура.ДополнительныеРеквизиты.Добавить();
				нСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду("000000002");
				нСтрока.Значение = Строка.Цвет;
				
				//Заполнить Состав
				//Состав родителя
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
				|ИЗ
				|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
				|ГДЕ
				|	НоменклатураДополнительныеРеквизиты.Ссылка = &Ссылка
				|	И НоменклатураДополнительныеРеквизиты.Свойство = &Свойство";
				
				Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду("000000004");
				
				Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду("000000004"));	//Состав
				Если НайденАналог Тогда
					Запрос.УстановитьПараметр("Ссылка", нНоменклатура.Родитель);
				Иначе
					Запрос.УстановитьПараметр("Ссылка", Строка.ТипИзделия); 
				КонецЕсли;
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если Не РезультатЗапроса.Пустой() Тогда 
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					ВыборкаДетальныеЗаписи.Следующий();
					
					нНоменклатура.ДополнительныеРеквизиты.Очистить();
					
					нСтрока = нНоменклатура.ДополнительныеРеквизиты.Добавить();
					нСтрока.Свойство = Свойство; 
					нСтрока.Значение = ВыборкаДетальныеЗаписи.Значение;
					
				КонецЕсли;
				
				нНоменклатура.Записать();
				
				Строка.Номенклатура = нНоменклатура.Ссылка;
				
				//Цена
				Если Строка.Цена > 0 Тогда 
					
					нСтрока = нДокУстановкаЦенЗакупки.Товары.Добавить();
					нСтрока.Номенклатура = Строка.Номенклатура;
					нСтрока.Цена = Строка.Цена;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если нДокУстановкаЦенЗакупки.Товары.Количество() > 0 Тогда
				
				Попытка
					нДокУстановкаЦенЗакупки.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ОО = ОписаниеОшибки();
					Сообщить("Не удалось записать изменение цен для новой номенклатуры." + Символы.ПС + ОО);					
				КонецПопытки;				
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


Процедура ПечатьСервер(ТДПечать, МакетПечати, ДополнительныеПараметры)
	
	ТДПечатнаяФормаДокумента = Документы.ПоступлениеТоваров.ПолучитьПечатнуюФорму(Объект, МакетПечати, ДополнительныеПараметры);			
	ТДПечать.Вывести(ТДПечатнаяФормаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТоварыПечать" Тогда		
		
		МакетПечати = "ПечатьНаклеек";
		
		ДополнительныеПараметры = Новый Структура("ТолькоТовар", Элементы.Товары.ТекущиеДанные.НомерСтроки);
		
		ТДПечать = Новый ТабличныйДокумент;
		ПечатьСервер(ТДПечать, МакетПечати, ДополнительныеПараметры);
		ТДПечать.ОтображатьСетку = Ложь;
		ТДПечать.Защита = Ложь;
		ТДПечать.ТолькоПросмотр = Ложь;
		ТДПечать.ОтображатьЗаголовки = Ложь;
		ТДПечать.АвтоМасштаб = Истина;
		
		////Для наклеек свой принтер
		ТДПечать.ИмяПринтера = ПолныеПрава.ПолучитьЗначениеКонстанты("ИмяПринтераПечатьЭтикеток");
		ТДПечать.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТДПечать.ПолеСверху = 4;
		ТДПечать.ПолеСлева = 18;		
		ТДПечать.ПолеСнизу = 2;
		ТДПечать.ПолеСправа = 0;
		ТДПечать.Показать("Печать: Наклейки");
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен()
		И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			
				ДанныеШтрихкодов = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
				
				НомерСчитанныйТовар = 0;
				ОбработатьШтрихкоды(ДанныеШтрихкодов, НомерСчитанныйТовар);
								
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, НомерСчитанныйТовар)
	
	Элементы.Товары.ТекущаяСтрока = 0;
	
	Для Каждого стШК Из ДанныеШтрихкодов Цикл 
		//Сообщить(стШК.Штрихкод + " - "  + стШК.Количество);
		
		НоменклатураПоШК = Неопределено;
		//Найти товар по ШК и добавить в ТЧ.Товары
		Если СтрДлина(стШК.Штрихкод) > 9 Тогда
			Попытка
				НоменклатураПоШК = Справочники.Номенклатура.НайтиПоРеквизиту("IDНаСайте", Число(Сред(стШК.Штрихкод, 7, 4))); //180814123400900 			
			Исключение  			
			КонецПопытки;
		Иначе 		
			Если НоменклатураПоШК = Неопределено Тогда
				Попытка
					НоменклатураПоШК = Справочники.Номенклатура.НайтиПоКоду(стШК.Штрихкод);  			
				Исключение
					Возврат;
				КонецПопытки;		
			КонецЕсли;
		КонецЕсли;
		
		//00000000-0000-0000-0000-000000000000
			
		Если Не ЗначениеЗаполнено(НоменклатураПоШК) Тогда 
			Сообщить("Товар с кодом " + Сред(стШК.Штрихкод, 7, 4) + " не найден!");
		Иначе 
			
			мсСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", НоменклатураПоШК));
			
			Если мсСтроки.Количество() = 0 Тогда   				
				
				нСтрока = Объект.Товары.Добавить();
				нСтрока.Номенклатура = НоменклатураПоШК;
				нСтрока.Количество = стШК.Количество;
				нСтрока.ЕдиницаИзмерения = нСтрока.Номенклатура.ЕдиницаИзмерения;
				
				ЦеныЗакупки = СлужебныйСервер.ЦеныЗакупки(нСтрока.Номенклатура, Объект.Поставщик, ?(Параметры.Ключ.Пустая(), Неопределено, Объект.Дата));
				ТекЦена = ЦеныЗакупки[нСтрока.Номенклатура];
				нСтрока.Цена = ?(ЗначениеЗаполнено(ТекЦена),ТекЦена,0);  
				
				Элементы.Товары.ТекущаяСтрока = нСтрока.ПолучитьИдентификатор();
				
				НомерСчитанныйТовар = нСтрока.НомерСтроки - 1;
				
			Иначе  				
				
				мсСтроки[0].Количество = мсСтроки[0].Количество + стШК.Количество;
				
				Попытка
					Элементы.Товары.ТекущаяСтрока = мсСтроки[0].ПолучитьИдентификатор();
				Исключение
				КонецПопытки;
				
				НомерСчитанныйТовар = мсСтроки[0].НомерСтроки - 1;  					
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры






