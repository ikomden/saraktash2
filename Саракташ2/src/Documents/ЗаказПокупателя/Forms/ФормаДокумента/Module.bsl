&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Упаковка.Количество() = 0
		И Объект.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказовПокупателей.Розничный")
		И Объект.Статус = ПредопределенноеЗначение("Справочник.СтатусыЗаказов.Новый") Тогда
		ЗаполнитьУпаковкуПоПравилам();
		Сообщить("В заказ была автоматически рассчитана упаковка!");
		Если Объект.Упаковка.Количество() > 0 Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	ОбновитьЗаголовки();  	
	УстановитьВидимость();	
	УстановитьОтборКонтрагентов(); 	
	ОбновитьОтображениеЗамененныхПозиций();
	
	ЗаполнитьКИКонтрагента();
	
	Если Не Параметры.Ключ.Пустая() Тогда
		ЗаполнитьСсылкуНаСтраницуОплаты();
	КонецЕсли;
	
	//Если создается новый заказ из списка оптовых заказов
	Если Параметры.Ключ.Пустая() 
		И ВладелецФормы.Родитель.Имя = "ФормаСпискаОпт" Тогда
		
		УстановитьОптовыйВид();
		
	КонецЕсли;
	
	ИнициализацияОптовогоЗаказа();
	
	ЗаполнитьТЗСебестоимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияОптовогоЗаказа()
	
	Если Объект.ВидЗаказа = ПолучитьОптовыйВидЗаказа() Тогда 
		
		//Подключаемое оборудование
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(
		Новый ОписаниеОповещения("НачатьПодключениеОборудованиеПоИдентификаторуЗавершение", ЭтотОбъект,),
		ЭтотОбъект.УникальныйИдентификатор,
		ПолучитьСканерПользователя());
		
		//Отобразить нужные кнопки
		Элементы.ФормаДобавитьТоварыЧерезСканер.Видимость = Истина;
		Элементы.ФормаПроверитьТовары.Видимость = Истина;
		
		Элементы.Группа11.Видимость = Истина;
		
		Элементы.СкидкаПроцент.Видимость = Истина;
		
		ЗаполнитьТЗСебестоимость();
		
		РасчитатьЦенуСоСкидкой();
		
	Иначе
		
		Элементы.ФормаДобавитьТоварыЧерезСканер.Видимость = Ложь;
		Элементы.ФормаПроверитьТовары.Видимость = Ложь;
		
		Элементы.Группа11.Видимость = Ложь;
		
		Элементы.СкидкаПроцент.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьЦенуСоСкидкой()
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ЦенаСоСкидкой = ?(Строка.Количество <> 0, Строка.СуммаСоСкидкой / Строка.Количество, 0);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОптовыйВидЗаказа()
	
	Возврат Перечисления.ВидыЗаказовПокупателей.Оптовый;
	
КонецФункции

Процедура УстановитьОптовыйВид()
	
	Объект.ВидЗаказа = Перечисления.ВидыЗаказовПокупателей.Оптовый;		
	
КонецПроцедуры

#Область ЗаполнениеОбновление

///////////////////
// Заполнение или обновление

&НаКлиенте
Процедура ЗаполнитьАвтоматическиУпаковку(Команда)
	
	Если Объект.Упаковка.Количество() > 0 Тогда
		спВарианты = Новый СписокЗначений;
		спВарианты.Добавить("Заполнить заново","Заполнить заново");
		спВарианты.Добавить("Добавить к существующим","Добавить к существующим");
		спВарианты.Добавить("Отмена","Отмена");
		Оповещение = Новый ОписаниеОповещения("ВопросУпаковкаНеПустаяПродолжение",ЭтаФорма);
		ПоказатьВопрос(Оповещение,"Табличная часть ""Упаковка"" не пустая, выберите вариант действия!",спВарианты,35,спВарианты[0],"Внимание!",спВарианты[3]);
	Иначе
		ЗаполнитьУпаковкуПоПравилам();
		ОбновитьЗаголовки();
	КонецЕсли;           	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУпаковкаНеПустаяПродолжение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатВопроса) ИЛИ РезультатВопроса = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьУпаковкуПоПравилам(РезультатВопроса = "Заполнить заново");
	ОбновитьЗаголовки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУпаковкуПоПравилам(Знач Заново = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тчТовары.Номенклатура,
	|	тчТовары.Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&тчТовары КАК тчТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Номенклатура,
	|	СУММА(втТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСвернутые
	|ИЗ
	|	втТовары КАК втТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	втТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСвернутые.Номенклатура,
	|	ТоварыСвернутые.Количество,
	|	ЕСТЬNULL(ТоварыПоКатегориям.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииТоваров.ПустаяСсылка)) КАК Категория
	|ПОМЕСТИТЬ ТоварыКатегории
	|ИЗ
	|	ТоварыСвернутые КАК ТоварыСвернутые
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыПоКатегориям КАК ТоварыПоКатегориям
	|		ПО ТоварыСвернутые.Номенклатура = ТоварыПоКатегориям.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	ПравилаУпаковкиЗаказов.Упаковка,
	|	ПравилаУпаковкиЗаказов.КоличествоУпаковка,
	|	3 КАК Приоритет
	|ПОМЕСТИТЬ Правила
	|ИЗ
	|	РегистрСведений.ПравилаУпаковкиЗаказов КАК ПравилаУпаковкиЗаказов
	|ГДЕ
	|	ПравилаУпаковкиЗаказов.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипыПравилУпаковки.ДляКаждогоЗаказа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКатегории.Номенклатура,
	|	ПравилаУпаковкиЗаказов.Упаковка,
	|	ТоварыКатегории.Количество / ПравилаУпаковкиЗаказов.КоличествоТовара * ПравилаУпаковкиЗаказов.КоличествоУпаковка,
	|	2
	|ИЗ
	|	РегистрСведений.ПравилаУпаковкиЗаказов КАК ПравилаУпаковкиЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыКатегории КАК ТоварыКатегории
	|		ПО (ПравилаУпаковкиЗаказов.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипыПравилУпаковки.ДляКатегорииПозиции))
	|			И ПравилаУпаковкиЗаказов.Номенклатура = ТоварыКатегории.Категория
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыСвернутые.Номенклатура,
	|	ПравилаУпаковкиЗаказов.Упаковка,
	|	ТоварыСвернутые.Количество / ПравилаУпаковкиЗаказов.КоличествоТовара * ПравилаУпаковкиЗаказов.КоличествоУпаковка,
	|	1
	|ИЗ
	|	РегистрСведений.ПравилаУпаковкиЗаказов КАК ПравилаУпаковкиЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСвернутые КАК ТоварыСвернутые
	|		ПО (ПравилаУпаковкиЗаказов.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипыПравилУпаковки.ДляКаждойПозиции))
	|			И ПравилаУпаковкиЗаказов.Номенклатура = ТоварыСвернутые.Номенклатура
	|			И ПравилаУпаковкиЗаказов.КоличествоТовара <= ТоварыСвернутые.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Номенклатура,
	|	Правила.Упаковка,
	|	МИНИМУМ(Правила.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ДействующиеПриоритеты
	|ИЗ
	|	Правила КАК Правила
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.Номенклатура,
	|	Правила.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеПриоритеты.Упаковка,
	|	СУММА(Правила.КоличествоУпаковка) КАК КоличествоУпаковка
	|ИЗ
	|	Правила КАК Правила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействующиеПриоритеты КАК ДействующиеПриоритеты
	|		ПО Правила.Номенклатура = ДействующиеПриоритеты.Номенклатура
	|			И Правила.Упаковка = ДействующиеПриоритеты.Упаковка
	|			И Правила.Приоритет = ДействующиеПриоритеты.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	ДействующиеПриоритеты.Упаковка";
	тчТовары = Объект.Товары.Выгрузить(,"Номенклатура,Количество");
	Запрос.УстановитьПараметр("тчТовары",тчТовары);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Заново Тогда
		Объект.Упаковка.Очистить();	
	КонецЕсли;
	Для Каждого Стр Из Рез Цикл
		Если Стр.КоличествоУпаковка <= 0 Тогда
			Продолжить;
		КонецЕсли;
		нс = Объект.Упаковка.Добавить();
		нс.Номенклатура = Стр.Упаковка;
		нс.Количество = Стр.КоличествоУпаковка;
	КонецЦикла; 	
	
КонецПроцедуры

//&НаКлиенте
Процедура ЗаполнитьКИКонтрагента()
	
	Если (НЕ ЗначениеЗаполнено(Объект.Контрагент) ИЛИ Найти(Объект.Контрагент,"Объект не найден") <> 0) 
			И Не РольДоступна("Кладовщик") Тогда
		
		НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйКонтрагент.УстановитьСсылкуНового(Объект.Контрагент);
		
		ЗначениеВРеквизитФормы(НовыйКонтрагент,"Контрагент");
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗначениеВРеквизитФормы(Объект.Контрагент.ПолучитьОбъект(),"Контрагент");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтоимостьДоставки()
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	//|ПОМЕСТИТЬ вт
	//|ИЗ
	//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &СпособДоставки) КАК ЦеныНоменклатурыСрезПоследних
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ ПЕРВЫЕ 1
	//|	вт.Цена КАК Цена
	//|ИЗ
	//|	вт КАК вт";
	//Запрос.УстановитьПараметр("СпособДоставки", Объект.СпособДоставки);
	//Запрос.УстановитьПараметр("Дата", Объект.Дата);
	//Рез = Запрос.Выполнить();
	//Выб = Рез.Выбрать();
	//Если Выб.Следующий() Тогда 
	//	Объект.СтоимостьДоставки = Выб.Цена;
	//Иначе
	//	Объект.СтоимостьДоставки = 0;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКонтрагентов()
	
	НовыйМассив = Новый Массив;
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Покупатель", Истина));
	Если Объект.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказовПокупателей.Оптовый") Тогда
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Опт", Истина));
	ИначеЕсли Объект.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказовПокупателей.Розничный") Тогда
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Розница", Истина));
	КонецЕсли; 
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Контрагент.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовки()
	
	Элементы.ГруппаТовары.Заголовок = "Товары (на "+Формат(Объект.Товары.Итог("СуммаСоСкидкой"),"ЧЦ=15; ЧДЦ=2; ЧН=0.00")+"руб.)";
	Элементы.ГруппаУпаковка.Заголовок = "Упаковка (на "+Формат(Объект.Упаковка.Итог("Сумма"),"ЧЦ=15; ЧДЦ=2; ЧН=0.00")+"руб.)";
	Элементы.ГруппаДоставка.Заголовок = "Услуги (на "+Формат(Объект.Услуги.Итог("Сумма") + ?(Объект.СтоимостьДоставкиССайта <> 0, Объект.СтоимостьДоставкиССайта, Объект.СтоимостьДоставки),"ЧЦ=15; ЧДЦ=2; ЧН=0.00")+"руб.)";
	//Выручка = Объект.Товары.Итог("Сумма")-Объект.Упаковка.Итог("Сумма")-Объект.СтоимостьДоставки;
	Элементы.ГруппаСкидки.Заголовок = "Скидки (на "+Формат(Объект.Скидки.Итог("Сумма") + Объект.СуммаСкидкиССайта,"ЧЦ=15; ЧДЦ=2; ЧН=0.00")+"руб.)";
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	//Элементы.IDНаСайте.Видимость = (Объект.IDНаСайте<>0);
	ЭтоОптовыйЗаказ = Объект.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказовПокупателей.Оптовый");
	Элементы.ТранспортнаяКомпания.Видимость = ЭтоОптовыйЗаказ;
	Если Элементы.Найти("ФормаСчетНаОплату") <> Неопределено Тогда
		Элементы.ФормаСчетНаОплату.Видимость = ЭтоОптовыйЗаказ;
	КонецЕсли;
	//Элементы.
	
	Элементы.ТоварыЗамененнаяПозиция.Видимость = Объект.ЗамененныеПозиции.Количество()>0;
	
	//Заодно параметры выбора на номенклатуру установим
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВидНоменклатуры", ПредопределенноеЗначение("Перечисление.ВидыНоменклатуры.Товар")));
	//МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ОптовыйТовар", Объект.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказовПокупателей.Оптовый")));
		
	НовыеПараметрыВыбора =  Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.ТоварыНоменклатура.ПараметрыВыбора = НовыеПараметрыВыбора;
	
	Элементы.ТоварыЦенаСоСкидкой.Видимость = ЭтоОптовыйЗаказ;
	
КонецПроцедуры

//Вернуть стоимость закупа и продажи товара, единицу измерения, артикул и т.п.
Процедура ЗаполнитьДанныеТовара()
	
	ТекДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныЗакупкиСрезПоследних.Цена КАК ЦенаЗакупа,
		|	0 КАК ЦенаПродажи
		|ПОМЕСТИТЬ втЦеныПредв
		|ИЗ
		|	РегистрСведений.ЦеныЗакупки.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ЦеныЗакупкиСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
		|	0,
		|	ЦеныНоменклатурыСрезПоследних.Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЦеныПредв.Номенклатура КАК Номенклатура,
		|	СУММА(втЦеныПредв.ЦенаЗакупа) КАК ЦенаЗакупа,
		|	СУММА(втЦеныПредв.ЦенаПродажи) КАК ЦенаПродажи
		|ПОМЕСТИТЬ втЦены
		|ИЗ
		|	втЦеныПредв КАК втЦеныПредв
		|
		|СГРУППИРОВАТЬ ПО
		|	втЦеныПредв.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	спрНоменклатура.Ссылка КАК Номенклатура,
		|	спрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	спрНоменклатура.Артикул КАК Артикул,
		|	ЕСТЬNULL(втЦены.ЦенаЗакупа, 0) КАК ЦенаЗакупа,
		|	ЕСТЬNULL(втЦены.ЦенаПродажи, 0) КАК ЦенаПродажи
		|ИЗ
		|	Справочник.Номенклатура КАК спрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
		|		ПО спрНоменклатура.Ссылка = втЦены.Номенклатура
		|ГДЕ
		|	спрНоменклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Номенклатура", ТекДанные.Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекДанные.Цена = Выборка.ЦенаПродажи;
		ТекДанные.ЦенаЗакупки = Выборка.ЦенаЗакупа;
		ТекДанные.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		ТекДанные.СуммаСкидки = 0;
		ТекДанные.ПроцентСкидкиНаценки = 0;		
		
	КонецЦикла;	
	
КонецПроцедуры

// Заполнение или обновление
///////////////////
#Конецобласти


#Область Печать
//////////
// Печать
&НаКлиенте
Процедура СчетНаОплату(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(,"Документ необходимо записать!");
		Возврат;
	КонецЕсли;
	
	ТабДок = ПечатьСчетаНаОплату();
	ТабДок.Показать("Счет на оплату по заказу покупателя №"+Объект.Номер+" от "+Объект.Дата);     	
	
КонецПроцедуры

&НаСервере
Функция ПечатьСчетаНаОплату()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокументОбъект.ПечатьСчетаНаОплату();
	
КонецФункции

&НаКлиенте
Процедура Торг12(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(,"Документ необходимо записать!");
		Возврат;
	КонецЕсли;
	
	ТабДок = ПечатьТорг12();
	ТабДок.Показать("ТОРГ-12 по заказу покупателя №"+Объект.Номер+" от "+Объект.Дата);
	
КонецПроцедуры

&НаСервере
Функция ПечатьТорг12()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокументОбъект.ПечатьТорг12();
	
КонецФункции

// Печать
//////////
#Конецобласти


#Область ПодменаПозиций
//////////////////
// Подмена позиий

&НаКлиенте
Процедура ПодменаПозиции(Команда)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ПоказатьПредупреждение(,"Выделите строку для подмены!", 15);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыборНовойПозицииПродолжение",ЭтаФорма,ТекДанные);
	ПараметрыОткрытия = Новый Структура();
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыОткрытия,Элементы.Товары.ТекущийЭлемент,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборНовойПозицииПродолжение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПодменитьПозициюНаСервере(ДополнительныеПараметры.НомерСтроки, РезультатЗакрытия);
	ОбновитьОтображениеЗамененныхПозиций();
	
КонецПроцедуры

&НаСервере
Процедура ПодменитьПозициюНаСервере(НомерСтроки, НоваяПозиция)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекСтрока = ТекОбъект.Товары.Найти(НомерСтроки,"НомерСтроки"); 	
	СтрокаЗамены = Неопределено;
	Если ТекСтрока.Ключ = 0 Тогда 		
		НовыйКлюч = 0;
		Для Каждого Стр Из ТекОбъект.ЗамененныеПозиции Цикл
			НовыйКлюч = Макс(Стр.Ключ,НовыйКлюч);
		КонецЦикла;
		НовыйКлюч = НовыйКлюч+1;		
		СтрокаЗамены = ТекОбъект.ЗамененныеПозиции.Добавить();
		СтрокаЗамены.Ключ = НовыйКлюч;	
		ТекСтрока.Ключ = НовыйКлюч;
	Иначе
		СтрокаЗамены = ТекОбъект.ЗамененныеПозиции.Найти(ТекСтрока.Ключ,"Ключ");
		Если СтрокаЗамены = Неопределено Тогда //!!!
			СтрокаЗамены = ТекОбъект.ЗамененныеПозиции.Добавить();
			СтрокаЗамены.Ключ = ТекСтрока.Ключ;
		КонецЕсли;		
	КонецЕсли; 	
	СтрокаЗамены.Номенклатура = ТекСтрока.Номенклатура; 
	ТекСтрока.Номенклатура = НоваяПозиция; 
	
	ЗначениеВРеквизитФормы(ТекОбъект,"Объект");
	Модифицированность = Истина;  	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеЗамененныхПозиций()
	
	Элементы.ТоварыЗамененнаяПозиция.Видимость = Объект.ЗамененныеПозиции.Количество()>0;
	Для Каждого Стр Из Объект.ЗамененныеПозиции Цикл
		СтрокаТовары = Объект.Товары.НайтиСтроки(Новый Структура("Ключ", Стр.Ключ));
		СтрокаТовары[0].ЗамененнаяПозиция = Стр.Номенклатура;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьОтображениеЗамененныхПозиций();
	
	РасчитатьЦенуСоСкидкой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПодменуПозиции(Команда)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ПоказатьПредупреждение(,"Выделите строку для удаления замены позиции!", 15);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.ЗамененнаяПозиция) Тогда
		ПоказатьПредупреждение(,"В выбранной строке подмены позиции нет!", 15);
		Возврат;
	КонецЕсли;
	
	ОтменитьПодменуПозицииНаСервере(ТекДанные.НомерСтроки);
	ОбновитьОтображениеЗамененныхПозиций(); 	
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПодменуПозицииНаСервере(НомерСтроки)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекСтрока = ТекОбъект.Товары.Найти(НомерСтроки,"НомерСтроки"); 	
	СтрокаЗамены = Неопределено;
	СтрокаЗамены = ТекОбъект.ЗамененныеПозиции.Найти(ТекСтрока.Ключ,"Ключ");
	Если СтрокаЗамены = Неопределено Тогда //!!!
		Возврат;		
	КонецЕсли; 
	ТекСтрока.Номенклатура = СтрокаЗамены.Номенклатура;
	ТекОбъект.ЗамененныеПозиции.Удалить(СтрокаЗамены);
	
	ЗначениеВРеквизитФормы(ТекОбъект,"Объект");
	Модифицированность = Истина;  	
	
КонецПроцедуры

// Подмена позиий
//////////////////
#КонецОбласти


#Область ПриИзменении

///////////////////////////
// Процедуры ПриИзменении

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент) //При изменении в ТЧ.Товары

	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	
	РасчитатьСуммыПоСтроке();
	
	//Нужно пересчитать % скидок при изменении цены или кол-ва
	Для Каждого стрТовар ИЗ Объект.Товары Цикл 
		
		Если стрТовар.ПроцентСкидкиНаценки <> 0 Тогда //
			
			нСтрокиСкидки = Объект.Скидки.НайтиСтроки(Новый Структура("НазначениеСкидки", ?(ЗначениеЗаполнено(стрТовар.ЗамененнаяПозиция), стрТовар.ЗамененнаяПозиция, стрТовар.Номенклатура)));
			Для Каждого нСтрокаСкидки ИЗ нСтрокиСкидки Цикл 
				нСтрокаСкидки.Сумма = стрТовар.Сумма / 100 * стрТовар.ПроцентСкидкиНаценки;				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьЗаголовки();
	
	РасчитатьСуммыПоДокументу();
	
	ЗаполнитьТЗСебестоимость();
	
	РасчитатьЦенуСоСкидкой();
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ОбновитьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	ОбновитьСтоимостьДоставки();
	ЗаполнитьСкидки(Объект.СпособДоставки);
	
КонецПроцедуры
&НаКлиенте
Процедура МетодОплатыПриИзменении(Элемент)
	ЗаполнитьСкидки(Объект.МетодОплаты);	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьДоставкиПриИзменении(Элемент)
	
	ОбновитьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекДанные.СуммаСкидки = 0;
	
	//Обновить скидку в списке
	нСтрокиСкидки = Объект.Скидки.НайтиСтроки(Новый Структура("НазначениеСкидки", ?(ЗначениеЗаполнено(ТекДанные.ЗамененнаяПозиция), ТекДанные.ЗамененнаяПозиция, ТекДанные.Номенклатура)));
	Если нСтрокиСкидки.Количество() > 0 Тогда 
		Для Каждого нСтрокаСкидки ИЗ нСтрокиСкидки Цикл 
			нСтрокаСкидки.ПроцентСкидки = ТекДанные.ПроцентСкидкиНаценки;
			нСтрокаСкидки.СуммаСкидки = 0;
			нСтрокаСкидки.Сумма = ТекДанные.Сумма / 100 * ТекДанные.ПроцентСкидкиНаценки;
		КонецЦикла;		
	Иначе
		нСтрокаСкидка = Объект.Скидки.Добавить();
		нСтрокаСкидка.НазначениеСкидки = ТекДанные.Номенклатура;
		нСтрокаСкидка.СуммаСкидки = 0;
		нСтрокаСкидка.ПроцентСкидки = ТекДанные.ПроцентСкидкиНаценки;
		нСтрокаСкидка.Сумма = ТекДанные.Сумма / 100 * ТекДанные.ПроцентСкидкиНаценки;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекДанные.ПроцентСкидкиНаценки = 0;
	
	//Обновить скидку в списке
	нСтрокиСкидки = Объект.Скидки.НайтиСтроки(Новый Структура("НазначениеСкидки", ?(ЗначениеЗаполнено(ТекДанные.ЗамененнаяПозиция), ТекДанные.ЗамененнаяПозиция, ТекДанные.Номенклатура)));
	Если нСтрокиСкидки.Количество() > 0 Тогда 
		Для Каждого нСтрокаСкидки ИЗ нСтрокиСкидки Цикл 
			нСтрокаСкидки.ПроцентСкидки = 0;
			нСтрокаСкидки.СуммаСкидки = ТекДанные.СуммаСкидки;
			нСтрокаСкидки.Сумма = ТекДанные.СуммаСкидки;
		КонецЦикла;		
	Иначе
		нСтрокаСкидка = Объект.Скидки.Добавить();
		нСтрокаСкидка.НазначениеСкидки = ТекДанные.Номенклатура;
		нСтрокаСкидка.СуммаСкидки = ТекДанные.СуммаСкидки;
		нСтрокаСкидка.ПроцентСкидки = 0;
		нСтрокаСкидка.Сумма = ТекДанные.СуммаСкидки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)	
	
	УстановитьОтборКонтрагентов();
	УстановитьВидимость();
	
	ИнициализацияОптовогоЗаказа();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ЗаполнитьКИКонтрагента();
	
	//Заполнить скидку постоянному покупателю
	Если КонтрагентЯвляетсяПостояннымПокупателем(Объект.Контрагент) = Истина Тогда 
		ЗаполнитьСкидки(ПолучитьНазначенияСкидокПостоянныйПокупатель());		
	КонецЕсли;
КонецПроцедуры

Функция КонтрагентЯвляетсяПостояннымПокупателем(пКонтрагент)	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Контрагент = &Контрагент
		|	И ЗаказПокупателя.Статус = &СтатусВыполнен";
	
	Запрос.УстановитьПараметр("Контрагент", пКонтрагент);
	Запрос.УстановитьПараметр("СтатусВыполнен", Справочники.СтатусыЗаказов.НайтиПоНаименованию("Выполнен"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции


&НаСервере
Процедура КонтрагентКонтактнаяИнформацияПриОкончанииРедактированияНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		Возврат;
	КонецЕсли;
	
	КонтрагентОбъект = РеквизитФормыВЗначение("Контрагент");	
	КонтрагентОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентКонтактнаяИнформацияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	КонтрагентКонтактнаяИнформацияПриОкончанииРедактированияНаСервере();
	ЗаполнитьКИКонтрагента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеТовара();
	ЗаполнитьСкидки(ТекДанные.Номенклатура);
	
КонецПроцедуры


&НаКлиенте
Процедура СкидкиПриИзменении(Элемент)
	РасчитатьСуммыПоДокументу();
	ОбновитьЗаголовки();
КонецПроцедуры

&НаКлиенте
Процедура СуммаСкидкиССайтаПриИзменении(Элемент)
	ЗаполнитьСкидки(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СкидкиСуммаПроцентПриИзменении(Элемент)
	
	ТекДанные = Элементы.Скидки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИзменениеСуммы = Элемент.Имя = "СкидкиСуммаСкидки";
	
	Если ТипЗнч(ТекДанные.НазначениеСкидки) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		нСтрокаТовары = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура",ТекДанные.НазначениеСкидки));
		
		Если нСтрокаТовары.Количество() = 0 Тогда //Если есть подмена берем подмененный товар, по нему считается все
			
			нСтрокаПодмены = Объект.ЗамененныеПозиции.НайтиСтроки(Новый Структура("Номенклатура",ТекДанные.НазначениеСкидки));
			
			Если нСтрокаПодмены.Количество() > 0 Тогда 
				
				нСтрокаТовары = Объект.Товары.НайтиСтроки(Новый Структура("Ключ",нСтрокаПодмены[0].Ключ));				
				
			КонецЕсли;			
			
		КонецЕсли;
		
		Для Каждого нСтрокаТовар ИЗ нСтрокаТовары Цикл 
			
			Если ИзменениеСуммы = Истина Тогда 
				ТекДанные.ПроцентСкидки = 0;
				ТекДанные.Сумма = ТекДанные.СуммаСкидки;
			Иначе
				ТекДанные.СуммаСкидки = 0;
				ТекДанные.Сумма = нСтрокаТовар.Сумма / 100 * ТекДанные.ПроцентСкидки;
			КонецЕсли;
			
			нСтрокаТовар.СуммаСкидки = ТекДанные.СуммаСкидки;
			нСтрокаТовар.ПроцентСкидкиНаценки = ТекДанные.ПроцентСкидки;
			нСтрокаТовар.СуммаСоСкидкой = нСтрокаТовар.Сумма - ТекДанные.Сумма;
			
		КонецЦикла;	
		
	Иначе
		
		//Нужная сумма дока без всех скидок
		СуммаДокументаБезСкидок = Объект.Товары.Итог("Сумма") 
			+ Объект.Упаковка.Итог("Сумма") 
			+ Объект.Услуги.Итог("Сумма") 
			+ ?(Объект.СтоимостьДоставкиССайта <> 0, Объект.СтоимостьДоставкиССайта, Объект.СтоимостьДоставки);
		
		Если ИзменениеСуммы = Истина Тогда			
			ТекДанные.ПроцентСкидки = 0;
			ТекДанные.Сумма = ТекДанные.СуммаСкидки;
		Иначе
			ТекДанные.СуммаСкидки = 0;
			ТекДанные.Сумма = СуммаДокументаБезСкидок / 100 * ТекДанные.ПроцентСкидки;
		КонецЕсли;		
		
	КонецЕсли;	
	
	РасчитатьСуммыПоДокументу();
	ОбновитьЗаголовки();	
		
КонецПроцедуры


&НаКлиенте
Процедура МетодОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
	УдалитьСкидку(Объект.МетодОплаты); //удалить скидку на предыдущие метод оплаты	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УдалитьСкидку(Объект.СпособДоставки);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УдалитьСкидку(ТекДанные.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УдалитьСкидку(ПолучитьНазначенияСкидокПостоянныйПокупатель());
КонецПроцедуры

Функция ПолучитьНазначенияСкидокПостоянныйПокупатель()
	Возврат Перечисления.НазначенияСкидок.ПостоянныйПокупатель;	
КонецФункции


// Процедуры ПриИзменении
///////////////////////////
#КонецОбласти


#Область Скидки

////////////////////////////
// Скидки
Процедура ЗаполнитьСкидкиСервер(НазначениеСкидки)
	
	Если ТипЗнч(НазначениеСкидки) = Тип("СправочникСсылка.МетодыОплаты")
		ИЛИ ТипЗнч(НазначениеСкидки) = Тип("СправочникСсылка.СпособыДоставки")
		ИЛИ НазначениеСкидки = Перечисления.НазначенияСкидок.ПостоянныйПокупатель Тогда
		
		МОСДСкидкаВыборка = ПолучитьСкидку(НазначениеСкидки, Объект.Дата);
		
		Пока МОСДСкидкаВыборка.Следующий() Цикл
			
			нСтрокаСкидка = Объект.Скидки.Добавить();
			нСтрокаСкидка.НазначениеСкидки = НазначениеСкидки;
			нСтрокаСкидка.СуммаСкидки = МОСДСкидкаВыборка.СуммаСкидки;
			нСтрокаСкидка.ПроцентСкидки = МОСДСкидкаВыборка.ПроцентСкидки;
			
			//Расчитать скидку 
			Если нСтрокаСкидка.ПроцентСкидки <> 0 Тогда
				нСтрокаСкидка.Сумма = Объект.СуммаДокумента / 100 * нСтрокаСкидка.ПроцентСкидки;
			Иначе
				нСтрокаСкидка.Сумма = нСтрокаСкидка.СуммаСкидки;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(НазначениеСкидки) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ТоварСкидкаВыборка = ПолучитьСкидку(НазначениеСкидки, Объект.Дата); 
		Пока ТоварСкидкаВыборка.Следующий() Цикл
			
			нСтрокаСкидка = Объект.Скидки.Добавить();
			нСтрокаСкидка.НазначениеСкидки = НазначениеСкидки;
			нСтрокаСкидка.СуммаСкидки = ТоварСкидкаВыборка.СуммаСкидки;
			нСтрокаСкидка.ПроцентСкидки = ТоварСкидкаВыборка.ПроцентСкидки;
			
			нСтрокиТовары = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура",НазначениеСкидки)); //возьмем суммы по товарам и расчитаем скидку
			Для Каждого нСтрокаТовар Из нСтрокиТовары Цикл 
				
				//Расчитать скидку 
				Если нСтрокаСкидка.ПроцентСкидки <> 0 Тогда
					нСтрокаСкидка.Сумма = нСтрокаТовар.Сумма / 100 * нСтрокаСкидка.ПроцентСкидки;
				Иначе
					нСтрокаСкидка.Сумма = нСтрокаСкидка.СуммаСкидки;							
				КонецЕсли;
				
				нСтрокаТовар.СуммаСкидки = нСтрокаСкидка.СуммаСкидки;
				нСтрокаТовар.ПроцентСкидкиНаценки = нСтрокаСкидка.ПроцентСкидки;
				//нСтрокаТовар.СуммаСоСкидкой = нСтрокаТовар.Сумма - нСтрокаТовар.СуммаСкидки;
				
			КонецЦикла;			
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкидки(НазначениеСкидки)
	
	//Нужная исходня сумма дока для вычисления сумм скидок, после будет пересчитана с учетом скидок
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") 
		+ Объект.Упаковка.Итог("Сумма") 
		+ Объект.Услуги.Итог("Сумма") 
		+ ?(Объект.СтоимостьДоставкиССайта <> 0, Объект.СтоимостьДоставкиССайта, Объект.СтоимостьДоставки);
	
	ЗаполнитьСкидкиСервер(НазначениеСкидки);
	
	РасчитатьСуммыПоДокументу();
	ОбновитьЗаголовки();
	
КонецПроцедуры

Функция ПолучитьСкидку(НазначениеСкидки, Период)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиСрезПоследних.НазначениеСкидки КАК НазначениеСкидки,
	|	СкидкиСрезПоследних.ПроцентСкидки КАК ПроцентСкидки,
	|	СкидкиСрезПоследних.СуммаСкидки КАК СуммаСкидки,
	|	СкидкиСрезПоследних.Период КАК ДатаНачала,
	|	СкидкиСрезПоследних.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.Скидки.СрезПоследних(&Период, НазначениеСкидки = &НазначениеСкидки) КАК СкидкиСрезПоследних
	|ГДЕ
	|	СкидкиСрезПоследних.ДатаОкончания >= &Период";
	
	Запрос.УстановитьПараметр("НазначениеСкидки", НазначениеСкидки);
	Запрос.УстановитьПараметр("Период", Период);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСкидку(НазначениеСкидки)
	
	нСтрокиСкидка = Объект.Скидки.НайтиСтроки(Новый Структура("НазначениеСкидки",НазначениеСкидки));
	Для Каждого нСтрокаСкидка Из нСтрокиСкидка Цикл 
		Объект.Скидки.Удалить(нСтрокаСкидка);
	КонецЦикла;
	
	РасчитатьСуммыПоДокументу();
	ОбновитьЗаголовки();
	
КонецПроцедуры


// Скидки
////////////////////////////
#КонецОбласти


#Область ПересчетСумм
////////////////////////////////////
// Процедуры пересчета сумм

&НаКлиенте
Процедура РасчитатьСуммыПоСтроке()
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекДанные.Сумма = ТекДанные.Количество * ТекДанные.Цена;	
	ТекДанные.СуммаСоСкидкой = ТекДанные.Сумма - ТекДанные.СуммаСкидки - ТекДанные.Сумма / 100 * ТекДанные.ПроцентСкидкиНаценки;
	
	ОбновитьЗаголовки();
	
КонецПроцедуры

Процедура РасчитатьСуммыПоДокументуСервер()
	
	//Расчитать сумму скидки по документу
	Объект.СуммаСкидки = 0;
	Для Каждого стрСкидка ИЗ Объект.Скидки Цикл 
		
		Если ТипЗнч(стрСкидка.НазначениеСкидки) = Тип("СправочникСсылка.МетодыОплаты") ИЛИ
			ТипЗнч(стрСкидка.НазначениеСкидки) = Тип("СправочникСсылка.СпособыДоставки") Тогда //включено в скидку по документу
			
			Объект.СуммаСкидки = Объект.СуммаСкидки + стрСкидка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаСкидки = Объект.СуммаСкидки + Объект.СуммаСкидкиССайта;
	
	//Расчитать сумму общей скидки
	Объект.СкидкаВсего = Объект.Скидки.Итог("Сумма") + Объект.СуммаСкидкиССайта ;
	
	//Расчитать сумму документа
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") 
		+ Объект.Упаковка.Итог("Сумма") 
		+ Объект.Услуги.Итог("Сумма") 
		- Объект.СкидкаВсего 
		+ ?(Объект.СтоимостьДоставкиССайта <> 0, Объект.СтоимостьДоставкиССайта, Объект.СтоимостьДоставки);
		
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммыПоДокументу()
	РасчитатьСуммыПоДокументуСервер();
КонецПроцедуры

// Процедуры пересчета сумм
////////////////////////////////////

&НаКлиенте
Процедура ЗаполнитьСсылкуНаСтраницуОплаты()
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
    
    Запись = Новый ЗаписьТекста(ВременныйФайл, "CESU-8");
    Запись.Записать("order=" + Формат(Объект.IDНаСайте,"ЧГ=0") + "&summ=" + Формат(Объект.СуммаДокумента,"ЧГ=0"));
    Запись.Закрыть();
    
    ДвДанные = Новый ДвоичныеДанные(ВременныйФайл);
    Base64 = Base64Строка(ДвДанные);
    
    УдалитьФайлы(ВременныйФайл);
	
	URL = "https://www.orenburgshal.ru/avangard/?q=" + Base64; 
	СсылкаСтраницаОплаты = URL;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	//Объект.Дата = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен()
		И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияКлиентПереопределяемый.ЕстьНеобработанноеСобытие() Тогда
			
				ДанныеШтрихкодов = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
				
				НомерСчитанныйТовар = 0;
				ОбработатьШтрихкоды(ДанныеШтрихкодов, НомерСчитанныйТовар);
				
				//Элементы.Товары.ТекущаяСтрока = 0;
				
				ТоварыПриИзменении(Неопределено);
				
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, НомерСчитанныйТовар)
	
	Элементы.Товары.ТекущаяСтрока = 0;
	
	Для Каждого стШК Из ДанныеШтрихкодов Цикл 
		//Сообщить(стШК.Штрихкод + " - "  + стШК.Количество);
		
		НоменклатураПоШК = Неопределено;
		//Найти товар по ШК и добавить в ТЧ.Товары
		Если СтрДлина(стШК.Штрихкод) > 9 Тогда
			Попытка
				НоменклатураПоШК = Справочники.Номенклатура.НайтиПоРеквизиту("IDНаСайте", Число(Сред(стШК.Штрихкод, 7, 4))); //180814123400900 			
			Исключение  			
			КонецПопытки;
		Иначе 		
			Если НоменклатураПоШК = Неопределено Тогда
				Попытка
					НоменклатураПоШК = Справочники.Номенклатура.НайтиПоКоду(стШК.Штрихкод);  			
				Исключение
					Возврат;
				КонецПопытки;		
			КонецЕсли;
		КонецЕсли;
		
		//00000000-0000-0000-0000-000000000000
			
		Если Не ЗначениеЗаполнено(НоменклатураПоШК) Тогда 
			Сообщить("Товар с кодом " + Сред(стШК.Штрихкод, 7, 4) + " не найден!");
		Иначе 
			
			мсСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", НоменклатураПоШК));
			
			Если мсСтроки.Количество() = 0 Тогда
				
				Если ЭтаФорма.РежимОбработкиШтрихКода = 2 Тогда 
					Сообщить("Товар " + НоменклатураПоШК + " в табличной части товары не найден!");
					Возврат;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка КАК Ссылка,
				|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
				|ПОМЕСТИТЬ втНоменклатура
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|ГДЕ
				|	Номенклатура.Ссылка = &Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
				|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Цена) КАК Цена
				|ПОМЕСТИТЬ втЦена
				|ИЗ
				|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЗаказа, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних
				|
				|СГРУППИРОВАТЬ ПО
				|	ЦеныНоменклатурыСрезПоследних.Номенклатура
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втНоменклатура.Ссылка КАК Ссылка,
				|	втНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ЕСТЬNULL(втЦена.Цена, 0) КАК Цена
				|ИЗ
				|	втНоменклатура КАК втНоменклатура
				|		ЛЕВОЕ СОЕДИНЕНИЕ втЦена КАК втЦена
				|		ПО втНоменклатура.Ссылка = втЦена.Номенклатура";
				
				Запрос.УстановитьПараметр("ДатаЗаказа", Объект.Дата);
				Запрос.УстановитьПараметр("Номенклатура", НоменклатураПоШК);
				ВыборкаДанныеНоменклатуры = Запрос.Выполнить().Выбрать();
				ВыборкаДанныеНоменклатуры.Следующий();
				
				нСтрока = Объект.Товары.Добавить();
				нСтрока.Номенклатура = НоменклатураПоШК;
				нСтрока.Количество = стШК.Количество;
				нСтрока.ЕдиницаИзмерения = ВыборкаДанныеНоменклатуры.ЕдиницаИзмерения;
				нСтрока.Цена = ВыборкаДанныеНоменклатуры.Цена;				
				Элементы.Товары.ТекущаяСтрока = нСтрока.ПолучитьИдентификатор();

				НомерСчитанныйТовар = нСтрока.НомерСтроки - 1;
				
			Иначе 
				
				Если ЭтаФорма.РежимОбработкиШтрихКода = 1 Тогда
					мсСтроки[0].Количество = мсСтроки[0].Количество + стШК.Количество;
					
					Попытка
						Элементы.Товары.ТекущаяСтрока = мсСтроки[0].ПолучитьИдентификатор();
					Исключение
					КонецПопытки;
					
					НомерСчитанныйТовар = мсСтроки[0].НомерСтроки - 1;
					
				ИначеЕсли ЭтаФорма.РежимОбработкиШтрихКода = 2 Тогда
					
					НомерПровереннойСтроки = мсСтроки[0].НомерСтроки;
					
					Если мсСтроки[0].КоличествоПроверка >= мсСтроки[0].Количество Тогда
						
						Сообщить("Товара " + мсСтроки[0].Номенклатура + " больше чем в заказе!");
						
					Иначе
						
					
						мсСтроки[0].КоличествоПроверка = мсСтроки[0].КоличествоПроверка + стШК.Количество;
						
						НомерСчитанныйТовар = мсСтроки[0].НомерСтроки - 1;
					
					КонецЕсли;
					
					Попытка
						Элементы.Товары.ТекущаяСтрока = мсСтроки[0].ПолучитьИдентификатор();
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьТЗСебестоимость()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект"); 
	ЭтаФорма.Себестоимость.Загрузить(ДокументОбъект.ПолучитьТЗСебестоимость());
	
	ЭтаФорма.Прибыль = ЭтаФорма.Себестоимость.Итог("ПрибыльСИзделия") + Объект.СтоимостьДоставки - Объект.СтоимостьДоставкиССайта;
	//ЭтаФорма.ПрибыльСЗаказа = ЭтаФорма.Себестоимость.Итог("ПрибыльСИзделия") + Объект.СтоимостьДоставкиССайта;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСодержаниеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаСебестоимость Тогда 
		ЗаполнитьТЗСебестоимость();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыЧерезСканер(Команда)
	
	РежимОбработкиШтрихКода = 1;
	Элементы.ТоварыКоличествоПроверка.Видимость = Ложь;
	НомерПровереннойСтроки = 0;
	
КонецПроцедуры

Функция ПолучитьСканерПользователя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодключаемоеОборудование.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
		|ГДЕ
		|	ПодключаемоеОборудование.РабочееМесто = &РабочееМесто
		|	И НЕ ПодключаемоеОборудование.ПометкаУдаления
		|	И ПодключаемоеОборудование.ТипОборудования = &ТипОборудования";
	
	Запрос.УстановитьПараметр("РабочееМесто", ИмяКомпьютера());
	Запрос.УстановитьПараметр("ТипОборудования", Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура НачатьПодключениеОборудованиеПоИдентификаторуЗавершение(Данные, СтрокаТЧ) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТовары(Команда)
	
	РежимОбработкиШтрихКода = 2;
	Элементы.ТоварыКоличествоПроверка.Видимость = Истина;
	НомерПровереннойСтроки = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНаценкуОптПриИзменении(Элемент)
	ПересчетНаценкиКлиент();
КонецПроцедуры

&НаКлиенте
Процедура НаценкаОптПриИзменении(Элемент)
	ПересчетНаценкиКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПересчетНаценкиКлиент()
	
	ПересчетНаценки();
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Элементы.Товары.ТекущаяСтрока = Строка.НомерСтроки - 1;
		
		ТоварыПриИзменении(Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчетНаценки()
	
	//Если выбрать галочку, то цена на все оптовые изделия в заказе (те, что в номенклатуре в находятся в папке опт) 
	//должна рассчитываться как указанная в номенклатуре цена закупки этого изделия * на указанную наценку и округленная до сотен.
	//Если Объект.ИспользоватьНаценкуОпт = Истина Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	&тзТовары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТовары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ втТоварыДляИзмененияЦен
		|ИЗ
		|	втТовары КАК втТовары
		|ГДЕ
		|	втТовары.Номенклатура.ОптовыйТовар
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ЦеныЗакупкиСрезПоследних.Цена) КАК Цена
		|ПОМЕСТИТЬ втЦены
		|ИЗ
		|	РегистрСведений.ЦеныЗакупки.СрезПоследних(
		|			&ДатаЗаказа,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					втТоварыДляИзмененияЦен.Номенклатура КАК Номенклатура
		|				ИЗ
		|					втТоварыДляИзмененияЦен КАК втТоварыДляИзмененияЦен)) КАК ЦеныЗакупкиСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныЗакупкиСрезПоследних.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТоварыДляИзмененияЦен.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(втЦены.Цена, 0) КАК Цена
		|ИЗ
		|	втТоварыДляИзмененияЦен КАК втТоварыДляИзмененияЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
		|		ПО втТоварыДляИзмененияЦен.Номенклатура = втЦены.Номенклатура";
		Запрос.УстановитьПараметр("тзТовары", Объект.Товары.Выгрузить());
		Запрос.УстановитьПараметр("ГруппаОпт", Справочники.Номенклатура.Опт);
		Запрос.УстановитьПараметр("ДатаЗаказа", ?(Объект.Дата = НачалоДня(Объект.Дата), ТекущаяДата(), Объект.Дата));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			мсСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			
			Для Каждого нСтрока Из мсСтроки Цикл
				
				Если Объект.НаценкаОпт = 0 Или Объект.ИспользоватьНаценкуОпт = Ложь Тогда 
					нСтрока.Цена = Выборка.Цена;
				Иначе				
					нСтрока.Цена = Формат(Выборка.Цена + Выборка.Цена / 100 * Объект.НаценкаОпт, "ЧДЦ=3");					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкаПроцентПриИзменении(Элемент)
	
	//	Изменить скидки
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ПроцентСкидкиНаценки = Объект.СкидкаПроцент;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Элементы.Товары.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
		ТоварыПроцентСкидкиПриИзменении(Неопределено);
		ТоварыПриИзменении(Неопределено);
		
	КонецЦикла;
	
	// Пересчитать строки
	
	// Пересчитать документ
	
КонецПроцедуры
