
&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОбновитьНаличиеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаличие(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ПоказатьПредупреждение(,"Не указан склад отправки!",15);
		Возврат;
	КонецЕсли;
	
	ОбновитьНаличиеСервер();
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаличиеСервер()
		
	Номенклатура = Новый Массив;
	Для Каждого Стр Из Объект.Товары Цикл
		Номенклатура.Добавить(Стр.Номенклатура);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.КоличествоОстаток КАК ОстатокНаСкладе,
	|	0 КАК ОстатокПоКомпании,
	|	0 КАК ОжидаемыйОстаток,
	|	0 КАК ОстатокВРезерве
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура В (&Номенклатура)
	|				И Склад = &СкладОтправки) КАК ЗапасыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапасыОстатки.Номенклатура,
	|	0,
	|	ЗапасыОстатки.КоличествоОстаток,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура В (&Номенклатура)
	|				И Склад <> &СкладОтправки) КАК ЗапасыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОжидаемыеТоварыОстатки.Номенклатура,
	|	0,
	|	0,
	|	ОжидаемыеТоварыОстатки.КоличествоОстаток,
	|	0
	|ИЗ
	|	РегистрНакопления.ОжидаемыеТовары.Остатки(, Номенклатура В (&Номенклатура)) КАК ОжидаемыеТоварыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыВРезервеОстатки.Номенклатура,
	|	0,
	|	0,
	|	0,
	|	ТоварыВРезервеОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыВРезерве.Остатки(, Номенклатура В (&Номенклатура)) КАК ТоварыВРезервеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Номенклатура,
	|	СУММА(вт.ОстатокНаСкладе) КАК ОстатокНаСкладе,
	|	СУММА(вт.ОстатокПоКомпании) КАК ОстатокПоКомпании,
	|	СУММА(вт.ОжидаемыйОстаток) КАК ОжидаемыйОстаток,
	|	СУММА(вт.ОстатокВРезерве) КАК ОстатокВРезерве
	|ИЗ
	|	вт КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Номенклатура";
	Запрос.УстановитьПараметр("СкладОтправки",Объект.Склад);
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	РезультатВыгрузка = Запрос.Выполнить().Выгрузить();      
	
	Для Каждого Стр Из Объект.Товары Цикл
		Найдено = РезультатВыгрузка.Найти(Стр.Номенклатура,"Номенклатура");
		Если Найдено <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Стр,Найдено);	
		Иначе
			Стр.ОстатокНаСкладе = 0;
			Стр.ОстатокПоКомпании = 0;
			Стр.ОжидаемыйОстаток = 0;
			Стр.ОстатокВРезерве = 0;  			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоматическиУпаковку(Команда)
	
	Если Объект.Упаковка.Количество() > 0 Тогда
		спВарианты = Новый СписокЗначений;
		спВарианты.Добавить("Заполнить заново","Заполнить заново");
		спВарианты.Добавить("Добавить к существующим","Добавить к существующим");
		спВарианты.Добавить("Отмена","Отмена");
		Оповещение = Новый ОписаниеОповещения("ВопросУпаковкаНеПустаяПродолжение",ЭтаФорма);
		ПоказатьВопрос(Оповещение,"Табличная часть ""Упаковка"" не пустая, выберите вариант действия!",спВарианты,35,спВарианты[0],"Внимание!",спВарианты[3]);
	Иначе
		ЗаполнитьУпаковкуПоПравилам();
		ОбновитьЗаголовки();
	КонецЕсли;           	
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУпаковкаНеПустаяПродолжение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РезультатВопроса) ИЛИ РезультатВопроса = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьУпаковкуПоПравилам(РезультатВопроса = "Заполнить заново");
	ОбновитьЗаголовки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУпаковкуПоПравилам(Знач Заново = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	тчТовары.Номенклатура,
	|	тчТовары.Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&тчТовары КАК тчТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Номенклатура,
	|	СУММА(втТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСвернутые
	|ИЗ
	|	втТовары КАК втТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	втТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСвернутые.Номенклатура,
	|	ТоварыСвернутые.Количество,
	|	ЕСТЬNULL(ТоварыПоКатегориям.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииТоваров.ПустаяСсылка)) КАК Категория
	|ПОМЕСТИТЬ ТоварыКатегории
	|ИЗ
	|	ТоварыСвернутые КАК ТоварыСвернутые
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыПоКатегориям КАК ТоварыПоКатегориям
	|		ПО ТоварыСвернутые.Номенклатура = ТоварыПоКатегориям.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	ПравилаУпаковкиЗаказов.Упаковка,
	|	ПравилаУпаковкиЗаказов.КоличествоУпаковка,
	|	3 КАК Приоритет
	|ПОМЕСТИТЬ Правила
	|ИЗ
	|	РегистрСведений.ПравилаУпаковкиЗаказов КАК ПравилаУпаковкиЗаказов
	|ГДЕ
	|	ПравилаУпаковкиЗаказов.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипыПравилУпаковки.ДляКаждогоЗаказа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКатегории.Номенклатура,
	|	ПравилаУпаковкиЗаказов.Упаковка,
	|	ТоварыКатегории.Количество / ПравилаУпаковкиЗаказов.КоличествоТовара * ПравилаУпаковкиЗаказов.КоличествоУпаковка,
	|	2
	|ИЗ
	|	РегистрСведений.ПравилаУпаковкиЗаказов КАК ПравилаУпаковкиЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыКатегории КАК ТоварыКатегории
	|		ПО (ПравилаУпаковкиЗаказов.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипыПравилУпаковки.ДляКатегорииПозиции))
	|			И ПравилаУпаковкиЗаказов.Номенклатура = ТоварыКатегории.Категория
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыСвернутые.Номенклатура,
	|	ПравилаУпаковкиЗаказов.Упаковка,
	|	ТоварыСвернутые.Количество / ПравилаУпаковкиЗаказов.КоличествоТовара * ПравилаУпаковкиЗаказов.КоличествоУпаковка,
	|	1
	|ИЗ
	|	РегистрСведений.ПравилаУпаковкиЗаказов КАК ПравилаУпаковкиЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыСвернутые КАК ТоварыСвернутые
	|		ПО (ПравилаУпаковкиЗаказов.ТипПравила = ЗНАЧЕНИЕ(Перечисление.ТипыПравилУпаковки.ДляКаждойПозиции))
	|			И ПравилаУпаковкиЗаказов.Номенклатура = ТоварыСвернутые.Номенклатура
	|			И ПравилаУпаковкиЗаказов.КоличествоТовара <= ТоварыСвернутые.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.Номенклатура,
	|	Правила.Упаковка,
	|	МИНИМУМ(Правила.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ДействующиеПриоритеты
	|ИЗ
	|	Правила КАК Правила
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.Номенклатура,
	|	Правила.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеПриоритеты.Упаковка,
	|	СУММА(Правила.КоличествоУпаковка) КАК КоличествоУпаковка
	|ИЗ
	|	Правила КАК Правила
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДействующиеПриоритеты КАК ДействующиеПриоритеты
	|		ПО Правила.Номенклатура = ДействующиеПриоритеты.Номенклатура
	|			И Правила.Упаковка = ДействующиеПриоритеты.Упаковка
	|			И Правила.Приоритет = ДействующиеПриоритеты.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	ДействующиеПриоритеты.Упаковка";
	тчТовары = Объект.Товары.Выгрузить(,"Номенклатура,Количество");
	Запрос.УстановитьПараметр("тчТовары",тчТовары);
	Рез = Запрос.Выполнить().Выгрузить();
	Если Заново Тогда
		Объект.Упаковка.Очистить();	
	КонецЕсли;
	Для Каждого Стр Из Рез Цикл
		Если Стр.КоличествоУпаковка <= 0 Тогда
			Продолжить;
		КонецЕсли;
		нс = Объект.Упаковка.Добавить();
		нс.Номенклатура = Стр.Упаковка;
		нс.Количество = Стр.КоличествоУпаковка;
	КонецЦикла; 	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовки()
	
	Элементы.ГруппаТовары.Заголовок = "Товары (на "+Формат(Объект.Товары.Итог("Сумма"),"ЧЦ=15; ЧДЦ=2; ЧН=0.00")+"руб.)";
	Элементы.ГруппаУпаковка.Заголовок = "Упаковка (на "+Формат(Объект.Упаковка.Итог("Сумма"),"ЧЦ=15; ЧДЦ=2; ЧН=0.00")+"руб.)";
	Элементы.ГруппаДоставка.Заголовок = "Услуги (на "+Формат(Объект.Услуги.Итог("Сумма"),"ЧЦ=15; ЧДЦ=2; ЧН=0.00")+"руб.)";
	//Выручка = Объект.Товары.Итог("Сумма")-Объект.Упаковка.Итог("Сумма")-Объект.СтоимостьДоставки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Объект.Упаковка.Количество() = 0
			И Объект.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказовПокупателей.Розничный")
				И Объект.Статус = ПредопределенноеЗначение("Справочник.СтатусыЗаказов.Новый") Тогда
		ЗаполнитьУпаковкуПоПравилам();
		Сообщить("В заказ была автоматически рассчитана упаковка!");
		Если Объект.Упаковка.Количество() > 0 Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	ОбновитьЗаголовки();
	
	УстановитьВидимость();
	
	УстановитьОтборКонтрагентов();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	//Элементы.IDНаСайте.Видимость = (Объект.IDНаСайте<>0);
	ЭтоОптовыйЗаказ = Объект.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказовПокупателей.Оптовый");
	Элементы.ТранспортнаяКомпания.Видимость = ЭтоОптовыйЗаказ; 
	Элементы.ФормаСчетНаОплату.Видимость = ЭтоОптовыйЗаказ;
	//Элементы.
	
КонецПроцедуры
&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ОбновитьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ОбновитьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	ОбновитьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьДоставкиПриИзменении(Элемент)
	
	ОбновитьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	Клиент.РассчитатьСуммуТЧ(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	
	Клиент.РассчитатьСуммуТЧПоСкидке(Элементы.Товары.ТекущиеДанные); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	Клиент.РассчитатьСуммуТЧПоСкидке(Элементы.Товары.ТекущиеДанные, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)	
	
	УстановитьОтборКонтрагентов();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборКонтрагентов()
	
	НовыйМассив = Новый Массив;
	НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Покупатель", Истина));
	Если Объект.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказовПокупателей.Оптовый") Тогда
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Опт", Истина));
	ИначеЕсли Объект.ВидЗаказа = ПредопределенноеЗначение("Перечисление.ВидыЗаказовПокупателей.Розничный") Тогда
		НовыйМассив.Добавить(Новый ПараметрВыбора("Отбор.Розница", Истина));
	КонецЕсли; 
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Контрагент.ПараметрыВыбора = НовыеПараметры;

КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплату(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(,"Документ необходимо записать!");
		Возврат;
	КонецЕсли;
	
	ТабДок = ПечатьСчетаНаОплату();
	ТабДок.Показать("Счет на оплату по заказу покупателя №"+Объект.Номер+" от "+Объект.Дата);     	
	
КонецПроцедуры

&НаСервере
Функция ПечатьСчетаНаОплату()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокументОбъект.ПечатьСчетаНаОплату();
	
КонецФункции

&НаКлиенте
Процедура Торг12(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(,"Документ необходимо записать!");
		Возврат;
	КонецЕсли;
	
	ТабДок = ПечатьТорг12();
	ТабДок.Показать("ТОРГ-12 по заказу покупателя №"+Объект.Номер+" от "+Объект.Дата);

КонецПроцедуры

&НаСервере
Функция ПечатьТорг12()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокументОбъект.ПечатьТорг12();
	
КонецФункции
