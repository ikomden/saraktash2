
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидЗаказа = Перечисления.ВидыЗаказовПокупателей.ПустаяСсылка();
	ОбновитьСписокЗаказов();
	Раскрасить();  	
	
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список);
	// Установим формат для текущей даты: ДФ=Ч:мм
	РаботаСОтборами.УстановитьОформлениеКолонкиДата(Список);
	
КонецПроцедуры

&НаСервере
Процедура Раскрасить()
	
	СлужебныйСервер.РаскраситьПоСтатусам(ЭтаФорма,"Список","Статус");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененЭлементСтатусЗаказа" Тогда  		
		Раскрасить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗаказов()
	
	Список.Параметры.УстановитьЗначениеПараметра("ВидЗаказа",ВидЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаказаПриИзменении(Элемент)
	
	ОбновитьСписокЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Статус", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;   	

КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерЗаказаОкончаниеВводаТекста(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ВыбранноеЗначение = Число(ВыбранноеЗначение);
	Исключение
		Сообщить("Номер заказа должен содержать только цифры");
		Возврат;
	КонецПопытки;
	
	УстановитьМеткуИОтборСписка("IDНаСайте", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "Список", "Дата");
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	//РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	//НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	//РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Процедура ОтборКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Контрагент", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;   	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаличиеТовараПоЗаказам(Команда)
	
	ОбновитьНаличиеТоваровПоЗаказамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаличиеТоваровПоЗаказамНаСервере()
	
	СКД = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиСКД = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиСКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);     	
	ВыбранныеЗаказы = Результат.ВыгрузитьКолонку("Ссылка");
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыЗаказов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СтатусыКОбработке
	|ИЗ
	|	Справочник.СтатусыЗаказов КАК СтатусыЗаказов
	|ГДЕ
	|	НЕ СтатусыЗаказов.ПометкаУдаления
	|	И НЕ СтатусыЗаказов.ТоварСписывается
	|	И НЕ СтатусыЗаказов.РаботаПоЗаказуЗакрыта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ВыбранныеЗаказы
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СтатусыКОбработке КАК СтатусыКОбработке
	|		ПО ЗаказПокупателя.Статус = СтатусыКОбработке.Ссылка
	|			И (ЗаказПокупателя.Ссылка В (&ВыбранныеЗаказы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбранныеЗаказы.Заказ КАК Заказ,
	|	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяТовары.Количество КАК Заказано
	|ПОМЕСТИТЬ ТоварыИзЗаказов
	|ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныеЗаказы КАК ВыбранныеЗаказы
	|		ПО ЗаказПокупателяТовары.Ссылка = ВыбранныеЗаказы.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.КоличествоОстаток КАК Наличие
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.Запасы.Остатки(
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					ТоварыИзЗаказов.Номенклатура
	|				ИЗ
	|					ТоварыИзЗаказов)) КАК ЗапасыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВРезервеОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВРезервеОстатки.КоличествоОстаток КАК Резерв
	|ПОМЕСТИТЬ Резервы
	|ИЗ
	|	РегистрНакопления.ТоварыВРезерве.Остатки(
	|			,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					ТоварыИзЗаказов.Номенклатура
	|				ИЗ
	|					ТоварыИзЗаказов)) КАК ТоварыВРезервеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыИзЗаказов.Номенклатура КАК Номенклатура,
	|	СУММА(ТоварыИзЗаказов.Заказано) КАК Заказано
	|ПОМЕСТИТЬ ЗаказыСвод
	|ИЗ
	|	ТоварыИзЗаказов КАК ТоварыИзЗаказов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыИзЗаказов.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыСвод.Номенклатура КАК НоменклатураЗаказ,
	|	ЗаказыСвод.Номенклатура.Артикул КАК Артикул,
	|	ЗаказыСвод.Номенклатура.ОсновнойПоставщик КАК Поставщик,
	|	ЗаказыСвод.Заказано КАК Заказано,
	|	ЕСТЬNULL(Остатки.Наличие, 0) КАК Наличие,
	|	ЕСТЬNULL(Резервы.Резерв, 0) КАК Резерв,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Остатки.Наличие, 0) - ЕСТЬNULL(Резервы.Резерв, 0) < ЗаказыСвод.Заказано
	|			ТОГДА ЗаказыСвод.Заказано - (ЕСТЬNULL(Остатки.Наличие, 0) - ЕСТЬNULL(Резервы.Резерв, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НеХватает
	|ИЗ
	|	ЗаказыСвод КАК ЗаказыСвод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ЗаказыСвод.Номенклатура = Остатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Резервы КАК Резервы
	|		ПО ЗаказыСвод.Номенклатура = Резервы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыИзЗаказов.Номенклатура КАК Номенклатура,
	|	ТоварыИзЗаказов.Заказ КАК НоменклатураЗаказ,
	|	СУММА(ТоварыИзЗаказов.Заказано) КАК Заказано
	|ИЗ
	|	ТоварыИзЗаказов КАК ТоварыИзЗаказов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыИзЗаказов.Номенклатура,
	|	ТоварыИзЗаказов.Заказ";
	Запрос.УстановитьПараметр("ВыбранныеЗаказы", ВыбранныеЗаказы);
	Пакет = Запрос.ВыполнитьПакет();
	РезультатНаличие = Пакет[6];
	РезультатЗаказы = Пакет[7];
	
	дз = ДанныеФормыВЗначение(ОстаткиПоЗаказам,Тип("ДеревоЗначений"));
	дз.Строки.Очистить();
	
	ТаблицаЗаказов = РезультатЗаказы.Выгрузить();
	
	ВыбНаличие = РезультатНаличие.Выбрать();
	Пока ВыбНаличие.Следующий() Цикл
		НайденныеЗаказы = ТаблицаЗаказов.НайтиСтроки(Новый Структура("Номенклатура", ВыбНаличие.НоменклатураЗаказ));
		нс = дз.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(нс, ВыбНаличие);
		Для Каждого СтрокаЗаказа Из НайденныеЗаказы Цикл
			нс1 = нс.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(нс1, СтрокаЗаказа);
			нс1.СтрокаЗаказ = Истина;			
		КонецЦикла;		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(дз, ОстаткиПоЗаказам);
	Элементы.ОстаткиПоЗаказам.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпособДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("СпособДоставки", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;   	

КонецПроцедуры

&НаКлиенте
Процедура ОтборТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Товары.Номенклатура", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;   	

КонецПроцедуры

&НаКлиенте
Процедура ОтборМетодОплатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//ЮРР 11.04.2017 1:19:29 	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("МетодОплаты", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтборЕМаилОкончаниеВводаТекста(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Контрагент.КонтактнаяИнформация.Представление", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ) 	
	
	//ЮРР 11.04.2017 1:33:16 Наложить отбор по периоду, отображать за последнюю неделю
	пПараметры = Новый Структура("Форма, ИмяСпискаОтбора, ИмяПоляОтбора", ЭтотОбъект, "Список", "Дата");
	пНовыйПериод = Новый СтандартныйПериод;
	пНовыйПериод.ДатаНачала = НачалоДня(ТекущаяДата()) - 60*60*24*7;
	пНовыйПериод.ДатаОкончания = КонецДня(ТекущаяДата());
	
	РаботаСОтборамиКлиент.ПредставлениеПериодаНажатиеЗавершение(пНовыйПериод, пПараметры)
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборНомерЗаказаВнешнийОкончаниеВводаТекста(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ВыбранноеЗначениеЧисло = Число(ВыбранноеЗначение);
	Исключение
		Сообщить("Номер заказа должен содержать только цифры");
		Возврат;
	КонецПопытки;
	
	УстановитьМеткуИОтборСписка("НомерЗаказаВнешний", Элемент.Родитель.Имя, СокрЛП(ВыбранноеЗначение));
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры



