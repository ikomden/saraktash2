
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ВидЗаказа = Перечисления.ВидыЗаказовПокупателей.Оптовый Тогда
		Склад = Справочники.Склады.НайтиПоКоду("000000002");
	КонецЕсли;
	
	Если Дата < Константы.ДатаНачалаУчета.Получить() Тогда 
		Для Каждого Движение Из Движения Цикл 
			Движение.Очистить();
			Движение.Записать();
			Движение.Записывать = Ложь;			
		КонецЦикла;		
		Возврат;		
	КонецЕсли;
	
	Движения.Продажи.Записывать = Истина;
	Движения.ДополнительныеРасходы.Записывать = Истина;
	Движения.СебестоимостьТоваров.Записывать = Истина;
	Движения.Запасы.Записывать = Истина;
	Движения.Взаиморасчеты.Записывать = Истина;	
	Движения.РасходыНаУслуги.Записывать = Истина;	
	
	Если ЗначениеЗаполнено(Статус) И Статус.ТоварСписывается Тогда
		
		/////////////////////////////////////
		//Запасы
		
		//  1. Получение запросом данных документа     
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Количество КАК Количество
		|ПОМЕСТИТЬ ТоварыПредв
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура,
		|	Товары.Количество
		|ИЗ
		|	Документ.ЗаказПокупателя.Упаковка КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПредв.Номенклатура КАК Номенклатура,
		|	СУММА(ТоварыПредв.Количество) КАК Количество
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	ТоварыПредв КАК ТоварыПредв
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПредв.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Количество КАК Количество
		|ИЗ
		|	Товары КАК Товары";     
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		//  2. Формирование движений-расход регистра
		Движения.Запасы.Очистить();
		ВыборкаТовары = РезультатЗапроса.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			
			Движение = Движения.Запасы.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.Номенклатура = ВыборкаТовары.Номенклатура;
			Движение.Склад = Склад;
			Движение.Количество = ВыборкаТовары.Количество;
			
		КонецЦикла;
		
		//  3. Запись движений в БД
		Движения.Запасы.Записать();
		
		//  4. Запрос, получающий отрицательные остатки из регистра
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ втОстатки
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			&МоментВремени,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					Товары.Номенклатура КАК Номенклатура
		|				ИЗ
		|					Товары КАК Товары)) КАК ЗапасыОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВРезервеОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВРезервеОстатки.КоличествоОстаток КАК КоличествоРезерв
		|ПОМЕСТИТЬ втРезервы
		|ИЗ
		|	РегистрНакопления.ТоварыВРезерве.Остатки(
		|			&МоментВремени,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					Товары.Номенклатура КАК Номенклатура
		|				ИЗ
		|					Товары КАК Товары)) КАК ТоварыВРезервеОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Товары.Номенклатура) КАК НоменклатураПредставление,
		|	Товары.Количество КАК Количество,
		|	Товары.Количество + ЕСТЬNULL(втОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(втРезервы.КоличествоРезерв, 0) КАК КоличествоРезерв
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
		|		ПО Товары.Номенклатура = втОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРезервы КАК втРезервы
		|		ПО Товары.Номенклатура = втРезервы.Номенклатура
		|ГДЕ
		|	ЕСТЬNULL(втОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(втРезервы.КоличествоРезерв, 0) < 0";         
		ГраницаКонтроля = Новый Граница(МоментВремени(), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("МоментВремени", ГраницаКонтроля);
		РезультатЗапроса = Запрос.Выполнить();
		
		//  5. Вывод сообщений о недостатке товаров
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Если Константы.ЗаказПокупателяРазрешитьОтрицательныеОстатки.Получить() = Истина Тогда
				Сообщить("Разрешено проведение заказа с отрицательными остатками.", СтатусСообщения.Информация);
				Отказ = Отказ Или Ложь;
			Иначе
				Отказ = Истина;				
			КонецЕсли;				
			
			ВыборкаОшибки = РезультатЗапроса.Выбрать();
			Пока ВыборкаОшибки.Следующий() Цикл
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Товара " + ВыборкаОшибки.НоменклатураПредставление + " недостаточно на остатках. Заказано: "
				+ ВыборкаОшибки.Количество + ", остаток: " + ВыборкаОшибки.КоличествоОстаток + ", резерв: " + ВыборкаОшибки.КоличествоРезерв;
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
		
		//Запасы
		/////////////////////////////////////  	
		
		//Для Каждого ТекСтрока Из Упаковка Цикл
		//	Движение = Движения.ДополнительныеРасходы.Добавить();
		//	Движение.Период = Дата;
		//	Движение.Измерение = ТекСтрока.Номенклатура;	
		//	Движение.Сумма = ТекСтрока.Сумма;
		//КонецЦикла; 
		
		Для Каждого ТекСтрока Из Товары Цикл
			Движение = Движения.Продажи.Добавить();
			Движение.Период = Дата;
			Движение.Номенклатура = ТекСтрока.Номенклатура;	
			Движение.Количество = ТекСтрока.Количество;    
			Движение.Сумма = ?(ТекСтрока.СуммаСоСкидкой > 0, ТекСтрока.СуммаСоСкидкой, ТекСтрока.Сумма);
		КонецЦикла;  	
		
		//Если ЗначениеЗаполнено(СпособДоставки) Тогда
		//	Движение = Движения.ДополнительныеРасходы.Добавить();
		//	Движение.Период = Дата;
		//	Движение.Измерение = СпособДоставки;	
		//	Движение.Сумма = СтоимостьДоставки;
		//КонецЕсли;	
		
		УчетСебестоимости.УчестьСебестоимость(ЭтотОбъект,РежимПроведения,Отказ);
		
		//Расходы на услуги
		
		// 1. Выбрать данные по товарам
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ТоварыПредв
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура
		|ИЗ
		|	Документ.ЗаказПокупателя.Упаковка КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПредв.Номенклатура КАК Номенклатура
		|ИЗ
		|	ТоварыПредв КАК ТоварыПредв
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПредв.Номенклатура";     
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		тзТовары = Запрос.Выполнить().Выгрузить();
		
		Если тзТовары.Количество() <> 0 Тогда
			
			// 2. Выбрать действующие условия
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УсловияПоУслугамСрезПоследних.Услуга КАК Услуга,
			|	УсловияПоУслугамСрезПоследних.Процент КАК Процент,
			|	УсловияПоУслугамСрезПоследних.МинимальнаяСумма КАК МинимальнаяСумма,
			|	УсловияПоУслугамСрезПоследних.ЕжемесячаяПлата КАК ЕжемесячаяПлата
			|ИЗ
			|	РегистрСведений.УсловияПоУслугам.СрезПоследних(&МоментВремени, Услуга В (&СпособДоставки, &МетодОплаты)) КАК УсловияПоУслугамСрезПоследних";
			
			Запрос.УстановитьПараметр("МоментВремени", ДатаНаСайте);
			Запрос.УстановитьПараметр("СпособДоставки", СпособДоставки);
			Запрос.УстановитьПараметр("МетодОплаты", МетодОплаты);		
			ВыборкаУсловия = Запрос.Выполнить().Выбрать();
			
			// 3. Добавить движения
			Пока ВыборкаУсловия.Следующий() Цикл
				
				Если ТипЗнч(ВыборкаУсловия.Услуга) = Тип("СправочникСсылка.СпособыДоставки") Тогда 
					
					//Расчитать сумму затрат от способа доставки
					РасходДоставка = СтоимостьДоставки / 100 * ВыборкаУсловия.Процент;
					Если РасходДоставка < ВыборкаУсловия.МинимальнаяСумма Тогда //Не менее минималки
						РасходДоставка = ВыборкаУсловия.МинимальнаяСумма;					
					КонецЕсли;
					
					РасходДоставка = РасходДоставка / тзТовары.Количество(); //Разделить между товарами
					
					Если РасходДоставка <> 0 Тогда //Если есть затраты, то записывать
						
						Для Каждого Строка ИЗ тзТовары Цикл 
						
							Движение = Движения.РасходыНаУслуги.Добавить();
							Движение.Период = Дата;					
							Движение.Услуга = ВыборкаУсловия.Услуга;
							Движение.Номенклатура = Строка.Номенклатура;
							Движение.Сумма = РасходДоставка;
						
						КонецЦикла;
						
					КонецЕсли;				
					
				ИначеЕсли  ТипЗнч(ВыборкаУсловия.Услуга) = Тип("СправочникСсылка.МетодыОплаты") Тогда 
					
					//Расчитать сумму затрат от метода оплаты
					РасходОплата = (СтоимостьДоставки + СуммаДокумента) / 100 * ВыборкаУсловия.Процент; //Считается от суммы + сумма доставки
					Если РасходОплата < ВыборкаУсловия.МинимальнаяСумма Тогда //Не менее минималки
						РасходОплата = ВыборкаУсловия.МинимальнаяСумма;					
					КонецЕсли;
					
					РасходОплата = РасходОплата / тзТовары.Количество(); //Разделить между товарами
					
					Если РасходОплата <> 0 Тогда //Если есть затраты, то записывать
						
						Для Каждого Строка ИЗ тзТовары Цикл
							
							Движение = Движения.РасходыНаУслуги.Добавить();
							Движение.Период = Дата;
							Движение.Услуга = ВыборкаУсловия.Услуга;
							Движение.Сумма = РасходОплата;
							Движение.Номенклатура = Строка.Номенклатура;						
						
						КонецЦикла;
						
					КонецЕсли;
					
					
				КонецЕсли;
				
			КонецЦикла;			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидЗаказа = Перечисления.ВидыЗаказовПокупателей.Оптовый И (Статус.Код = "000000006" Или Статус.Код = "000000011") Тогда	//Выполнен или Заказ оплачен и  ждет отправки
		Движение = Движения.Взаиморасчеты.ДобавитьПриход();
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Сделка = Ссылка;
		Движение.Сумма = СуммаДокумента; 		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		
		Если ДополнительныеСвойства.Свойство("РассчитатьПрибыль") Тогда
			РассчитатьПрибыль();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Статус = Справочники.СтатусыЗаказов.Новый;//ПовторноеИспользованиеСервер.СтатусНового();
	КонецЕсли;
	
	//Если изменился статус то дату актуализировать
	Если Статус <> Ссылка.Статус Тогда 
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Склад) И Статус.ТоварСписывается И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "Склад"; 
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Текст = "Не указан склад!";
		Сообщение.Сообщить();
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Сумма")
		+ Упаковка.Итог("Сумма")
		+ Услуги.Итог("Сумма") 
		- СкидкаВсего
		//+ ?(СтоимостьДоставкиССайта <> 0, СтоимостьДоставкиССайта, СтоимостьДоставки); //думал если с сайта нет то брать фактическую и изменять сумму дока, но этого не надо
		+ СтоимостьДоставкиССайта;
				
	РассчитатьПрибыль();  
	
КонецПроцедуры

Процедура РассчитатьПрибыль()
	тз = ПолучитьТЗСебестоимость(); 
	ПрибыльСЗаказа = тз.Итог("ПрибыльСИзделия") + СтоимостьДоставкиССайта;
	ПрибыльСЗаказаСУчетомДоставки = тз.Итог("ПрибыльСИзделия") - СтоимостьДоставки + СтоимостьДоставкиССайта;  	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Отказ Тогда
		Возврат;                                              
	КонецЕсли;
	
	Если НЕ ОбменДанными.Загрузка Тогда		
		
		Если ЗначениеЗаполнено(IDНаСайте) Тогда //ЮРР 17.04.2017 20:53:02 Выгружать только изменения по заказам, загруженным с сайта			
			
			Выб = ПланыОбмена.ОбменССайтом.Выбрать(); //ЮРР 04.04.2017 20:11:56 Использование другого ПО
			Пока Выб.Следующий() Цикл
				
				Если Выб.ЭтотУзел Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выб.ПометкаУдаления
					ИЛИ НЕ Выб.Активен 
					ИЛИ НЕ Выб.ВыгружатьЗаказы Тогда
					Продолжить;
				КонецЕсли;
				
				//Заказ
				ПланыОбмена.ЗарегистрироватьИзменения(Выб.Ссылка,Ссылка);
				
				//Остатки
				Набор = РегистрыНакопления.Запасы.СоздатьНаборЗаписей();
				Набор.Отбор.Регистратор.Значение = Ссылка;
				ПланыОбмена.ЗарегистрироватьИзменения(Выб.Ссылка, Набор);			
				
			КонецЦикла;
			
		КонецЕсли;
		
		//Если Статус.ТоварСписывается ИЛИ НЕ Статус.ТоварРезервируется Тогда //если надо списывать или не надо резервировать
		//	Документы.ЗаказПокупателя.СнятьтоварСРезерва(ЭтотОбъект);
		//КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Префикс = ?(ВидЗаказа = Перечисления.ВидыЗаказовПокупателей.Оптовый,"ОПТ","РЗН");
	
КонецПроцедуры

Функция ПечатьСчетаНаОплату() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПФ_MXL_СчетНаОплату");
	
	Область = Макет.ПолучитьОбласть("ЗаголовокСчета");
	ТабДок.Вывести(Область);
	
	//СведенияОПолучателе = СведенияОЮрФизЛице();
	СведенияОПолучателе = СведенияОбОтправителе(Контрагент); 
	Область = Макет.ПолучитьОбласть("ОбразецЗаполненияПП");
	Если СведенияОПолучателе <> Неопределено Тогда
		Область.Параметры.Заполнить(СведенияОПолучателе);
	КонецЕсли;
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.ТекстЗаголовка = Ссылка;
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Поставщик");
	Если СведенияОПолучателе <> Неопределено Тогда
		Область.Параметры.ПредставлениеПоставщика = СведенияОПолучателе.Представление;
	КонецЕсли;
	
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Покупатель");
	Область.Параметры.ПредставлениеПолучателя = ?(ПустаяСтрока(Контрагент.НаименованиеПолное),Контрагент.Наименование,Контрагент.НаименованиеПолное);
	ТабДок.Вывести(Область);  
	
	ЕстьСкидки = СуммаСкидки<>0 ИЛИ Товары.Итог("СуммаСкидки") <> 0;
	
	Область = Макет.ПолучитьОбласть(?(ЕстьСкидки,"ШапкаТаблицыСоСкидкой","ШапкаТаблицы"));
	Если ЕстьСкидки Тогда 
		Область.Параметры.Скидка = "Скидка";
		Область.Параметры.СуммаБезСкидки = "Сумма без скидки";
	КонецЕсли;
	Область.Параметры.ИмяКолонкиКодов = "Артикул";
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть(?(ЕстьСкидки,"СтрокаТаблицыСоСкидкой","СтрокаТаблицы"));
	Наименований = Новый Соответствие;
	СуммаИтоговая = 0;
	Для Каждого Стр Из Товары Цикл
		Область.Параметры.НомерСтроки = Стр.НомерСтроки;
		Область.Параметры.Артикул = Стр.Номенклатура.Артикул;
		Область.Параметры.Товар = Стр.Номенклатура.Наименование;
		Область.Параметры.Количество = Стр.Количество;
		Область.Параметры.ЕдиницаИзмерения = Стр.ЕдиницаИзмерения.Наименование;
		Область.Параметры.Цена = ?(Стр.Количество <> 0, Формат(Стр.СуммаСоСкидкой / Стр.Количество, "ЧЦ=15; ЧДЦ=2"), 0);
		Область.Параметры.Сумма = Стр.СуммаСоСкидкой;
		Если ЕстьСкидки Тогда 
			Область.Параметры.СуммаСкидки = Стр.СуммаСкидки;
			Область.Параметры.СуммаБезСкидки = Стр.Сумма+Стр.СуммаСкидки;
		КонецЕсли;
		ТабДок.Вывести(Область); 
		Наименований.Вставить(Стр.Номенклатура, Истина);
		СуммаИтоговая = СуммаИтоговая + Область.Параметры.Сумма;
	КонецЦикла;   
	
	Область = Макет.ПолучитьОбласть("ПодвалТаблицы");
	Область.Параметры.Всего = СуммаИтоговая;
	ТабДок.Вывести(Область);     
	
	Область = Макет.ПолучитьОбласть("СуммаПрописью");
	Область.Параметры.ИтоговаяСтрока = "Всего наименований "+Наименований.Количество()+", в количестве "+Товары.Итог("Количество")+", на сумму "+Формат(СуммаИтоговая,"ЧЦ=15; ЧДЦ=2")+"руб."; 	
	Область.Параметры.СуммаПрописью = ЧислоПрописью(СуммаИтоговая, "Л=ru_RU;ДП=Ложь", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	ТабДок.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ПодвалСчета");
	ТабДок.Вывести(Область);      
	
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_СчетНаОплату";
	ТабДок.КлючПараметровПечати = "ПараметрыПечати_СчетНаОплату";
	
	Возврат ТабДок;	
	
КонецФункции

Функция СведенияОЮрФизЛице(Знач ЮрФизЛицо = Неопределено)
	
	СведенияОЮрФизЛице = Новый Структура("ИНН,КПП,Представление,БИКБанка,НомерСчета,Банк,КоррСчет,КодПоОКПО,ОГРН,ЮрАдрес,ФактАдрес,Телефоны");	
	
	Если ЮрФизЛицо = Неопределено Тогда
		ЮрФизЛицо = Константы.НашаОрганизация.Получить();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(Организации.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА Организации.Наименование
		|		ИНАЧЕ Организации.НаименованиеПолное
		|	КОНЕЦ КАК Представление,
		|	Организации.ОсновнойБанковскийСчет.Банк.Код КАК БИКБанка,
		|	Организации.ОсновнойБанковскийСчет.НомерСчета КАК НомерСчета,
		|	Организации.ОсновнойБанковскийСчет.Банк.Наименование КАК Банк,
		|	Организации.ОсновнойБанковскийСчет.Банк.КоррСчет КАК КоррСчет,
		|	Организации.КодПоОКПО КАК КодПоОКПО,
		|	Организации.ОГРН КАК ОГРН,
		|	ЮрАдрес.Представление КАК ЮрАдрес,
		|	Телефоны.Представление КАК Телефоны,
		|	Организации.СвидетельствоДатаВыдачи КАК СвидетельствоДатаВыдачи,
		|	Организации.СвидетельствоСерияНомер КАК СвидетельствоСерияНомер
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ЮрАдрес
		|		ПО Организации.Ссылка = ЮрАдрес.Ссылка
		|			И (ЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЮридический))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК Телефоны
		|		ПО Организации.Ссылка = Телефоны.Ссылка
		|			И (Телефоны.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";   
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(Контрагенты.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА Контрагенты.Наименование
		|		ИНАЧЕ Контрагенты.НаименованиеПолное
		|	КОНЕЦ КАК Представление,
		|	Контрагенты.ОсновнойБанковскийСчет.Банк.Наименование КАК Банк,
		|	Контрагенты.ОсновнойБанковскийСчет.Банк.КоррСчет КАК КоррСчет,
		|	Контрагенты.ОсновнойБанковскийСчет.НомерСчета КАК НомерСчета,
		|	Контрагенты.ОсновнойБанковскийСчет.Банк.Код КАК БИКБанка,
		|	Контрагенты.РегистрационныйНомер КАК ОГРН,
		|	ЮрАдрес.Представление КАК ЮрАдрес,
		|	ФактАдрес.Представление КАК ФактАдрес,
		|	Телефоны.Представление КАК Телефоны,
		|	Контрагенты.СвидетельствоДатаВыдачи КАК СвидетельствоДатаВыдачи,
		|	Контрагенты.СвидетельствоСерияНомер КАК СвидетельствоСерияНомер
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ЮрАдрес
		|		ПО Контрагенты.Ссылка = ЮрАдрес.Ссылка
		|			И (ЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЮридический))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ФактАдрес
		|		ПО Контрагенты.Ссылка = ФактАдрес.Ссылка
		|			И (ФактАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК Телефоны
		|		ПО Контрагенты.Ссылка = Телефоны.Ссылка
		|			И (Телефоны.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка",ЮрФизЛицо);
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда  		
		Выб = Рез.Выбрать();
		Если Выб.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(СведенияОЮрФизЛице,Выб);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СведенияОЮрФизЛице;
	
КонецФункции

Функция ПечатьТОРГ12() Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ПФ_MXL_ТОРГ12");
	
	//В зависимости от того, кто указан в поле отправитель у контрагента автоматически заполнять поля грузоотправитель и поставщик в ТОРГ12 и поля ИНН, КПП, сч№, название банка и отправитель.
	//Т.е. у поля отправитель есть два варианта: Уваров и Захаров. Мы их завели как контрагентов в 1с. Нужно их данные подставлять в ТОРГ12 и счет.
	СведенияОПолучателе = "";
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыДополнительныеРеквизиты.Значение КАК Значение
		|ПОМЕСТИТЬ втОтправитель
		|ИЗ
		|	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		|ГДЕ
		|	КонтрагентыДополнительныеРеквизиты.Ссылка = &Контрагент
		|	И КонтрагентыДополнительныеРеквизиты.Свойство = &Отправитель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент
		|	И КонтрагентыКонтактнаяИнформация.Тип = &КИОтправитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОтправитель КАК втОтправитель
		|		ПО Контрагенты.Наименование = втОтправитель.Значение";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Отправитель", ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду("000000026"));	//Отправитель
	Запрос.УстановитьПараметр("КИОтправитель", Перечисления.ТипыКонтактнойИнформации.Отправитель);	//Отправитель
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КОтправитель = ВыборкаДетальныеЗаписи.Контрагент;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КОтправитель) Тогда
		СведенияОПолучателе = СведенияОЮрФизЛице(КОтправитель);
	КонецЕсли;
	
	
	
	ОписаниеПолучателя = ОписаниеЮрФизЛица(СведенияОПолучателе); 
	СведенияОКонтрагенте = СведенияОЮрФизЛице(Контрагент);
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.ПредставлениеОрганизации = ОписаниеПолучателя; 
	Область.Параметры.ПредставлениеПлательщика = ОписаниеЮрФизЛица(СведенияОКонтрагенте);
	Область.Параметры.ПредставлениеПоставщика = ОписаниеПолучателя; 
	Область.Параметры.НомерДокумента = Номер;
	Область.Параметры.ДатаДокумента = Дата;
	ТабДок.Вывести(Область);	
	
	Область = Макет.ПолучитьОбласть("ЗаголовокТаб");
	ТабДок.Вывести(Область);
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	ИтогоКоличество = 0;
	ИтогоСуммаБезНДС = 0;
	ИтогоСуммаНДС = 0;
	ИтогоСуммаСНДС = 0;
	
	Для Каждого Стр Из Товары Цикл
		
		ОбластьСтрока.Параметры.НомерСтроки = Стр.НомерСтроки;
		ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = "" + Стр.Номенклатура + " (" + Стр.Номенклатура.Артикул + ")" ; //Добавить к названиям артикулы изделий
		ОбластьСтрока.Параметры.ЕдиницаИзмеренияНаименование = Стр.ЕдиницаИзмерения.Наименование;
		ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = Стр.ЕдиницаИзмерения.Код;						
		
		ОбластьСтрока.Параметры.Количество = Стр.Количество;
		ИтогоКоличество = ИтогоКоличество + Стр.Количество;
		
		//ОбластьСтрока.Параметры.Цена = Стр.Цена; //Выводить цены со скидками
		ОбластьСтрока.Параметры.Цена = ?(Стр.Количество <> 0, Стр.СуммаСоСкидкой / Стр.Количество, 0);
		
		ОбластьСтрока.Параметры.СуммаБезНДС = Стр.СуммаСоСкидкой;
		ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + Стр.СуммаСоСкидкой;
		
		//ОбластьСтрока.Параметры.СтавкаНДС = 18;	//убрать из торга НДС		
		ОбластьСтрока.Параметры.СтавкаНДС = 0;		
		
		ОбластьСтрока.Параметры.СуммаНДС = Окр(Стр.СуммаСоСкидкой / 100 * ОбластьСтрока.Параметры.СтавкаНДС, 2);
		ИтогоСуммаНДС = ИтогоСуммаНДС + Окр(Стр.СуммаСоСкидкой / 100 * ОбластьСтрока.Параметры.СтавкаНДС, 2);
		
		ОбластьСтрока.Параметры.СуммаСНДС = Стр.СуммаСоСкидкой + Окр(Стр.СуммаСоСкидкой / 100 * ОбластьСтрока.Параметры.СтавкаНДС, 2);
		ИтогоСуммаСНДС = ИтогоСуммаСНДС + Стр.СуммаСоСкидкой + Окр(Стр.СуммаСоСкидкой / 100 * ОбластьСтрока.Параметры.СтавкаНДС, 2);
		
		ТабДок.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьВсего = Макет.ПолучитьОбласть("Всего");
	ОбластьВсего.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьВсего.Параметры.ИтогоСуммаБезНДС = ИтогоСуммаБезНДС;
	ОбластьВсего.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	ОбластьВсего.Параметры.ИтогоСуммаСНДС = ИтогоСуммаСНДС;
	ТабДок.Вывести(ОбластьВсего);	
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.ДатаДокументаФормат = Формат(Дата, "ДЛФ=DD");
	ТабДок.Вывести(ОбластьПодвал);
		
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ИмяПараметровПечати = "ПараметрыПечати_ТОРГ12";
	ТабДок.КлючПараметровПечати = "ПараметрыПечати_ТОРГ12";
	
	Возврат ТабДок;	
	
КонецФункции

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значенийми параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организаиии
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеЮрФизЛица(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт
	
	Если ПустаяСтрока(Список) Тогда
		Список = "Представление,ИНН,ЮрАдрес,Телефоны,НомерСчета,Банк,БИКБанка,КоррСчет";
	КонецЕсли;
	
	Результат = "";
	
	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("Представление", " ");
	СоответствиеПараметров.Вставить("ИНН",                " ИНН ");
	СоответствиеПараметров.Вставить("КПП",                " КПП ");
	СоответствиеПараметров.Вставить("СвидетельствоСерияНомер",			" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",	" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   " ");
	СоответствиеПараметров.Вставить("Телефоны",           " тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",         " р/с ");
	СоответствиеПараметров.Вставить("Банк",               " в банке ");
	СоответствиеПараметров.Вставить("БИКБанка",                " БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           " к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          " Код по ОКПО ");
	
	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");
	
	Для Счетчик = 1 по ЧислоПараметров Цикл
		
		ПозЗапятой = Найти(Список, ",");
		
		Если ПозЗапятой > 0  Тогда
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
			
			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);
				
				Если ПустаяСтрока(СтрокаДополнения) И ИмяПараметра = "ЮрАдрес" Тогда
					СписокСведений.Свойство("ФактАдрес", СтрокаДополнения); 
				КонецЕсли; 
				
				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;
				
				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 
				
				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				//#Если Клиент Тогда
				//	Сообщить("Не удалось определить значение параметра организации: " + ИмяПараметра, СтатусСообщения.Внимание);
				//#КонецЕсли
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СокрЛП(Результат);
	
КонецФункции // ОписаниеОрганизации()


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваров") Тогда
		// Заполнение шапки
		Автор = ДанныеЗаполнения.Автор;
		Комментарий = ДанныеЗаполнения.Комментарий;
		Склад = ДанныеЗаполнения.Склад;
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
		ВидЗаказа = Перечисления.ВидыЗаказовПокупателей.Розничный;
		Статус = Справочники.СтатусыЗаказов.Новый;
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
			НоваяСтрока.Сумма = ТекСтрокаТовары.Сумма;
			НоваяСтрока.СуммаСоСкидкой = ТекСтрокаТовары.Сумма;
			НоваяСтрока.Цена = ТекСтрокаТовары.Цена;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТЗСебестоимость() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(тзТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	тзТовары.Количество КАК Количество,
	|	тзТовары.Сумма КАК Сумма,
	|	тзТовары.СуммаСоСкидкой КАК СуммаСоСкидкой
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&тзТовары КАК тзТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьТоваров.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА СУММА(СебестоимостьТоваров.Количество) <> 0
	|			ТОГДА СУММА(СебестоимостьТоваров.Сумма) / СУММА(СебестоимостьТоваров.Количество)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Себестоимость
	|ПОМЕСТИТЬ втСебестоимость
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Регистратор = &РегистраторЗаказПокупателя
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваров.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
	|	СРЕДНЕЕ(ЦеныЗакупкиСрезПоследних.Цена) КАК ЦенаЗакупки
	|ПОМЕСТИТЬ втЦенаЗакупки
	|ИЗ
	|	РегистрСведений.ЦеныЗакупки.СрезПоследних(
	|			&ДатаЗаказа,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					втТовары.Номенклатура КАК Номенклатура
	|				ИЗ
	|					втТовары КАК втТовары)) КАК ЦеныЗакупкиСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ЦеныЗакупкиСрезПоследних.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Номенклатура.Артикул КАК Артикул,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Количество КАК Количество,
	|	втТовары.Сумма КАК Сумма,
	|	втТовары.СуммаСоСкидкой КАК СуммаСоСкидкой,
	|	ВЫБОР
	|		КОГДА втТовары.Количество <> 0
	|			ТОГДА втТовары.СуммаСоСкидкой / втТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаПродажи,
	|	ЕСТЬNULL(втСебестоимость.Себестоимость, ЕСТЬNULL(втЦенаЗакупки.ЦенаЗакупки, 0)) КАК Себестоимость,
	|	ЕСТЬNULL(втЦенаЗакупки.ЦенаЗакупки, 0) КАК ЦенаЗакупки,
	|	(ВЫБОР
	|		КОГДА втТовары.Количество <> 0
	|			ТОГДА втТовары.СуммаСоСкидкой / втТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ - ЕСТЬNULL(втСебестоимость.Себестоимость, ЕСТЬNULL(втЦенаЗакупки.ЦенаЗакупки, 0))) * втТовары.Количество КАК ПрибыльСИзделия
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСебестоимость КАК втСебестоимость
	|		ПО втТовары.Номенклатура = втСебестоимость.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦенаЗакупки КАК втЦенаЗакупки
	|		ПО втТовары.Номенклатура = втЦенаЗакупки.Номенклатура";
	
	Запрос.УстановитьПараметр("тзТовары", Товары.Выгрузить(, "Номенклатура, Количество, Сумма, СуммаСоСкидкой"));	
	Запрос.УстановитьПараметр("РегистраторЗаказПокупателя", Ссылка);
	Запрос.УстановитьПараметр("ДатаЗаказа", Дата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СведенияОбОтправителе(Знач Покупатель) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыДополнительныеРеквизиты.Значение КАК Значение
		|ПОМЕСТИТЬ втОтправитель
		|ИЗ
		|	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
		|ГДЕ
		|	КонтрагентыДополнительныеРеквизиты.Ссылка = &Контрагент
		|	И КонтрагентыДополнительныеРеквизиты.Свойство = &Отправитель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Ссылка = &Контрагент
		|	И КонтрагентыКонтактнаяИнформация.Тип = &КИОтправитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОтправитель КАК втОтправитель
		|		ПО Контрагенты.Наименование = втОтправитель.Значение";
	
	Запрос.УстановитьПараметр("Контрагент", Покупатель);
	Запрос.УстановитьПараметр("Отправитель", ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду("000000026"));	//Отправитель
	Запрос.УстановитьПараметр("КИОтправитель", Перечисления.ТипыКонтактнойИнформации.Отправитель);	//Отправитель
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 	
		Если ВыборкаДетальныеЗаписи.Следующий()  Тогда
			СведенияОбОтправителе = СведенияОЮрФизЛице(ВыборкаДетальныеЗаписи.Контрагент);
			Возврат СведенияОбОтправителе; 
		КонецЕсли; 
	КонецЕсли;
		
КонецФункции