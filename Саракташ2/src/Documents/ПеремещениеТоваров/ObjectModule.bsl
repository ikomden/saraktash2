
Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр ТоварыНаСкладах Расход
	Движения.Запасы.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл   		
		Движение = Движения.Запасы.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;		
		Движение.Склад = СкладОтправитель;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;

	// регистр ТоварыНаСкладах Приход
	Движения.Запасы.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.Запасы.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.Номенклатура = ?(ЗначениеЗаполнено(ТекСтрокаТовары.НовыйАртикул)
		, ТекСтрокаТовары.НовыйАртикул
		, ТекСтрокаТовары.Номенклатура); 		
		Движение.Склад = ?(ЗначениеЗаполнено(ТекСтрокаТовары.СкладПолучатель)
		, ТекСтрокаТовары.СкладПолучатель
		, СкладПолучатель);
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	
	УчетСебестоимости.УчестьСебестоимость(ЭтотОбъект,Режим,Отказ);
	
	Движения.ЗапасыПоСерийнымНомерам.Записывать = Истина;  
	Если СкладОтправитель = Справочники.Склады.Саракташ Тогда
							
		Для Каждого СтрокаТовар Из Товары Цикл
									
			Движение = Движения.ЗапасыПоСерийнымНомерам.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.СерийныйНомер = СтрокаТовар.СерийныйНомер;   		
			Движение.Склад = СкладОтправитель;
			Движение.Количество = СтрокаТовар.Количество;
			
			Движение = Движения.ЗапасыПоСерийнымНомерам.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.СерийныйНомер = СтрокаТовар.СерийныйНомер;   		
			Движение.Склад = ?(ЗначениеЗаполнено(СтрокаТовар.СкладПолучатель)
			, СтрокаТовар.СкладПолучатель
			, СкладПолучатель);;
			Движение.Количество = СтрокаТовар.Количество;
			
			Если ЗначениеЗаполнено(СтрокаТовар.НовыйАртикул) 
				И СтрокаТовар.СерийныйНомер.Владелец <> СтрокаТовар.НовыйАртикул Тогда
				СерийныйНомерОбъект = СтрокаТовар.СерийныйНомер.ПолучитьОбъект();
				СерийныйНомерОбъект.Владелец = СтрокаТовар.НовыйАртикул;
				СерийныйНомерОбъект.ОбменДанными.Загрузка = Истина;
				СерийныйНомерОбъект.Записать();
			КонецЕсли;
			
			Набор = РегистрыСведений.ДанныеСерийныхНомеров.СоздатьНаборЗаписей();
			Набор.Отбор.СерийныйНомер.Установить(СтрокаТовар.СерийныйНомер);
			Набор.Прочитать();
			Если Набор.Количество() И Набор[0].ВязальщицаНаСайте <> СтрокаТовар.ВязальщицаНаСайте Тогда
				Набор[0].ВязальщицаНаСайте = СтрокаТовар.ВязальщицаНаСайте;
				Набор.Записать();	
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;  
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		// Заполнение шапки
		СкладПолучатель = ДанныеЗаполнения.Склад;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		
		Если СкладПолучатель.Код = "000000002" Тогда //Оптовый
			СкладОтправитель = Справочники.Склады.НайтиПоКоду("000000001");
		Иначе
			СкладОтправитель = Справочники.Склады.НайтиПоКоду("000000002");
		КонецЕсли;
		
		Для Каждого ТекСтрокаТовары Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаТовары.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрокаТовары.Количество;
			НоваяСтрока.Номенклатура = ТекСтрокаТовары.Номенклатура;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СкладПолучатель) Тогда
		СкладПолучатель = Константы.ОсновнойСклад.Получить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СкладПоУмолчанию = Константы.ОсновнойСклад.Получить();
	СкладБрак = Константы.СкладБрак.Получить();
	СкладОптовый = Константы.ОптовыйСклад.Получить();
	
	Если Не ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
		ВызватьИсключение "В настройках программы не задан основной склад";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СкладБрак) Тогда
		ВызватьИсключение "В настройках программы не задан склад брака";
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СкладОптовый) Тогда
		ВызватьИсключение "В настройках программы не задан оптовый склад";
	КонецЕсли;   
	
	Для Каждого СтрокаТовар Из Товары Цикл
		
		СтрокаТовар.СкладПолучатель = СкладПоУмолчанию;
		Если СтрокаТовар.РезультатПриемки = Справочники.РезультатыПриемки.Брак Тогда
			СтрокаТовар.СкладПолучатель = СкладБрак;
		ИначеЕсли СтрокаТовар.РезультатПриемки = Справочники.РезультатыПриемки.Опт Тогда
			 СтрокаТовар.СкладПолучатель = СкладОптовый;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
