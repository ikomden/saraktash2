&НаКлиенте
Перем мсВЗаказ;

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДополнительныйРеквизитЦвет = ПолучитьДополнительныеРеквизитыПоКоду("000000002");
	ДополнительныйРеквизитРазмер = ПолучитьДополнительныеРеквизитыПоКоду("000000001");
	ДополнительныйРеквизитПроизводство = ПолучитьДополнительныеРеквизитыПоКоду("000000003");
	ДополнительныйРеквизитСостав = ПолучитьДополнительныеРеквизитыПоКоду("000000004");
	
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("СвойствоЦвет",ДополнительныйРеквизитЦвет);
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("СвойствоРазмер",ДополнительныйРеквизитРазмер);
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("СвойствоПроизводство",ДополнительныйРеквизитПроизводство);
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("СвойствоСостав",ДополнительныйРеквизитСостав);
	
	мсВЗаказ = Новый Массив;
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("мсВЗаказ", мсВЗаказ);
	
	Элементы.ВозможныйЗаказ.Видимость = Ложь;
	
	//Заполнить списки выбора
	//Цвет
	Элементы.ОтборЦвет.СписокВыбора.Очистить();
	Элементы.ОтборЦвет.СписокВыбора.ЗагрузитьЗначения(ПолучитьВариантыДопРеквизитов(ДополнительныйРеквизитЦвет)); //Цвет
	
	//Размер
	Элементы.ОтборРазмер.СписокВыбора.Очистить();
	Элементы.ОтборРазмер.СписокВыбора.ЗагрузитьЗначения(ПолучитьВариантыДопРеквизитов(ДополнительныйРеквизитРазмер)); //Размер
	
	//Производство
	Элементы.ОтборПроизводство.СписокВыбора.Очистить();
	Элементы.ОтборПроизводство.СписокВыбора.ЗагрузитьЗначения(ПолучитьВариантыДопРеквизитов(ДополнительныйРеквизитПроизводство)); //Производство
	
	//Состав
	Элементы.ОтборСостав.СписокВыбора.Очистить();
	Элементы.ОтборСостав.СписокВыбора.ЗагрузитьЗначения(ПолучитьВариантыДопРеквизитов(ДополнительныйРеквизитСостав)); //Производство
	
	//Отбор диапазон цены
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("ОтборЦенаМинимум",ОтборЦенаМинимум);
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("ОтборЦенаМаксимум",ОтборЦенаМаксимум);	
	
	
КонецПроцедуры

//Получение данных на сервере{
Функция ПолучитьДополнительныеРеквизитыПоКоду(Код)
	Возврат ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду(Код);	
КонецФункции

Функция ПолучитьВариантыДопРеквизитов(ДополнительныйРеквизит)
	
	мсВариантыЗначений = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеЗначенияРеквизитов.Ссылка КАК ВариантЗначения,
	|	ДополнительныеЗначенияРеквизитов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ДополнительныеЗначенияРеквизитов КАК ДополнительныеЗначенияРеквизитов
	|ГДЕ
	|	ДополнительныеЗначенияРеквизитов.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ";	
	Запрос.УстановитьПараметр("Владелец", ДополнительныйРеквизит);	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		мсВариантыЗначений.Добавить(Выборка.ВариантЗначения);		
	КонецЦикла;
	
	Возврат мсВариантыЗначений;
	
КонецФункции

//}Получение данных на сервере

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВЗаказ" Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		нСтрока = мсВЗаказ.Найти(ВыбраннаяСтрока);
		Если нСтрока = Неопределено Тогда 
			мсВЗаказ.Добавить(ВыбраннаяСтрока);			
		Иначе
			мсВЗаказ.Удалить(нСтрока);
		КонецЕсли;	
		
		СписокТоваров.Параметры.УстановитьЗначениеПараметра("мсВЗаказ", мсВЗаказ);
		
		Элементы.ВозможныйЗаказ.Видимость = мсВЗаказ.Количество() <> 0;
		
		ЗаполнитьВозможныйЗаказ(мсВЗаказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаказНажатие(Элемент)
	Элементы.ВозможныйЗаказ.Видимость = НЕ Элементы.ВозможныйЗаказ.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВозможныйЗаказ(мсВЗаказ)
	
	ВозможныйЗаказ.Очистить();
	
	Для Каждого Номенклатура ИЗ мсВЗаказ Цикл 
		
		нСтрока = ВозможныйЗаказ.Добавить();
		
		нСтрока.Номенклатура = Номенклатура;
		нСтрока.Количество = 1;
		
		РасчитатьДанныеПоСтроке(нСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьДанныеПоСтроке(Строка)
	
	Если Строка = Неопределено Тогда 
		Возврат;		
	КонецЕсли;
	
	//Цена
	Строка.Цена = ПолучитьЦенуНоменклатуры(Строка.Номенклатура);
	
	//Сумма
	Строка.Сумма = Строка.Количество * Строка.Цена;
	
	//Обновление подвала
	Элементы.ВозможныйЗаказ.ПодчиненныеЭлементы.ТаблицаЗаказКоличество.ТекстПодвала = ВозможныйЗаказ.Итог("Количество");
	Элементы.ВозможныйЗаказ.ПодчиненныеЭлементы.ТаблицаЗаказСумма.ТекстПодвала = Формат(ВозможныйЗаказ.Итог("Сумма"),"ЧДЦ=2");
	
КонецПроцедуры

Функция ПолучитьЦенуНоменклатуры(Номенклатура) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура = &Номенклатура) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();	 
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Цена;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ВозможныйЗаказПриИзменении(Элемент)

	мсВЗаказ = Новый Массив;
	Для Каждого Строка Из ВозможныйЗаказ Цикл
		мсВЗаказ.Добавить(Строка.Номенклатура);		
	КонецЦикла;	
	
	РасчитатьДанныеПоСтроке(Элемент.ТекущиеДанные);
	
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("мсВЗаказ", мсВЗаказ);
	
КонецПроцедуры

//Отборы{

Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, СписокТоваров, ИмяПоляОтбораСписка);	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, СписокТоваров, МеткаИД);

КонецПроцедуры

//Цвет
&НаКлиенте
Процедура ОтборЦветОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ЗначениеЦвет", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

//Категория
&НаКлиенте
Процедура ОтборКатегорияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Категория", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

//Размер
&НаКлиенте
Процедура ОтборРазмерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ЗначениеРазмер", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

//Производство
&НаКлиенте
Процедура ОтборПроизводствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ЗначениеПроизводство", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

//Состав
&НаКлиенте
Процедура ОтборСоставОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ЗначениеСостав", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

//Цена
&НаКлиенте
Процедура ОтборЦенаПриИзменении(Элемент)
	
	//Установить отбор
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("ОтборЦенаМинимум",ОтборЦенаМинимум);
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("ОтборЦенаМаксимум",ОтборЦенаМаксимум);
	
	//Отобразить метку	
	МеткаЦенаЗаголовок = РаботаСОтборами.ФорматированнаяСтрокаПредставленияМетки(
		"" + ?(ЗначениеЗаполнено(ОтборЦенаМинимум), "от " + ОтборЦенаМинимум + " ", "") + ?(ЗначениеЗаполнено(ОтборЦенаМаксимум), "до " + ОтборЦенаМаксимум, ""), 
		"Метка_Цена");	
	
	Элементы.МеткаЦенаЗаголовок.Заголовок = МеткаЦенаЗаголовок;
	ОтборЦенаПриИзмененииСервер();	
	Элементы.ГруппаМеткаЦена.Видимость = Истина;	
	
КонецПроцедуры

Процедура ОтборЦенаПриИзмененииСервер()
	
	Элементы.МеткаЦенаЗаголовок.УстановитьДействие("ОбработкаНавигационнойСсылки", "МеткаЦенаЗакрыть");
	
КонецПроцедуры

&НаКлиенте
Процедура МеткаЦенаЗакрыть(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Сбросить отбор
	ОтборЦенаМинимум = 0;
	ОтборЦенаМаксимум = 0;
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("ОтборЦенаМинимум",ОтборЦенаМинимум);
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("ОтборЦенаМаксимум",ОтборЦенаМаксимум);
	
	//Скрыть метку
	Элементы.МеткаЦенаЗаголовок.Заголовок = "";
	Элементы.ГруппаМеткаЦена.Видимость = Ложь;
КонецПроцедуры

//}Отборы

//Формирование заказа{
&НаКлиенте
Процедура СформироватьЗаказ(Команда)
	
	Если ВозможныйЗаказ.Количество() = 0 Тогда 
		Сообщить("Нет товара для заказа.",СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Документ.ЗаказПокупателя.ФормаОбъекта");
    ДанныеЗаказа = Форма.Объект;
    ЗаполнитьЗаказСервер(ДанныеЗаказа);
    КопироватьДанныеФормы(ДанныеЗаказа, Форма.Объект);
    Форма.Открыть();
	
	//Сброс заказа
	ВозможныйЗаказ.Очистить();
	мсВЗаказ = Новый Массив;
	СписокТоваров.Параметры.УстановитьЗначениеПараметра("мсВЗаказ", мсВЗаказ);		
	Элементы.ВозможныйЗаказ.Видимость = мсВЗаказ.Количество() <> 0;
	
КонецПроцедуры

Процедура ЗаполнитьЗаказСервер(ДанныеЗаказа)
	
	//ДанныеЗаказа = Документы.ЗаказПокупателя.СоздатьДокумент();	
	ДанныеЗаказа.Дата = ТекущаяДата();
	ДанныеЗаказа.Автор = ПараметрыСеанса.ТекущийПользователь;
	ДанныеЗаказа.Статус = Справочники.СтатусыЗаказов.НайтиПоНаименованию("Новый");
	ДанныеЗаказа.ВидЗаказа = Перечисления.ВидыЗаказовПокупателей.Розничный;
	ДанныеЗаказа.Склад = Справочники.Склады.НайтиПоНаименованию("Основной");
	
	//ЗаполнитьТовары
	Для Каждого Строка Из ВозможныйЗаказ Цикл
		
		нСтрока = ДанныеЗаказа.Товары.Добавить();
		нСтрока.Номенклатура = Строка.Номенклатура;
		нСтрока.Количество = Строка.Количество;
		нСтрока.Цена = Строка.Цена;
		нСтрока.Сумма = Строка.Сумма;
		
	КонецЦикла;
	
КонецПроцедуры

//}Формирование заказа