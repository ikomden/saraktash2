Процедура ЗарегистрироватьВПО(пСсылка) Экспорт
	
	//ЮРР 06.04.2017 9:39:41 Зарегистрировать в ПО	
	Выб = ПланыОбмена.ОбменССайтом.Выбрать();
	Пока Выб.Следующий() Цикл
		
		Если Выб.ЭтотУзел Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выб.ПометкаУдаления
			ИЛИ НЕ Выб.Активен 
			ИЛИ НЕ Выб.ВыгружатьТовары Тогда
			Продолжить;
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(Выб.Ссылка,пСсылка);
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ГенерацияАртикула(СтруктураПараметров) Экспорт
	
	//СтруктураПараметров - фиксированная структура
	//СтруктураПараметров.ТипИзделия - Оптовая группа
	//СтруктураПараметров.ТипВязки
	//СтруктураПараметров.Цвет
	//СтруктураПараметров.Размер
	//СтруктураПараметров.Цена
	//СтруктураПараметров.ПриДобавлении - если генерируется артикул при добавлении, то приставку "Н" не добалять
	
	Артикул = "";
	
	Если СтруктураПараметров.Свойство("ТипИзделия") И ЗначениеЗаполнено(СтруктураПараметров.ТипИзделия) Тогда
		Артикул = Артикул + СтруктураПараметров.ТипИзделия.Артикул;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ТипВязки") И ЗначениеЗаполнено(СтруктураПараметров.ТипВязки) Тогда
		Артикул = Артикул + СтруктураПараметров.ТипВязки.Артикул;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Цвет") И ЗначениеЗаполнено(СтруктураПараметров.Цвет) Тогда
		Артикул = Артикул + СтруктураПараметров.Цвет.Артикул;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Размер") И ЗначениеЗаполнено(СтруктураПараметров.Размер) Тогда
		Артикул = Артикул + СтруктураПараметров.Размер.Артикул;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ПриДобавлении") И СтруктураПараметров.ПриДобавлении = Истина Тогда 
		
	Иначе
		
		//1 буква - "Н" ,если товар не попадает в заявленные оптовые категории \ "ничего нет", если попадает.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|	И Номенклатура.ОптовыйТовар
		|	И НЕ Номенклатура.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(ЦеныЗакупкиСрезПоследних.Цена) КАК Цена
		|ПОМЕСТИТЬ втЦена
		|ИЗ
		|	РегистрСведений.ЦеныЗакупки.СрезПоследних(
		|			,
		|			Номенклатура В
		|				(ВЫБРАТЬ
		|					втНоменклатура.Ссылка КАК Ссылка
		|				ИЗ
		|					втНоменклатура КАК втНоменклатура)) КАК ЦеныЗакупкиСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	ЦеныЗакупкиСрезПоследних.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНоменклатура.Ссылка КАК Ссылка,
		|	втЦена.Цена КАК Цена
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЦена КАК втЦена
		|		ПО втНоменклатура.Ссылка = втЦена.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|		ПО втНоменклатура.Ссылка = НоменклатураДополнительныеРеквизиты.Ссылка
		|			И (НоменклатураДополнительныеРеквизиты.Свойство = &ДиапазонЦеныЗакупки)
		|ГДЕ
		|	&Цена МЕЖДУ ЕСТЬNULL(втЦена.Цена, 0) - ЕСТЬNULL(ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Значение КАК ЧИСЛО(10, 0)), 0) И ЕСТЬNULL(втЦена.Цена, 0) + ЕСТЬNULL(ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Значение КАК ЧИСЛО(10, 0)), 0)";
		Запрос.УстановитьПараметр("Артикул", Артикул);
		Запрос.УстановитьПараметр("Цена", СтруктураПараметров.Цена);
		Запрос.УстановитьПараметр("ДиапазонЦеныЗакупки", ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоКоду("000000019"));	//Диапазон цены закупки
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда 
			
			Артикул = "Н" + Артикул;
			
			//цифра-код обозначающая стоимость закупа изделия (используется только если товар не попал в оптовые категории и перед артикулом стоит буква "Н")
			Если СтруктураПараметров.Свойство("Цена") И ЗначениеЗаполнено(СтруктураПараметров.Цена) Тогда
				
				ствЦена = Новый Соответствие;
				ствЦена.Вставить(10, 106);
				ствЦена.Вставить(20, 105);
				ствЦена.Вставить(30, 104);
				ствЦена.Вставить(40, 103);
				ствЦена.Вставить(50, 102);
				ствЦена.Вставить(60, 101);
				ствЦена.Вставить(70, 100);
				ствЦена.Вставить(80, 99);
				ствЦена.Вставить(90, 98);
				ствЦена.Вставить(100, 97);
				ствЦена.Вставить(110, 96);
				ствЦена.Вставить(120, 95);
				ствЦена.Вставить(130, 94);
				ствЦена.Вставить(140, 93);
				ствЦена.Вставить(150, 92);
				ствЦена.Вставить(160, 91);
				ствЦена.Вставить(170, 90);
				ствЦена.Вставить(180, 89);
				ствЦена.Вставить(190, 88);
				ствЦена.Вставить(200, 87);
				ствЦена.Вставить(250, 86);
				ствЦена.Вставить(300, 85);
				ствЦена.Вставить(350, 84);
				ствЦена.Вставить(400, 83);
				ствЦена.Вставить(450, 82);
				ствЦена.Вставить(500, 81);
				ствЦена.Вставить(550, 80);
				ствЦена.Вставить(600, 79);
				ствЦена.Вставить(650, 78);
				ствЦена.Вставить(700, 77);
				ствЦена.Вставить(750, 76);
				ствЦена.Вставить(800, 75);
				ствЦена.Вставить(850, 74);
				ствЦена.Вставить(900, 73);
				ствЦена.Вставить(950, 72);
				ствЦена.Вставить(1000, 71);
				ствЦена.Вставить(1100, 70);
				ствЦена.Вставить(1200, 69);
				ствЦена.Вставить(1300, 68);
				ствЦена.Вставить(1400, 67);
				ствЦена.Вставить(1500, 66);
				ствЦена.Вставить(1600, 65);
				ствЦена.Вставить(1700, 64);
				ствЦена.Вставить(1800, 63);
				ствЦена.Вставить(1900, 62);
				ствЦена.Вставить(2000, 61);
				ствЦена.Вставить(2100, 60);
				ствЦена.Вставить(2200, 59);
				ствЦена.Вставить(2300, 58);
				ствЦена.Вставить(2400, 57);
				ствЦена.Вставить(2500, 56);
				ствЦена.Вставить(2600, 55);
				ствЦена.Вставить(2700, 54);
				ствЦена.Вставить(2800, 53);
				ствЦена.Вставить(2900, 52);
				ствЦена.Вставить(3000, 51);
				ствЦена.Вставить(3100, 50);
				ствЦена.Вставить(3200, 49);
				ствЦена.Вставить(3300, 48);
				ствЦена.Вставить(3400, 47);
				ствЦена.Вставить(3500, 46);
				ствЦена.Вставить(3600, 45);
				ствЦена.Вставить(3700, 44);
				ствЦена.Вставить(3800, 43);
				ствЦена.Вставить(3900, 42);
				ствЦена.Вставить(4000, 41);
				ствЦена.Вставить(4100, 40);
				ствЦена.Вставить(4200, 39);
				ствЦена.Вставить(4300, 38);
				ствЦена.Вставить(4400, 37);
				ствЦена.Вставить(4500, 36);
				ствЦена.Вставить(4600, 35);
				ствЦена.Вставить(4700, 34);
				ствЦена.Вставить(4800, 33);
				ствЦена.Вставить(4900, 32);
				ствЦена.Вставить(5000, 31);
				ствЦена.Вставить(5500, 30);
				ствЦена.Вставить(6000, 29);
				ствЦена.Вставить(6500, 28);
				ствЦена.Вставить(7000, 27);
				ствЦена.Вставить(7500, 26);
				ствЦена.Вставить(8000, 25);
				ствЦена.Вставить(8500, 24);
				ствЦена.Вставить(9000, 23);
				ствЦена.Вставить(9500, 22);
				ствЦена.Вставить(10000, 21);
				ствЦена.Вставить(10500, 20);
				ствЦена.Вставить(11000, 19);
				ствЦена.Вставить(11500, 18);
				ствЦена.Вставить(12000, 17);
				ствЦена.Вставить(12500, 16);
				ствЦена.Вставить(13000, 15);
				ствЦена.Вставить(13500, 14);
				ствЦена.Вставить(14000, 13);
				ствЦена.Вставить(14500, 12);
				ствЦена.Вставить(15000, 11);
				ствЦена.Вставить(15500, 10);
				ствЦена.Вставить(16000, 9);
				ствЦена.Вставить(16500, 8);
				ствЦена.Вставить(17000, 7);
				ствЦена.Вставить(17500, 6);
				ствЦена.Вставить(18000, 5);
				ствЦена.Вставить(18500, 4);
				ствЦена.Вставить(19000, 3);
				ствЦена.Вставить(19500, 2);
				ствЦена.Вставить(20000, 1);
				
				Артикул = Артикул + "-" + ствЦена[СтруктураПараметров.Цена];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Артикул;
	
КонецФункции

Функция МастерицаПоУмолчанию(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСерийныхНомеров.ВязальщицаНаСайте КАК ВязальщицаНаСайте,
	|	ДанныеСерийныхНомеров.ДатаПоступления КАК ДатаПоступления
	|ПОМЕСТИТЬ ВтИстория
	|ИЗ
	|	РегистрСведений.ДанныеСерийныхНомеров КАК ДанныеСерийныхНомеров
	|ГДЕ
	|	ДанныеСерийныхНомеров.СерийныйНомер.Владелец = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВтИстория.ДатаПоступления) КАК ДатаПоступления
	|ПОМЕСТИТЬ ВтДатыПоследнего
	|ИЗ
	|	ВтИстория КАК ВтИстория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИстория.ВязальщицаНаСайте КАК ВязальщицаНаСайте
	|ПОМЕСТИТЬ ВтПоследниеВязальщицы
	|ИЗ
	|	ВтДатыПоследнего КАК ВтДатыПоследнего
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИстория КАК ВтИстория
	|		ПО ВтДатыПоследнего.ДатаПоступления = ВтИстория.ВязальщицаНаСайте
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураМастерицыДляПроверки.НомерСтроки КАК НомерСтроки,
	|	НоменклатураМастерицыДляПроверки.Мастерица КАК Мастерица
	|ПОМЕСТИТЬ ВтВсеВязальщицы
	|ИЗ
	|	Справочник.Номенклатура.МастерицыДляПроверки КАК НоменклатураМастерицыДляПроверки
	|ГДЕ
	|	НоменклатураМастерицыДляПроверки.Ссылка = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтВсеВязальщицы.НомерСтроки КАК НомерСтроки,
	|	ВтВсеВязальщицы.Мастерица КАК Мастерица,
	|	ВтПоследниеВязальщицы.ВязальщицаНаСайте КАК Последняя
	|ИЗ
	|	ВтВсеВязальщицы КАК ВтВсеВязальщицы,
	|	ВтПоследниеВязальщицы КАК ВтПоследниеВязальщицы";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Не Таблица.Количество() Тогда
		Возврат Справочники.Мастерицы.ПустаяСсылка();
	КонецЕсли;
	
	СтрокаПоследней = Неопределено;
	
	Для Каждого Стр Из Таблица Цикл
		Если Стр.Мастерица = Стр.Последняя Тогда
			СтрокаПоследней = Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаПоследней = Неопределено Тогда
		Возврат Таблица[0].Мастерица;
	КонецЕсли;
	
	Если СтрокаПоследней.НомерСтроки = Таблица.Количество() Тогда
		Возврат Таблица[0].Мастерица;
	КонецЕсли;
	
	Возврат Таблица[СтрокаПоследней.НомерСтроки].Мастерица;
	
КонецФункции

Функция РазмерПоУмолчанию(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.РазмерДляПлатков КАК РазмерДляПлатков
	|		ПО НоменклатураДополнительныеРеквизиты.Свойство = РазмерДляПлатков.Значение
	|			И (НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура)";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.ДополнительныеЗначенияРеквизитов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Значение;
	
КонецФункции

Функция ЦенаЗаРаботу(Номенклатура, Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			Номенклатура = &Номенклатура
	|				И ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ЦенаЗаРаботу)) КАК ЦеныНоменклатурыСрезПоследних";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Дата", Дата);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Цена;
	
КонецФункции

