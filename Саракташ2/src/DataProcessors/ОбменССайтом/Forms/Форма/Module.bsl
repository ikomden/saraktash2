
&НаСервере
Процедура ПроверитьСоединениеНаСервере()
	
	ОбъектСовсемОбъект=РеквизитФормыВЗначение("Объект");
	стРезультат = Новый Структура("Результат,Ошибки");	
	ОбъектСовсемОбъект.ПроверитьАвторизацию(стРезультат);
	
	Сообщить("Выполнено с результатом: " + стРезультат.Результат 
	+ ?(ЗначениеЗаполнено(стРезультат.Ошибки), " , со следующими ошибками: " + стРезультат.Ошибки, ""));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоединение(Команда)
	
	ПроверитьСоединениеНаСервере();
	
КонецПроцедуры


//Отладка
&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	Объект.УзелОбмена = ВременноПролучитьУзелОбмена();	
КонецПроцедуры

&НаСервере
Функция ВременноПролучитьУзелОбмена() 
	Возврат ПланыОбмена.ОбменССайтом.НайтиПоКоду("1");	
КонецФункции

&НаСервере
Процедура ЗагрузитьЗаказыНаСервере()

	ОбъектСовсемОбъект=РеквизитФормыВЗначение("Объект");
	стРезультат = Новый Структура("Результат,Ошибки");	
	ОбъектСовсемОбъект.ЗагрузитьЗаказы(стРезультат);
	
	Сообщить("Выполнено с результатом: " + стРезультат.Результат 
	+ ?(ЗначениеЗаполнено(стРезультат.Ошибки), " , со следующими ошибками: " + стРезультат.Ошибки, ""));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказы(Команда)
	ЗагрузитьЗаказыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтладкаОчисткаНаСервере()
	
		
	Если ЧиститьВсе Тогда
		
		//Справочники
		Для Каждого ОбъектМетаданных Из Метаданные.Справочники Цикл
			
			СпрВыборка = Справочники[ОбъектМетаданных.Имя].Выбрать();
			Пока СпрВыборка.Следующий() Цикл 
				СпрОбъект = СпрВыборка.Ссылка.ПолучитьОбъект();
				Если СпрОбъект <> Неопределено И НЕ СпрОбъект.Предопределенный Тогда 
					СпрОбъект.Удалить();
				КонецЕсли;
			КонецЦикла;			
			
		КонецЦикла;
		
		//Документы
		Для Каждого ОбъектМетаданных Из Метаданные.Документы Цикл
			
			ДокиВыборка = Документы[ОбъектМетаданных.Имя].Выбрать();
			Пока ДокиВыборка.Следующий() Цикл 
				ДокОбъект = ДокиВыборка.Ссылка.ПолучитьОбъект();	
				ДокОбъект.Удалить();
			КонецЦикла;			
			
		КонецЦикла;
		
		//РС
		Для Каждого ОбъектМетаданных Из Метаданные.РегистрыСведений Цикл
			
			Если ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда 
				Продолжить;
			КонецЕсли;
			
			НЗ = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
			НЗ.Записать();			
			
		КонецЦикла;
		
		//ПВХ
		Для Каждого ОбъектМетаданных Из Метаданные.ПланыВидовХарактеристик Цикл
			
			Выборка = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].Выбрать();
			Пока Выборка.Следующий() Цикл 
				ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();	
				ВыборкаОбъект.Удалить();
			КонецЦикла;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтладкаОчистка(Команда)
	ОтладкаОчисткаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьЗаказыНаСервере()
	
	ОбъектСовсемОбъект=РеквизитФормыВЗначение("Объект");
	стРезультат = Новый Структура("Результат,Ошибки");	
	ОбъектСовсемОбъект.ВыгрузитьЗаказы(стРезультат);
	
	Сообщить("Выполнено с результатом: " + стРезультат.Результат 
	+ ?(ЗначениеЗаполнено(стРезультат.Ошибки), " , со следующими ошибками: " + стРезультат.Ошибки, ""));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаказы(Команда)
	ВыгрузитьЗаказыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьКаталогНаСервере()
	
	ОбъектСовсемОбъект=РеквизитФормыВЗначение("Объект");
	стРезультат = Новый Структура("Результат,Ошибки");	
	ОбъектСовсемОбъект.ВыгрузитьКлассификаторИКаталог(стРезультат);
	
	Сообщить("Выполнено с результатом: " + стРезультат.Результат 
	+ ?(ЗначениеЗаполнено(стРезультат.Ошибки), " , со следующими ошибками: " + стРезультат.Ошибки, ""));
	

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКаталог(Команда)
	ВыгрузитьКаталогНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПользователейНаСервере()
	
	ОбъектСовсемОбъект=РеквизитФормыВЗначение("Объект");
	стРезультат = Новый Структура("Результат,Ошибки");	
	ОбъектСовсемОбъект.ЗагрузитьПользователей(стРезультат);
	
	Сообщить("Выполнено с результатом: " + стРезультат.Результат 
	+ ?(ЗначениеЗаполнено(стРезультат.Ошибки), " , со следующими ошибками: " + стРезультат.Ошибки, ""));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользователей(Команда)
	ЗагрузитьПользователейНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьПользователейНаСервере()
	
	ОбъектСовсемОбъект=РеквизитФормыВЗначение("Объект");
	стРезультат = Новый Структура("Результат,Ошибки");	
	ОбъектСовсемОбъект.ВыгрузитьПользователей(стРезультат);
	
	Сообщить("Выполнено с результатом: " + стРезультат.Результат 
	+ ?(ЗначениеЗаполнено(стРезультат.Ошибки), " , со следующими ошибками: " + стРезультат.Ошибки, ""));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПользователей(Команда)
	ВыгрузитьПользователейНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеСФормыОбратнойСвязиНаСервере()
	
	ОбъектСовсемОбъект=РеквизитФормыВЗначение("Объект");
	стРезультат = Новый Структура("Результат,Ошибки");	
	ОбъектСовсемОбъект.ЗагрузитьДанныеСФормыОбратнойСвязи(стРезультат);
	
	Сообщить("Выполнено с результатом: " + стРезультат.Результат 
	+ ?(ЗначениеЗаполнено(стРезультат.Ошибки), " , со следующими ошибками: " + стРезультат.Ошибки, ""));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеСФормыОбратнойСвязи(Команда)
	ЗагрузитьДанныеСФормыОбратнойСвязиНаСервере();
КонецПроцедуры

//&НаСервере
//Процедура ИмпортТоварыНаСервере()
//	
//	//Считать файл
//	//ИмяФайла = "C:\Users\raph\Downloads\shop_export_internet_magazin_orenburgshal (14).csv";
//	ИмяФайлаЛога = "C:\импорт в 1с.Лог.log";
//	
//	Разделитель = ";";
//	Разделитель2 = "|";
//		
//	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
//	ЗагружаемыйФайл.Прочитать(ИмяФайла);
//	
//	//шапка по умолчанию первая строчка
//	Текст = ЗагружаемыйФайл.ПолучитьТекст();
//	Текст = СтрЗаменить(Текст,"&quot;","""");
//	Текст = СтрЗаменить(Текст,"&quot;","""");
//	
//	СчВсего = 0;
//	СчНовых = 0;
//	
//	//Цены
//	соотвЦены = Новый Соответствие;
//	соотвЦеныЗакупки = Новый Соответствие;
//	
//	Для НомерСтроки=1 по СтрЧислоСтрок(Текст) Цикл
//		
//		Строка = СтрПолучитьСтроку(Текст,НомерСтроки);
//		МассивКол = РазложитьСтрокуВМассивПодстрок(Строка,Разделитель);
//		
//		Если МассивКол.Количество() <> 0 Тогда
//			
//			//Для Каждого Столб Из МассивКол Цикл				
//			//	Сообщить(Столб);			
//			//КонецЦикла;
//			
//			вхИдентификатор				=	МассивКол[0];
//			вхНазвание					=	МассивКол[1];
//			вхАртикул					=	МассивКол[2];
//			вхЕИ 						=	МассивКол[3];
//			вхЦена 						=	МассивКол[4];
//			вхКатегория 				=	МассивКол[5];
//			вхПроизводитель 			=	МассивКол[6];
//			
//			вхДХРазмерВарежек 			=	МассивКол[7];	//5
//			вхДХРазмерВарежекНазвание 	=	МассивКол[8];
//			вхДХСостав 					=	МассивКол[9];	//4
//			вхДХСоставНазвание			=	МассивКол[10];
//			вхДХПроизвоство 			=	МассивКол[11];	//3
//			вхДХПроизвоствоНазвание 	=	МассивКол[12];
//			вхДХЦвет 					=	МассивКол[13];	//2
//			вхДХЦветНазвание 			=	МассивКол[14];
//			вхДХРазмер 					=	МассивКол[15];	//1
//			вхДХРазмерНазвание 			=	МассивКол[16];
//			вхДХВес 					=	МассивКол[17];	//6
//			вхДХЦенаПоПредоплате 		=	МассивКол[18];	//7
//			вхДХЦенаПоПредоплатеНазвание=	МассивКол[19];
//			вхДХДлина 					=	МассивКол[20];	//8
//			вхДХРазмер2 				=	МассивКол[21];	//9
//			вхДХРазмер2Название 		=	МассивКол[22];
//			вхДХКолВоСтраниц 			=	МассивКол[23];	//10
//			вхДХАвтор 					=	МассивКол[24];	//11
//			вхДХГодИздания 				=	МассивКол[25];	//12
//			вхДХВес2 					=	МассивКол[26];	//13
//			вхДХПроизводитель 			=	МассивКол[27];	//14
//			вхДХПроизводительНазвание 	=	МассивКол[28];
//			вхДХСложности 				=	МассивКол[29];	//16
//			вхДХКачествоПряжи 			=	МассивКол[30];	//17
//			вхДХОКЗанеделю 				=	МассивКол[31];	//18
//			
//			вхОпубликоватьНаСайте		=	МассивКол[32];
//			вхЦенаЗакупки				=	МассивКол[33];
//			
//			//Запись данных
//			ТоварОбъект = Справочники.Номенклатура.НайтиПоРеквизиту("IDНаСайте", Число(вхИдентификатор));
//			Если НЕ ЗначениеЗаполнено(ТоварОбъект) Тогда //Создать Новый
//				ТоварОбъект = Справочники.Номенклатура.СоздатьЭлемент();				
//			Иначе
//				ТоварОбъект = ТоварОбъект.ПолучитьОбъект();				
//			КонецЕсли;
//			
//			ТоварОбъект.IDНаСайте = Число(вхИдентификатор);
//			ТоварОбъект.Наименование = вхНазвание;
//			ТоварОбъект.Артикул = вхАртикул;
//			ТоварОбъект.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт");
//			ТоварОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
//			ТоварОбъект.ВыгружатьНаСайт = Число(вхОпубликоватьНаСайте);
//			
//			//ДХ
//			#Область ДХ
//			ТоварОбъект.ДополнительныеРеквизиты.Очистить();
//			
//			Если ЗначениеЗаполнено(вхДХРазмерВарежек) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 5, вхДХРазмерВарежек);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХСостав) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 4, вхДХСостав);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХПроизвоство) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 3, вхДХПроизвоство);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХЦвет) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 2, вхДХЦвет);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХРазмер) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 1, вхДХРазмер);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХВес) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 6, вхДХВес, Истина);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХЦенаПоПредоплате) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 7, вхДХЦенаПоПредоплате);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХДлина) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 8, вхДХДлина);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХРазмер2) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 9, вхДХРазмер2);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХКолВоСтраниц) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 10, вхДХКолВоСтраниц, Истина);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХАвтор) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 11, вхДХАвтор, Истина);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХГодИздания) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 12, вхДХГодИздания, Истина);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХВес2) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 13, вхДХВес2, Истина);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХПроизводитель) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 14, вхДХПроизводитель);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХСложности) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 16, вхДХСложности, Истина);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХКачествоПряжи) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 17, вхДХКачествоПряжи, Истина);				
//			КонецЕсли;
//			
//			Если ЗначениеЗаполнено(вхДХОКЗанеделю) Тогда
//				ДобавитьЗначениеХарактеристики(ТоварОбъект, 18, вхДХОКЗанеделю, Истина);				
//			КонецЕсли;
//			
//			#КонецОбласти
//			//}ДХ			
//			
//			//Если НЕ ТоварОбъект.ЭтоНовый() Тогда
//			
//				ЭтоНовый = ТоварОбъект.ЭтоНовый();
//				ТоварОбъект.Записать();
//				
//				//Категории{
//				НЗ = РегистрыСведений.ТоварыПоКатегориям.СоздатьНаборЗаписей();
//				НЗ.Отбор.Номенклатура.Установить(ТоварОбъект.Ссылка);
//				
//				мсКатегории = РазложитьСтрокуВМассивПодстрок(вхКатегория,Разделитель2);
//				для Каждого стрКатегорияИД Из мсКатегории Цикл
//					
//					КатегорияСсылка = Справочники.КатегорииТоваров.НайтиПоРеквизиту("IDНаСайте", Число(стрКатегорияИД));
//					Если НЕ ЗначениеЗаполнено(КатегорияСсылка) Тогда 
//						Сообщить("Не найдена категория с ид " + стрКатегорияИД);
//						Продолжить;
//					КонецЕсли;					
//					
//					ЗаписьТПК = НЗ.Добавить();
//					ЗаписьТПК.Номенклатура = ТоварОбъект.Ссылка;
//					ЗаписьТПК.Категория = КатегорияСсылка;
//					
//				КонецЦикла;
//				
//				НЗ.Записать();				
//				//}Категории
//				
//				//Цены
//				Если ЗначениеЗаполнено(вхЦена) Тогда
//					Попытка 
//						вхЦена = Число(вхЦена);
//						соотвЦены.Вставить(ТоварОбъект.Ссылка, вхЦена);
//					Исключение
//					КонецПопытки;					
//				КонецЕсли;
//				
//				Если ЗначениеЗаполнено(вхЦенаЗакупки) Тогда 
//					Попытка
//						соотвЦеныЗакупки.Вставить(ТоварОбъект.Ссылка, Число(вхЦенаЗакупки));
//					Исключение
//					КонецПопытки;
//				КонецЕсли;
//				
//			//КонецЕсли;			
//			
//			СчВсего = СчВсего + 1;			
//			Если ЭтоНовый Тогда 
//				Сообщить("Добавлен товар " + ТоварОбъект);
//				СчНовых = СчНовых + 1;
//			Иначе
//				Сообщить("Изменен товар " + ТоварОбъект);
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//		//Возврат;				
//				
//	КонецЦикла;

//	Сообщить("Товаров " + СчВсего + ", новых " + СчНовых);
//	
//	//УстановкаЦен
//	УстановкаЦенОбъект = Документы.УстановкаЦен.СоздатьДокумент();
//	УстановкаЦенОбъект.Дата = ТекущаяДата();
//	УстановкаЦенОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
//	УстановкаЦенОбъект.Комментарий = "Установка цен при загрузке товара с сайта.";
//	УстановкаЦенОбъект.ВидЦен = Перечисления.ТипыЦен.Розничная;
//	
//	Для Каждого Товар Из соотвЦены Цикл
//		
//		нСтрока = УстановкаЦенОбъект.Цены.Добавить();
//		нСтрока.Номенклатура = Товар.Ключ;
//		нСтрока.Цена = Товар.Значение;
//		
//	КонецЦикла;
//	
//	УстановкаЦенОбъект.Записать();
//	
//	//УстановкаЦенЗакупки
//	УстановкаЦенЗакупкиОбъект = Документы.УстановкаЦенЗакупки.СоздатьДокумент();
//	УстановкаЦенЗакупкиОбъект.Дата = ТекущаяДата();
//	УстановкаЦенЗакупкиОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
//	УстановкаЦенЗакупкиОбъект.Комментарий = "Установка цен закупки при загрузке товара с сайта.";
//	
//	Для Каждого Товар Из соотвЦеныЗакупки Цикл
//		
//		нСтрока = УстановкаЦенЗакупкиОбъект.Товары.Добавить();
//		нСтрока.Номенклатура = Товар.Ключ;
//		нСтрока.Цена = Товар.Значение;
//		
//	КонецЦикла;
//	
//	УстановкаЦенЗакупкиОбъект.Записать();
//	
//КонецПроцедуры

//Процедура ДобавитьЗначениеХарактеристики(ТоварОбъект, СвойствоИД, ЗначениеИДИлиТекст, ПростоеЗначение = Ложь)
//	
//	СвойствоИД = Число(СвойствоИД);	//ПВХ.ДополнительныеРеквизиты				
//	ЗначениеИДИлиТекст = ЗначениеИДИлиТекст; //Спр.ДополнительныеЗначенияРеквизитов
//	
//	//Найти характеристику
//	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоРеквизиту("IDНаСайте", СвойствоИД); //ИД
//	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
//		Сообщить("Не найдена характеристика с ид " + СвойствоИД);
//		Возврат;	
//	КонецЕсли;
//	
//	Если НЕ ПростоеЗначение Тогда 
//		
//		//Найти значение характеристики
//		Значение = Справочники.ДополнительныеЗначенияРеквизитов.НайтиПоРеквизиту("IDНаСайте", Число(ЗначениеИДИлиТекст));
//		
//		Если НЕ ЗначениеЗаполнено(Значение) Тогда			
//			Сообщить("Не найдено значение характеристики с ид " + СвойствоИД + " с ид " + ЗначениеИДИлиТекст);	
//			Возврат;
//		КонецЕсли;
//		
//	Иначе
//		Значение = ЗначениеИДИлиТекст;		
//	КонецЕсли;		
//	
//	
//	Если ЗначениеЗаполнено(Значение) Тогда 
//		
//		нСтрокаДХ = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
//		нСтрокаДХ.Свойство = Свойство;
//		нСтрокаДХ.Значение = Значение;
//		
//	КонецЕсли;	
//	
//КонецПроцедуры

&НаСервере
Процедура ИмпортТоварыНаСервере()
	
	ОбъектСовсемОбъект=РеквизитФормыВЗначение("Объект");	
	ОбъектСовсемОбъект.ИмпортТоварыНаСервере(ИмяФайла);
	
	//Сообщить("Выполнено с результатом: " + стРезультат.Результат 
	//+ ?(ЗначениеЗаполнено(стРезультат.Ошибки), " , со следующими ошибками: " + стРезультат.Ошибки, ""));

КонецПроцедуры

&НаКлиенте
Процедура ИмпортТовары(Команда)	
	
	ИмпортТоварыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = "Выберите файл для импорта.";

	Если ДиалогВыбора.Выбрать() Тогда
		ИмяФайла = ДиалогВыбора.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры


//Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
//    Знач ПропускатьПустыеСтроки = Неопределено)
// 
//    Результат = Новый Массив;
// 
//    // для обеспечения обратной совместимости
//    Если ПропускатьПустыеСтроки = Неопределено Тогда
//        ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
//        Если ПустаяСтрока(Строка) Тогда 
//            Если Разделитель = " " Тогда
//                Результат.Добавить("");
//            КонецЕсли;
//            Возврат Результат;
//        КонецЕсли;
//    КонецЕсли;
//    //
// 
//    Позиция = Найти(Строка, Разделитель);
//    Пока Позиция > 0 Цикл
//        Подстрока = Лев(Строка, Позиция - 1);
//        Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
//            Результат.Добавить(Подстрока);
//        КонецЕсли;
//        Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
//        Позиция = Найти(Строка, Разделитель);
//    КонецЦикла;
// 
//    Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
//        Результат.Добавить(Строка);
//    КонецЕсли;
// 
//    Возврат Результат;
// 
//КонецФункции

&НаСервере
Процедура ЗагрузитьТоварыНаСервере()
	
	ОбъектСовсемОбъект=РеквизитФормыВЗначение("Объект");
	стРезультат = Новый Структура("Результат, Ошибки");	
	ОбъектСовсемОбъект.ЗагрузитьТовары(стРезультат);
	
	Сообщить("Выполнено с результатом: " + стРезультат.Результат 
	+ ?(ЗначениеЗаполнено(стРезультат.Ошибки), " , со следующими ошибками: " + стРезультат.Ошибки, ""));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТовары(Команда)
	ЗагрузитьТоварыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьОстаткиТоваровНаСервере()
	
	ОбъектСовсемОбъект=РеквизитФормыВЗначение("Объект");
	стРезультат = Новый Структура("Результат,Ошибки");	
	ОбъектСовсемОбъект.ВыгрузитьОстаткиТоваров(стРезультат);
	
	Сообщить("Выполнено с результатом: " + стРезультат.Результат 
	+ ?(ЗначениеЗаполнено(стРезультат.Ошибки), " , со следующими ошибками: " + стРезультат.Ошибки, ""));	

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОстаткиТоваров(Команда)
	ВыгрузитьОстаткиТоваровНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = "Выберите файл обмена.";

	Если ДиалогВыбора.Выбрать() Тогда
		Объект.ИмяФайлаОбмена= ДиалогВыбора.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры
