//Выполнение запроса к сайту
// 1 ПолучитьПараметрыСоединения - Необходимо сформировать структуру с параметрами соединения
// 2 HTTPВыполнитьАвторизацию - Необходимо авторизоваться на сайте, здесь в параметры соединения добавляется Cookie которые будут использоваться при следующих вызовах
// 3 HTTPПолучитьДанныеССервера или HTTPОтправитьДанныеНаСервер - выполнить необходимые запросы, перед вызовом необходимо устанавливать АдресСкриптаПараметры



///////////////////////////////////////////////////////////////////////////
// Процедуры

Процедура ПроверитьАвторизацию(стРезультат) Экспорт
	
	стРезультат = Новый Структура("Результат,Ошибки");
	стРезультат.Результат = Неопределено;
	стРезультат.Ошибки = Неопределено; //Нет ошибок
	
	ПараметрыСоединения = ПолучитьПараметрыСоединения();
	
	стСоединение = ПолучитьСоединение(ПараметрыСоединения);
	
	Если ЗначениеЗаполнено(стСоединение.Ошибки) Тогда //Обработка ошибок
		стРезультат.Ошибки = стСоединение.Ошибки;
		Возврат;		
	КонецЕсли;	
	
	HTTPВыполнитьАвторизацию(стСоединение.Соединение, ПараметрыСоединения, стРезультат);
	
	Если ЗначениеЗаполнено(ПараметрыСоединения.ЗаголовкиЗапросовCookie) И НЕ ЗначениеЗаполнено(стРезультат.Ошибки) Тогда 
		стРезультат.Результат = "Проверка авторизации: Авторизация прошла успешно.";
	Иначе
		стРезультат.Результат = "Проверка авторизации: Авторизация не прошла успешно!";
	КонецЕсли;
	
КонецПроцедуры

//Выполняет авторизацию и запоминает кукки
Процедура HTTPВыполнитьАвторизацию(Соединение, ПараметрыСоединения, стРезультат)
	
	//Дополнить параметры соединения	
	ПараметрыСоединения.АдресСкриптаПараметры = "?type=sale&mode=checkauth"; //http://<сайт>/<путь> /1c_exchange.php?type=sale&mode=checkauth
	
	//Ожидается 3 строки succes \n ИмяCookie \n ЗначениеCookie
	стОтветСервера = HTTPПолучитьДанныеССервера(Соединение, ПараметрыСоединения);
	
	Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
		стРезультат.Ошибки = стОтветСервера.Ошибки;
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) <> "success" Тогда
		стРезультат.Ошибки = "Авторизация пользователя на сайте. Ошибка: Авторизация пользователя не выполнена. Проверьте адрес сайта, имя пользователя и пароль." + Символы.ПС + 
		"Откройте данный адрес из браузера и проверьте ответ д/быть ""ошибка авторизации"": " + Символы.ПС 
		+ СокрЛП(ПараметрыСоединения.Сервер) + "/"
		+ СокрЛП(ПараметрыСоединения.АдресСкрипта) 
		+ СокрЛП(ПараметрыСоединения.АдресСкриптаПараметры);
		Возврат;
	КонецЕсли;
	
	//Дополнить параметры соединения
	КукиИмя = СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 2);
	КукиЗначение = СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 3);	
	ПараметрыСоединения.ЗаголовкиЗапросовCookie = "Cookie: " + КукиИмя + "=" + КукиЗначение;;	
	
КонецПроцедуры

Процедура ЗагрузитьЗаказы(стРезультат, ТолькоОбновитьСтоимостьДоставки = Ложь, ДляТеста = Ложь) Экспорт
	
	стРезультат = Новый Структура("Результат,Ошибки");
	стРезультат.Результат = "";
	стРезультат.Ошибки = Неопределено; //Нет ошибок
	
	Если НЕ УзелОбмена.ЗагружатьЗаказы Тогда 
		стРезультат.Ошибки = "Не активирован флаг ""Загружать заказы"" в плане обмена.";
		Возврат;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайлаОбмена) Тогда //Если не указан файл для обмена, то обращаемся к сайту
		
		ПараметрыСоединения = ПолучитьПараметрыСоединения();
		
		стСоединение = ПолучитьСоединение(ПараметрыСоединения);
		
		Если ЗначениеЗаполнено(стСоединение.Ошибки) Тогда //Обработка ошибок
			стРезультат.Ошибки = стСоединение.Ошибки;
			Возврат;		
		КонецЕсли;
		
		
		//Авторизация
		HTTPВыполнитьАвторизацию(стСоединение.Соединение, ПараметрыСоединения, стРезультат);
		
		Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ЗаголовкиЗапросовCookie) ИЛИ ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //Авторизация не выполнена 
			Возврат;
		КонецЕсли;
		
		пВремяОбмена = ТекущаяДата() - 60*60*2;
		
		//Получить заказы
		ПараметрыСоединения.АдресСкриптаПараметры = "?type=sale&mode=query"; //http://<сайт>/<путь> /1c_exchange.php?type=sale&mode=query
		Если ДляТеста Тогда
			ПараметрыСоединения.АдресСкриптаПараметры = ПараметрыСоединения.АдресСкриптаПараметры + "&test=1";	
		КонецЕсли;
		
		//ПараметрыСоединения.АдресСкриптаПараметры = "?type=sale&mode=query&from=01.08.2018&to=21.08.2018";
		
		//Ожидается XML или ZIP
		стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
		
		Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
			стРезультат.Ошибки = стОтветСервера.Ошибки;
			Возврат;
		КонецЕсли;
		
		#Область ОбработкаXML
		
		//Обработка XML
		СтрокаXML = "";	
		Если Лев(стОтветСервера.ОтветСервера, 2) = "PK" Тогда		
			
			стРезультатРаспаковкиАрхива = РаспаковатьZIPАрхив(стОтветСервера.ОтветСервера);
			Если ЗначениеЗаполнено(стРезультатРаспаковкиАрхива.Ошибки) Тогда 
				стРезультат.Ошибки = стСоединение.Ошибки;
				Возврат;
			КонецЕсли;			
			
			СтрокаXML = стРезультатРаспаковкиАрхива.СтрокаСодержимого;
			
		Иначе		
			Если Лев(стОтветСервера.ОтветСервера, 5) = "<?xml" Тогда			
				СтрокаXML = стОтветСервера.ОтветСервера;			
			КонецЕсли;		
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаXML) Тогда //Обработка ошибок
			стРезультат.Ошибки = "Загрузка заказов. Ошибка: Не удалось прочитать данные, загруженные с сайта. Получен ответ: " + Символы.ПС + стОтветСервера.ОтветСервера;		
			Возврат;		
		КонецЕсли;
		
	Иначе
		
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОбмена);
			СтрокаXML = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
		Исключение
			ОО = ОписаниеОшибки();
			стРезультат.Ошибки = "Загрузка заказов. Ошибка: Не удалось прочитать файл." + Символы.ПС + ОО;		
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		
		ЛогироватьXML("ЗагрузитьЗаказы", СтрокаXML); //Логирование
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка заказов. Ошибка: Не удалось обработать CML." + Символы.ПС + ОО;
		Возврат;
	КонецПопытки;
	
	мсРезультатРазборки = Новый Массив;	
	
	Попытка
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "КоммерческаяИнформация" Тогда 
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		СтекУзлов = Новый Массив;
		ТекущийПуть = "";
		Пока ЧтениеXML.Прочитать() Цикл 
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				СтекУзлов.Добавить(ЧтениеXML.Имя);
				ТекущийПуть = МассивВСтроку(СтекУзлов);
				
				//Документ
				Если ЧтениеXML.Имя = "Документ" И ТекущийПуть = "Документ" Тогда 
					стДокумент = Новый Структура("Ид,Номер,СвойНомер,Дата,ХозОперация,Роль,Курс,Время,Валюта,Сумма,Комментарий,Скидки,ИдентификаторОтправки,Контрагенты,Товары,ЗначенияРеквизитов"); //Контрагенты,Товары,ЗначенияРеквизитов
					
					//Скидки
				ИначеЕсли ЧтениеXML.Имя = "Скидки" И ТекущийПуть = "Документ\Скидки" Тогда
					стДокумент.Скидки = Новый Массив;
				ИначеЕсли ЧтениеXML.Имя = "Скидка" И ТекущийПуть = "Документ\Скидки\Скидка" Тогда
					стДокументСкидка = Новый Структура("Сумма,УчтеноВСумме");
					//Контрагенты
				ИначеЕсли ЧтениеXML.Имя = "Контрагенты" И ТекущийПуть = "Документ\Контрагенты" Тогда
					стДокумент.Контрагенты = Новый Массив;
				ИначеЕсли ЧтениеXML.Имя = "Контрагент" И ТекущийПуть = "Документ\Контрагенты\Контрагент" Тогда
					стКонтрагент = Новый Структура("Ид,Наименование,Роль,ПолноеНаименование,АдресРегистрации,Контакты, ПолноеНаименование2"); //АдресРегистрации,Контакты
					//Контрагент.АдресРегистрации	
				ИначеЕсли ЧтениеXML.Имя = "АдресРегистрации" И ТекущийПуть = "Документ\Контрагенты\Контрагент\АдресРегистрации" Тогда
					стКонтрагент.АдресРегистрации = Новый Массив;
				ИначеЕсли ЧтениеXML.Имя = "АдресноеПоле" И ТекущийПуть = "Документ\Контрагенты\Контрагент\АдресРегистрации\АдресноеПоле" Тогда
					стАдресноеПоле = Новый Структура("Тип,Значение");
					//Контрагент.Контакты	
				ИначеЕсли ЧтениеXML.Имя = "Контакты" И ТекущийПуть = "Документ\Контрагенты\Контрагент\Контакты" Тогда
					стКонтрагент.Контакты = Новый Массив;
				ИначеЕсли ЧтениеXML.Имя = "Контакт" И ТекущийПуть = "Документ\Контрагенты\Контрагент\Контакты\Контакт" Тогда
					стКонтакт = Новый Структура("Тип,Значение");
					
					//Товары
				ИначеЕсли ЧтениеXML.Имя = "Товары" И ТекущийПуть = "Документ\Товары" Тогда
					стДокумент.Товары = Новый Массив;
				ИначеЕсли ЧтениеXML.Имя = "Товар" И ТекущийПуть = "Документ\Товары\Товар" Тогда
					стТовар = Новый Структура("Ид,Артикул,Наименование,ЦенаЗаЕдиницу,БазоваяЕдиница,Количество,Сумма,Скидки,ЗначенияРеквизитов,ХарактеристикиТовара,Категории,ДополнительныеХарактеристики"); //Скидки,ЗначенияРеквизитов,Категории,ДополнительныеХарактеристики
					//Товары.Скидки	
				ИначеЕсли ЧтениеXML.Имя = "Скидки" И ТекущийПуть = "Документ\Товары\Товар\Скидки" Тогда
					стТовар.Скидки = Новый Массив;
				ИначеЕсли ЧтениеXML.Имя = "Скидка" И ТекущийПуть = "Документ\Товары\Товар\Скидки\Скидка" Тогда
					стТоварСкидка = Новый Структура("Сумма,УчтеноВСумме");
					//Товары.ЗначенияРеквизитов
				ИначеЕсли ЧтениеXML.Имя = "ЗначенияРеквизитов" И ТекущийПуть = "Документ\Товары\Товар\ЗначенияРеквизитов" Тогда
					стТовар.ЗначенияРеквизитов = ?(стТовар.ЗначенияРеквизитов = Неопределено, Новый Массив, стТовар.ЗначенияРеквизитов);
				ИначеЕсли ЧтениеXML.Имя = "ЗначениеРеквизита" И ТекущийПуть = "Документ\Товары\Товар\ЗначенияРеквизитов\ЗначениеРеквизита" Тогда
					стТоварЗначениеРеквизита = Новый Структура("Наименование,Значение");
					//Товар.БазоваяЕдиница 
				ИначеЕсли ЧтениеXML.Имя = "БазоваяЕдиница" И ТекущийПуть = "Документ\Товары\Товар\БазоваяЕдиница" Тогда
					стТовар.БазоваяЕдиница = Новый Структура("Наименование,Код,НаименованиеПолное,МеждународноеСокращение");
					стТовар.БазоваяЕдиница.Код = ЧтениеXML.ЗначениеАтрибута("Код");
					стТовар.БазоваяЕдиница.НаименованиеПолное = ЧтениеXML.ЗначениеАтрибута("НаименованиеПолное");
					стТовар.БазоваяЕдиница.МеждународноеСокращение = ЧтениеXML.ЗначениеАтрибута("МеждународноеСокращение");					
					//Товар.Категории
				ИначеЕсли ЧтениеXML.Имя = "Категории" И ТекущийПуть = "Документ\Товары\Товар\Категории" Тогда
					стТовар.Категории = Новый Массив;
				ИначеЕсли ЧтениеXML.Имя = "Кaтегория" И ТекущийПуть = "Документ\Товары\Товар\Категории\Кaтегория" Тогда
					стТоварКaтегория = Новый Структура("Ид,Наименование");
					//Товар.ДополнительныеХарактеристики
				ИначеЕсли ЧтениеXML.Имя = "ДополнительныеХарактеристики" И ТекущийПуть = "Документ\Товары\Товар\ДополнительныеХарактеристики" Тогда
					стТовар.ДополнительныеХарактеристики = Новый Массив;
				ИначеЕсли ЧтениеXML.Имя = "ДополнительнаяХарактеристика" И ТекущийПуть = "Документ\Товары\Товар\ДополнительныеХарактеристики\ДополнительнаяХарактеристика" Тогда
					стТоварДополнительнаяХарактеристика = Новый Структура("Ид,Наименование,ЗначениеИд,ЗначениеНаименование");
					
					//ЗначенияРеквизитов
				ИначеЕсли ЧтениеXML.Имя = "ЗначенияРеквизитов" И ТекущийПуть = "Документ\ЗначенияРеквизитов" Тогда
					стДокумент.ЗначенияРеквизитов = ?(стДокумент.ЗначенияРеквизитов = Неопределено, Новый Массив, стДокумент.ЗначенияРеквизитов);
				ИначеЕсли ЧтениеXML.Имя = "ЗначениеРеквизита" И ТекущийПуть = "Документ\ЗначенияРеквизитов\ЗначениеРеквизита" Тогда
					стДокументЗначениеРеквизита = Новый Структура("Наименование,Значение");
		
					
					
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				
				//Документ
				Если ТекущийПуть = "Документ\Ид" Тогда 				
					стДокумент.Ид = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\СвойНомер" Тогда				
					стДокумент.СвойНомер = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Номер" Тогда				
					стДокумент.Номер = XMLЗначение(Тип("Число"),ЧтениеXML.Значение);
				ИначеЕсли ТекущийПуть = "Документ\Дата" Тогда				
					стДокумент.Дата = XMLЗначение(Тип("Дата"),ЧтениеXML.Значение);
				ИначеЕсли ТекущийПуть = "Документ\ХозОперация" Тогда				
					стДокумент.ХозОперация = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Роль" Тогда				
					стДокумент.Роль = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Курс" Тогда				
					стДокумент.Курс = XMLЗначение(Тип("Число"),ЧтениеXML.Значение);
				ИначеЕсли ТекущийПуть = "Документ\Время" Тогда				
					стДокумент.Время = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Валюта" Тогда				
					стДокумент.Валюта = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Сумма" Тогда				
					стДокумент.Сумма = XMLЗначение(Тип("Число"),ЧтениеXML.Значение);
				ИначеЕсли ТекущийПуть = "Документ\Комментарий" Тогда				
					стДокумент.Комментарий = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\ИдентификаторОтправки" Тогда				
					стДокумент.ИдентификаторОтправки = ЧтениеXML.Значение;
					
					
					//Скидка
				ИначеЕсли ТекущийПуть = "Документ\Скидки\Скидка\Сумма" Тогда
					стДокументСкидка.Сумма = XMLЗначение(Тип("Число"),ЧтениеXML.Значение);
				ИначеЕсли ТекущийПуть = "Документ\Скидки\Скидка\УчтеноВСумме" Тогда
					стДокументСкидка.УчтеноВСумме = XMLЗначение(Тип("Булево"),ЧтениеXML.Значение);
					
					//Контрагент
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент\Ид" Тогда 
					стКонтрагент.Ид = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент\Наименование" Тогда 
					стКонтрагент.Наименование = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент\Роль" Тогда 
					стКонтрагент.Роль = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент\ПолноеНаименование" Тогда 
					стКонтрагент.ПолноеНаименование = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент\ПолноеНаименование2" Тогда 
					стКонтрагент.ПолноеНаименование2 = ЧтениеXML.Значение;		
					//Контрагент.АдресРегистрации
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент\АдресРегистрации\АдресноеПоле\Тип" Тогда 
					стАдресноеПоле.Тип = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент\АдресРегистрации\АдресноеПоле\Значение" Тогда 
					стАдресноеПоле.Значение = ЧтениеXML.Значение;					
					//Контрагент.Контакты
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент\Контакты\Контакт\Тип" Тогда 
					стКонтакт.Тип = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент\Контакты\Контакт\Значение" Тогда 
					стКонтакт.Значение = ЧтениеXML.Значение;
					
					//Товар
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\Ид" Тогда 
					стТовар.Ид = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\Артикул" Тогда 
					стТовар.Артикул = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\Наименование" Тогда 
					стТовар.Наименование = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\ЦенаЗаЕдиницу" Тогда 
					стТовар.ЦенаЗаЕдиницу = XMLЗначение(Тип("Число"),ЧтениеXML.Значение);
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\БазоваяЕдиница" Тогда 					
					стТовар.БазоваяЕдиница.Наименование = ЧтениеXML.Значение;					
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\Количество" Тогда 
					стТовар.Количество = XMLЗначение(Тип("Число"),ЧтениеXML.Значение);
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\Сумма" Тогда 
					стТовар.Сумма = XMLЗначение(Тип("Число"),ЧтениеXML.Значение);
					//Товар.Скидка
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\Скидки\Скидка\Сумма" Тогда
					стТоварСкидка.Сумма = XMLЗначение(Тип("Число"),ЧтениеXML.Значение);
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\Скидки\Скидка\УчтеноВСумме" Тогда
					стТоварСкидка.УчтеноВСумме = XMLЗначение(Тип("Булево"),ЧтениеXML.Значение);
					//Товар.ЗначениеРеквизита
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\ЗначенияРеквизитов\ЗначениеРеквизита\Наименование" Тогда
					стТоварЗначениеРеквизита.Наименование = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\ЗначенияРеквизитов\ЗначениеРеквизита\Значение" Тогда 
					стТоварЗначениеРеквизита.Значение = ЧтениеXML.Значение;
					//Товар.Кaтегория
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\Категории\Кaтегория\Ид" Тогда
					стТоварКaтегория.Ид = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\Категории\Кaтегория\Наименование" Тогда 
					стТоварКaтегория.Наименование = ЧтениеXML.Значение;
					//Товар.ДополнительнаяХарактеристика
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\ДополнительныеХарактеристики\ДополнительнаяХарактеристика\Ид" Тогда 
					стТоварДополнительнаяХарактеристика.Ид = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\ДополнительныеХарактеристики\ДополнительнаяХарактеристика\Наименование" Тогда 
					стТоварДополнительнаяХарактеристика.Наименование = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\ДополнительныеХарактеристики\ДополнительнаяХарактеристика\ЗначениеИд" Тогда 
					стТоварДополнительнаяХарактеристика.ЗначениеИд = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\ДополнительныеХарактеристики\ДополнительнаяХарактеристика\ЗначениеНаименование" Тогда 
					стТоварДополнительнаяХарактеристика.ЗначениеНаименование = ЧтениеXML.Значение;					
					
					//ЗначениеРеквизита
				ИначеЕсли ТекущийПуть = "Документ\ЗначенияРеквизитов\ЗначениеРеквизита\Наименование" Тогда
					стДокументЗначениеРеквизита.Наименование = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\ЗначенияРеквизитов\ЗначениеРеквизита\Значение" Тогда
					стДокументЗначениеРеквизита.Значение = ЧтениеXML.Значение;
					
					
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если ЧтениеXML.Имя = "КоммерческаяИнформация" Тогда 
					Прервать;	
				КонецЕсли;
				
				//Документ
				Если ТекущийПуть = "Документ" Тогда 
					мсРезультатРазборки.Добавить(стДокумент);
					
					//Скидка
				ИначеЕсли ТекущийПуть = "Документ\Скидки\Скидка" Тогда 
					стДокумент.Скидки.Добавить(стДокументСкидка);
					
					//Контрагент
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент" Тогда 
					стДокумент.Контрагенты.Добавить(стКонтрагент);
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент\АдресРегистрации\АдресноеПоле" Тогда 
					стКонтрагент.АдресРегистрации.Добавить(стАдресноеПоле);
				ИначеЕсли ТекущийПуть = "Документ\Контрагенты\Контрагент\Контакты\Контакт" Тогда 
					стКонтрагент.Контакты.Добавить(стКонтакт);				
					
					//Товар
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар" Тогда 
					стДокумент.Товары.Добавить(стТовар);
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\Скидки\Скидка" Тогда 
					стТовар.Скидки.Добавить(стТоварСкидка);
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\ЗначенияРеквизитов\ЗначениеРеквизита" Тогда 
					стТовар.ЗначенияРеквизитов.Добавить(стТоварЗначениеРеквизита);
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\Категории\Кaтегория" Тогда 
					стТовар.Категории.Добавить(стТоварКaтегория);
				ИначеЕсли ТекущийПуть = "Документ\Товары\Товар\ДополнительныеХарактеристики\ДополнительнаяХарактеристика" Тогда 
					стТовар.ДополнительныеХарактеристики.Добавить(стТоварДополнительнаяХарактеристика);
					
					
					//ЗначениеРеквизита
				ИначеЕсли ТекущийПуть = "Документ\ЗначенияРеквизитов\ЗначениеРеквизита" Тогда 
					стДокумент.ЗначенияРеквизитов.Добавить(стДокументЗначениеРеквизита);
					
					
				КонецЕсли;	
				
				СтекУзлов.Удалить(СтекУзлов.Количество()-1);
				ТекущийПуть = МассивВСтроку(СтекУзлов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка заказов. Ошибка: В результате разбора XML возникла ошибка." + Символы.ПС + ОО;		
		Возврат;
	КонецПопытки;
	
	стРезультат.Результат = стРезультат.Результат + "Загрузка заказов. Получено " + мсРезультатРазборки.Количество() + " документов";
	
	#КонецОбласти
	
	#Область ЗаписьЗаказов
	
	//Запись заказов
	
	мсЗаказыДляПроведения = Новый Массив; //"Запомнить" загруженные заказы и потом провести их
	
	//Отладка, сделать опционально
	//ЗагружатьИмеющиеся = Ложь; //Если заказ был загружен ранее он не перезагружается с сайта
	ЗагружатьИмеющиеся = Истина;
	ОтражатьНеФатальныеОшибки = Истина; //Отладка
	
	//ПараметрСклад = Справочники.Склады.НайтиПоНаименованию("Основной");
	
	Если УзелОбмена.Оптовый Тогда
		ВидЗаказаПоУмолчанию = Перечисления.ВидыЗаказовПокупателей.Оптовый;
		ПараметрСклад = Константы.ОптовыйСклад.Получить();
	Иначе
		ВидЗаказаПоУмолчанию = Перечисления.ВидыЗаказовПокупателей.Розничный;
		ПараметрСклад = Константы.РозничныйСклад.Получить();
	КонецЕсли;
	
	//Счетчики
	СчКоличествоДокументов = 0;
	СчКоличествоДокументовНовых = 0;
	
	Попытка
		
		Для Каждого стрДокумент ИЗ мсРезультатРазборки Цикл
			
			докЗаказ = Неопределено;
			
			//Извлечь ИДшники и найти док
			Разделитель = Найти(стрДокумент.Ид,"#");			
			Если Разделитель <> 0 Тогда
				
				IDНаСайте = Сред(стрДокумент.Ид, 1, Разделитель - 1);
				ДокСсылка = Сред(стрДокумент.Ид, Разделитель + 1, СтрДлина(стрДокумент.Ид) - Разделитель + 1);
				
				//Поиск по ссылке
				Если НЕ ПустаяСтрока(ДокСсылка) Тогда					
					
					Попытка
						докЗаказ = Документы.ЗаказПокупателя.ПолучитьСсылку(Новый УникальныйИдентификатор(ДокСсылка));			
					Исключение
					КонецПопытки;
					
					
					Если Найти(докЗаказ, "Объект не найден") > 0 Тогда						
						докЗаказ = Неопределено;						
					КонецЕсли;
					
				КонецЕсли;
				
				//Поиск по ИД
				Если НЕ ЗначениеЗаполнено(докЗаказ) Тогда					
					
					Попытка
						докЗаказ = Документы.ЗаказПокупателя.НайтиПоРеквизиту("IDНаСайте", Число(IDНаСайте));
					Исключение
					КонецПопытки;
					
				КонецЕсли;
				
			Иначе				
				IDНаСайте = стрДокумент.Ид;
				
				//Поиск по ИД
				Попытка
					докЗаказ = Документы.ЗаказПокупателя.НайтиПоРеквизиту("IDНаСайте", Число(IDНаСайте));
				Исключение
				КонецПопытки;
				
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(докЗаказ) Тогда 
				докЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
				НовыйЗаказ = Истина;
				СчКоличествоДокументовНовых = СчКоличествоДокументовНовых + 1;
			Иначе
				докЗаказ = докЗаказ.ПолучитьОбъект();
				НовыйЗаказ = Ложь;
			КонецЕсли;
			
			Если НЕ ЗагружатьИмеющиеся И НЕ НовыйЗаказ Тогда 
				Продолжить;
			КонецЕсли;
			
			Если НЕ НовыйЗаказ Тогда
				
				//Проверить регистрацию, если изменения были в 1С, то не загружать
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаказыИзменения.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.ЗаказПокупателя.Изменения КАК ЗаказыИзменения
				|ГДЕ
				|	ЗаказыИзменения.Ссылка = &Заказ";
				
				Запрос.УстановитьПараметр("Заказ", докЗаказ.Ссылка);
				РезультатЗапросаПроверки = Запрос.Выполнить();
				
				Если НЕ РезультатЗапросаПроверки.Пустой() Тогда
					
					стРезультат.Результат = стРезультат.Результат + Символы.ПС + "Заказ: " + докЗаказ.Номер +"#" + докЗаказ.IDНаСайте + ". Пропущен, т.к. был изменен в 1С.";
					Продолжить;
					
				КонецЕсли;			
				
			КонецЕсли;
			
			Если Не НовыйЗаказ И ТолькоОбновитьСтоимостьДоставки Тогда
				
				Для Каждого стрТовар ИЗ стрДокумент.Товары Цикл 					
					ЭтоДоставка = Лев(СокрЛП(стрТовар.Наименование),9) = "Доставка:"; 							
					Если ЭтоДоставка Тогда //Зафиксировать сумму доставки с сайта 
						Если докЗаказ.СтоимостьДоставкиССайта <> стрТовар.Сумма Тогда 
							докЗаказ.СтоимостьДоставкиССайта = стрТовар.Сумма;  					
							Если докЗаказ.СтоимостьДоставкиССайта > 0 Тогда
								докЗаказ.СтоимостьДоставки = докЗаказ.СтоимостьДоставкиССайта; 	
							КонецЕсли;
							докЗаказ.ОбменДанными.Загрузка = Истина;			
							докЗаказ.Записать();   								
							//Добавить в список проведения
							мсЗаказыДляПроведения.Добавить(докЗаказ.Ссылка);
							СчКоличествоДокументов = СчКоличествоДокументов + 1;  
							Прервать;  
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Продолжить;
				
			Иначе
				
				//"Ид,Номер,Дата,ХозОперация,Роль,Курс,Время,Валюта,Сумма,Комментарий,Контрагенты,Товары,ЗначенияРеквизитов"			
				докЗаказ.ДатаНаСайте = ПолучитьДатуВремяИзСтроки(стрДокумент.Дата, стрДокумент.Время);
				Если НовыйЗаказ Тогда  //При загузке даты одинаковые, но после оперативного проведения дата будет = текущей
					докЗаказ.Дата = докЗаказ.ДатаНаСайте;
					докЗаказ.УстановитьНовыйНомер();
				КонецЕсли;			
				докЗаказ.IDНаСайте = Число(IDНаСайте);
				докЗаказ.НомерЗаказаВнешний = стрДокумент.СвойНомер;
				докЗаказ.ВидЗаказа = ВидЗаказаПоУмолчанию;			
				докЗаказ.КомментарийПокупателя = стрДокумент.Комментарий;
				докЗаказ.ИдентификаторОтправки = стрДокумент.ИдентификаторОтправки;			
				докЗаказ.Склад = ПараметрСклад;
				
				//Контрагенты
				Для Каждого стрКонтрагент ИЗ стрДокумент.Контрагенты Цикл
					//докЗаказ.Контрагент = КонтрагентПоЗначению(стрКонтрагент.Ид); // пользователей всего 547
					докЗаказ.Контрагент = КонтрагентПоЗначениюССозданием(стрКонтрагент); //Отладка
					докЗаказ.ИмяУказанноеПриОформленииЗаказа = стрКонтрагент.ПолноеНаименование2; 
				КонецЦикла;
				
				//Товары
				докЗаказ.Услуги.Очистить();
				докЗаказ.Упаковка.Очистить();
				докЗаказ.Товары.Очистить();
				докЗаказ.Скидки.Очистить();
				
				ОшибкиНоменклатура = "";
				Для Каждого стрТовар ИЗ стрДокумент.Товары Цикл
					
					//"Ид,Артикул,Наименование,ЦенаЗаЕдиницу,БазоваяЕдиница,Количество,Сумма,ЗначенияРеквизитов,ХарактеристикиТовара"				
					Номенклатура = НоменклатураПоЗначению(стрТовар);
					
					ЭтоДоставка = Лев(СокрЛП(стрТовар.Наименование),9) = "Доставка:";
					
					Если НЕ ЗначениеЗаполнено(Номенклатура) И Не ЭтоДоставка Тогда //Отладка //Номенклатуры доставки нет, ее не выводить как ошибку
						ОшибкиНоменклатура = ОшибкиНоменклатура + Символы.ПС + "Не найден товар. ИД:" + стрТовар.Ид + ", наименование:" + стрТовар.Наименование;					
					КонецЕсли;
					
					///!!!!!!! Здесь в зависимости от номенклатуры добавлять в услуги товар или упаковку
					Если ЭтоДоставка Тогда //Зафиксировать сумму доставки с сайта
						
						докЗаказ.СтоимостьДоставкиССайта = стрТовар.Сумма;
						Если докЗаказ.СтоимостьДоставкиССайта > 0 Тогда
							докЗаказ.СтоимостьДоставки = докЗаказ.СтоимостьДоставкиССайта; 	
						КонецЕсли;
						
					Иначе
						
						Если Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар Тогда 
							
							нСтрока = докЗаказ.Товары.Добавить();				
							нСтрока.Номенклатура = Номенклатура;				
							нСтрока.ЕдиницаИзмерения = ЕдиницаИзмеренияПоЗначению(стрТовар.БазоваяЕдиница);
							нСтрока.Количество = стрТовар.Количество;
							нСтрока.Цена = стрТовар.ЦенаЗаЕдиницу;					
							нСтрока.Сумма = стрТовар.Сумма;
							
							
							Сумма = нСтрока.Сумма; //Сумма до скидки
							
							Если ТипЗнч(стрТовар.Скидки) = Тип("Массив") Тогда //не всегда есть скидка
								Для Каждого стрСкидка Из стрТовар.Скидки Цикл
									
									нСтрока.СуммаСкидки = нСтрока.СуммаСкидки + стрСкидка.Сумма;
									
									Если стрСкидка.УчтеноВСумме = Ложь Тогда //вычесть из суммы
										
										Сумма = Сумма - стрСкидка.Сумма;
										
									КонецЕсли;
									
									нСтрокаСкидкаТовар = докЗаказ.Скидки.Добавить();
									нСтрокаСкидкаТовар.НазначениеСкидки = нСтрока.Номенклатура;
									нСтрокаСкидкаТовар.СуммаСкидки = нСтрока.СуммаСкидки;
									нСтрокаСкидкаТовар.ПроцентСкидки = 0;
									нСтрокаСкидкаТовар.Сумма = нСтрока.СуммаСкидки;
									
								КонецЦикла;
							КонецЕсли;
							
							нСтрока.СуммаСоСкидкой = Сумма; //Если была скидка, то сумма со скидкой
							
							//нСтрока.ЦенаЗакупки = Неопределено; //Находить по товару				
							//нСтрока.Ключ = Неопределено;				
							
							//нСтрока.СуммаСкидки = Неопределено; //Получать с сайта	
							
						КонецЕсли;
						
						//ТОЛЬКО ТОВАРЫ!!!!
						//////ИначеЕсли Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Услуга Тогда
						//////	
						//////	нСтрока = докЗаказ.Услуги.Добавить();
						//////	нСтрока.Номенклатура = Номенклатура;
						//////	нСтрока.Количество = стрТовар.Количество;
						//////	нСтрока.Цена = стрТовар.ЦенаЗаЕдиницу;
						//////	нСтрока.Сумма = стрТовар.Сумма;					
						//////	
						//////ИначеЕсли Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Упаковка Тогда
						//////	
						//////	нСтрока = докЗаказ.Упаковка.Добавить();
						//////	нСтрока.Номенклатура = Номенклатура;
						//////	нСтрока.Количество = стрТовар.Количество;
						//////	нСтрока.Цена = стрТовар.ЦенаЗаЕдиницу;
						//////	нСтрока.Сумма = стрТовар.Сумма;
						//////	
						//////	//нСтрока.ЦенаЗакупки = Неопределено; //Находить по товару					
						
					КонецЕсли;
					
				КонецЦикла;
				
				//ЗначенияРеквизитов
				Если стрДокумент.ЗначенияРеквизитов = Неопределено Тогда 
					докЗаказ.Статус = Неопределено;
					докЗаказ.СпособДоставки = Неопределено;
					докЗаказ.МетодОплаты = Неопределено;
				Иначе 
					
					Для Каждого стрЗначениеРеквизита ИЗ стрДокумент.ЗначенияРеквизитов Цикл
						
						Если стрЗначениеРеквизита.Наименование = "Статус заказа" Тогда
							докЗаказ.Статус = СтатусПоЗначению(стрЗначениеРеквизита.Значение);
						ИначеЕсли стрЗначениеРеквизита.Наименование = "Способ доставки" Тогда
							докЗаказ.СпособДоставки = СпособДоставкиПоЗначению(стрЗначениеРеквизита.Значение);
						ИначеЕсли стрЗначениеРеквизита.Наименование = "Метод оплаты" Тогда					
							докЗаказ.МетодОплаты = МетодОплатыПоЗначению(стрЗначениеРеквизита.Значение);				
						ИначеЕсли стрЗначениеРеквизита.Наименование = "Отменен" И стрЗначениеРеквизита.Значение = "true" Тогда					
							докЗаказ.Статус = Справочники.СтатусыЗаказов.Отменен;	
						ИначеЕсли стрЗначениеРеквизита.Наименование = "Расходы на доставку" Тогда					
							докЗаказ.СтоимостьДоставки = стрЗначениеРеквизита.Значение;	
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				//Скидки
				докЗаказ.СуммаСкидки = 0;
				ДокументСумма = стрДокумент.Сумма; //Сумма до скидки
				
				Если ТипЗнч(стрДокумент.Скидки) = Тип("Массив") Тогда //не всегда есть скидка
					Для Каждого стрСкидка Из стрДокумент.Скидки Цикл
						
						докЗаказ.СуммаСкидки = докЗаказ.СуммаСкидки + стрСкидка.Сумма;					
						докЗаказ.СуммаСкидкиССайта = докЗаказ.СуммаСкидки;
						
						Если стрСкидка.УчтеноВСумме = Ложь Тогда //вычесть из суммы
							
							ДокументСумма = ДокументСумма - стрСкидка.Сумма;
							
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;			
				
				докЗаказ.СкидкаВсего = докЗаказ.СуммаСкидки + докЗаказ.Скидки.Итог("Сумма");
				
				докЗаказ.СуммаДокумента = ДокументСумма; //Сумма со скидкой, если была
				
				Если НовыйЗаказ И докЗаказ.СтоимостьДоставки = 0 Тогда //Заполнить стоимость доставки
					
					//Запрос = Новый Запрос;
					//Запрос.Текст =
					//"ВЫБРАТЬ
					//|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
					//|ПОМЕСТИТЬ вт
					//|ИЗ
					//|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &СпособДоставки) КАК ЦеныНоменклатурыСрезПоследних
					//|;
					//|
					//|////////////////////////////////////////////////////////////////////////////////
					//|ВЫБРАТЬ ПЕРВЫЕ 1
					//|	вт.Цена КАК Цена
					//|ИЗ
					//|	вт КАК вт";
					//Запрос.УстановитьПараметр("СпособДоставки", докЗаказ.СпособДоставки);
					//Запрос.УстановитьПараметр("Дата", докЗаказ.ДатаНаСайте);
					//ВыборкаСтоимостьДоставки = Запрос.Выполнить().Выбрать();
					//
					//Пока ВыборкаСтоимостьДоставки.Следующий() Цикл 
					//	докЗаказ.СтоимостьДоставки = ВыборкаСтоимостьДоставки.Цена;
					//КонецЦикла;
					
					//Выгружать в 1с стоимость доставки и всего заказ из CMS
					//Если докЗаказ.СтоимостьДоставкиССайта = 0 Тогда //С сайта не пришла стоимость доставки 
					//	докЗаказ.СтоимостьДоставкиССайта = докЗаказ.СтоимостьДоставки;
					//КонецЕсли;
					//
					//Если докЗаказ.СуммаДокумента >= 10000 Тогда //Если сумма свяше 10000, то сумма доставки д/быть равна 0
					//	докЗаказ.СтоимостьДоставкиССайта = 0;	
					//КонецЕсли;
					
				КонецЕсли;
				
				
				
				//пусть статус будет пустым, значит нет такого в списке
				//Если НЕ ЗначениеЗаполнено(докЗаказ.Статус) Тогда
				//	докЗаказ.Статус = Справочники.СтатусыЗаказов.Новый;
				//КонецЕсли;
				
				//докЗаказ.WebСсылка = Неопределено;
				//докЗаказ.Автор = Неопределено;			
				//докЗаказ.ДатаИзменения = Неопределено;
				//докЗаказ.ДатаОплаты = Неопределено;
				//докЗаказ.ЗамененныеПозиции = Неопределено;
				//
				//докЗаказ.КомментарийПокупателя = Неопределено;
				//докЗаказ.Контрагент = Неопределено;
				//докЗаказ.МетодОплаты = Неопределено;
				//докЗаказ.Номер = Неопределено;
				//докЗаказ.НомерЗаказаВнешний = Неопределено;
				//докЗаказ.Проведен = Неопределено;
				//докЗаказ.ПроцентСкидки = Неопределено;
				//
				//
				//докЗаказ.СуммаДополнительныхРасходов = Неопределено;
				//
				//докЗаказ.СуммаУслуг = Неопределено;
				//
				//докЗаказ.ТранспортнаяКомпания = Неопределено;
				
				докЗаказ.ОбменДанными.Загрузка = Истина;			
				докЗаказ.Записать();
				
				//Добавить в список проведения
				мсЗаказыДляПроведения.Добавить(докЗаказ.Ссылка);
				
				//ЮРР 22.04.2017 17:20:49 Зарезервировать если еще не был зарезервирован //Сделал регламентно
				//Если докЗаказ.Статус.ТоварРезервируется Тогда 
				//	РезультатРезервирования = "";
				//	Документы.ЗаказПокупателя.ЗарезервироватьТовар(докЗаказ, РезультатРезервирования);
				//	стРезультат.Результат = стРезультат.Результат + Символы.ПС + РезультатРезервирования;
				//КонецЕсли;
				
				СчКоличествоДокументов = СчКоличествоДокументов + 1;
				
				//Добавить отладочной информации
				Если ОтражатьНеФатальныеОшибки = Истина И докЗаказ.Статус <> Справочники.СтатусыЗаказов.Отменен Тогда 
					
					//Не найден контрагент
					Если НЕ ЗначениеЗаполнено(докЗаказ.Контрагент) Тогда 
						стРезультат.Результат = стРезультат.Результат + Символы.ПС + "Заказ: " + докЗаказ.Номер +"#" + докЗаказ.IDНаСайте + ". Не определен контрагент!";
					КонецЕсли;
					
					//Не определен метод оплаты
					Если НЕ ЗначениеЗаполнено(докЗаказ.МетодОплаты) Тогда 
						стРезультат.Результат = стРезультат.Результат + Символы.ПС + "Заказ: " + докЗаказ.Номер +"#" + докЗаказ.IDНаСайте + ". Не определен метод оплаты!";	
					КонецЕсли;
					
					//Не определен способ доставки
					Если НЕ ЗначениеЗаполнено(докЗаказ.СпособДоставки) Тогда 
						стРезультат.Результат = стРезультат.Результат + Символы.ПС + "Заказ: " + докЗаказ.Номер +"#" + докЗаказ.IDНаСайте + ". Не определен способ доставки!";	
					КонецЕсли;
					
					//Ошибки возникшие с товаром
					Если ЗначениеЗаполнено(ОшибкиНоменклатура) Тогда 
						стРезультат.Результат = стРезультат.Результат + Символы.ПС + "Заказ: " + докЗаказ.Номер +"#" + докЗаказ.IDНаСайте + ". " + ОшибкиНоменклатура;	
					КонецЕсли;
					
				КонецЕсли;
				
				
				
			КонецЕсли; 			
			
		КонецЦикла;
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка заказов. Ошибка: В результате записи заказов возникла ошибка." + Символы.ПС + ОО;		
		Возврат;
	КонецПопытки;
	
	#КонецОбласти	
	
	//Успешное завершение импорта
	Если ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //!!!Отправлять на сайт "Успех" только в случает корректной загрузки заказов
		Возврат 		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайлаОбмена) Тогда
		
		ПараметрыСоединения.АдресСкриптаПараметры = "?type=sale&mode=success&setdate=" + Формат(пВремяОбмена, "ДФ='dd.MM.yyyy H:m'"); //02.05.2017 16:41 //http://<сайт>/<путь> /1c_exchange.php?type=sale&mode=success
		
		//Ожидается пустой ответ
		стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
		
		Если стОтветСервера.Ошибки <> "Получение данных с сайта: Получен пустой ответ." Тогда
			стРезультат.Ошибки = стОтветСервера.Ошибки;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//Теперь проведем загруженные заказы
	Для Каждого ЗаказСсылка Из мсЗаказыДляПроведения Цикл
		
		ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();
		Попытка
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОО = ОписаниеОшибки();
			стРезультат.Результат = стРезультат.Результат + Символы.ПС + ЗаказОбъект + ". Не проведен!" + Символы.ПС + ОО;		
		КонецПопытки;
		
	КонецЦикла;
	
	стРезультат.Результат = стРезультат.Результат + Символы.ПС + "Обработано: " + СчКоличествоДокументов + " документов из них новых: " + СчКоличествоДокументовНовых;
	
КонецПроцедуры

Процедура ВыгрузитьЗаказы(стРезультат) Экспорт
	
	стРезультат = Новый Структура("Результат,Ошибки");
	стРезультат.Результат = "";
	стРезультат.Ошибки = Неопределено; //Нет ошибок
	
	Если НЕ УзелОбмена.ВыгружатьЗаказы Тогда 
		стРезультат.Ошибки = "Не активирован флаг ""Выгружать заказы"" в плане обмена.";
		Возврат;		
	КонецЕсли;
	
	//Получить заказы к выгрузке
	СтруктураИзменений = ПолучитьСтруктуруИзмененийДляУзла(УзелОбмена);		
	Если СтруктураИзменений.Заказы.Количество() = 0 Тогда //Если нет изменений
		стРезультат.Результат = "Выгрузка заказов. Нет изменений к выгрузке.";
		Возврат;		
	КонецЕсли;
	
	
	ПараметрыСоединения = ПолучитьПараметрыСоединения();	
	стСоединение = ПолучитьСоединение(ПараметрыСоединения);	
	Если ЗначениеЗаполнено(стСоединение.Ошибки) Тогда //Обработка ошибок
		стРезультат.Ошибки = стСоединение.Ошибки;
		Возврат;		
	КонецЕсли;
	
	
	//Авторизация
	HTTPВыполнитьАвторизацию(стСоединение.Соединение, ПараметрыСоединения, стРезультат);	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ЗаголовкиЗапросовCookie) ИЛИ ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //Авторизация не выполнена 
		Возврат;
	КонецЕсли;
	
	#Область ПолучитьПараметрыВыгрузки
	
	//Получить параметры выгрузки
	ПараметрыСоединения.АдресСкриптаПараметры = "?type=sale&mode=init"; //http://<сайт>/<путь> /1c_exchange.php?type=sale&mode=init	
	//Ожидается 2 строки zip=yes/no \n file_limit=1000000
	стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
	
	Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
		стРезультат.Ошибки = стОтветСервера.Ошибки;
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоСтрок(стОтветСервера.ОтветСервера) <> 2 Тогда		
		стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ответ с сайта не содержит количество ожидаемых строк.";
		Возврат;
	КонецЕсли;
	
	Если НЕ (СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPРазрешен
		ИЛИ СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPЗапрещен) Тогда //Проверить первую строку д/быть zip=no или zip=yes
		стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ответ с сайта не содержит допустимых параметров.";
		Возврат;		
	КонецЕсли;
	
	ZIPФайлыРазрешены = СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPРазрешен;
	ОграничениеРазмераФрагментаФайлаОбмена = 0;
	
	Попытка		
		ОграничениеРазмераФрагментаФайлаОбмена = Число(СтрЗаменить(СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 2))),
		ПараметрыСоединения.ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена, "")); //file_limit= вырезать		
	Исключение		 		
		стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ошибка получения параметров обмена (ограничение размера файла).";
		ОграничениеРазмераФрагментаФайлаОбмена = -1;
		//Возврат; Не критичная ошибка
	КонецПопытки;
	
	ОграничениеРазмераФрагментаФайлаОбмена = -1; //ЮРР 05.04.2017 10:52:31 На данный момент не поддерживается сайтом
	
	#КонецОбласти	
	
	
	//Выгрузить данные в файл
	//КаталогВыгрузки = КаталогВременныхФайлов() + "\" + "webdata - " + УзелОбмена.УникальныйИдентификатор();
	КаталогВыгрузки = КаталогВременныхФайлов() + "webdata\";
	
	Попытка		
		СоздатьКаталог(КаталогВыгрузки);
		УдалитьФайлы(КаталогВыгрузки, "*.*"); //очистить
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка заказов. Ошибка: Ошибка при создании временного каталога для выгрузки данных." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	//ИмяФайлаОбмена = КаталогВыгрузки + "\orders-" + Строка(Новый УникальныйИдентификатор) + ".xml";
	ИмяФайлаОбмена = КаталогВыгрузки + "sale.xml";
	
	#Область ЗаписьXML
	
	//Запись данных в файл
	Попытка
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаОбмена, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("КоммерческаяИнформация");
		ЗаписьXML.ЗаписатьАтрибут("ВерсияСхемы","2.04");
		ЗаписьXML.ЗаписатьАтрибут("ДатаФормирования",Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"));
		
		счДокКоличествоВыгружено = 0;
		
		Для Каждого Документ ИЗ СтруктураИзменений.Заказы Цикл
			
			//Документ = Документы.ЗаказПокупателя.СоздатьДокумент();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
			
			Ид = "" + ?(ЗначениеЗаполнено(Документ.IDНаСайте), Формат(Документ.IDНаСайте,"ЧГ=0"), "") + "#" + XMLСтрока(Документ.Ссылка); //в формате ID_сайта#Ссылка
			Номер = ?(ЗначениеЗаполнено(Документ.IDНаСайте), Формат(Документ.IDНаСайте,"ЧГ=0"), "");
			
			ЗаписатьXML(ЗаписьXML,	Ид,										"Ид",		НазначениеТипаXML.Неявное);
			ЗаписатьXML(ЗаписьXML,	Номер,									"Номер",	НазначениеТипаXML.Неявное);
			ЗаписатьXML(ЗаписьXML,	Формат(Документ.Дата,"ДФ=yyyy-MM-dd"),	"Дата",		НазначениеТипаXML.Неявное);
			ЗаписатьXML(ЗаписьXML,	Формат(Документ.Дата,"ДЛФ=T"),			"Время",	НазначениеТипаXML.Неявное);
			ЗаписатьXML(ЗаписьXML,	Документ.СуммаДокумента,				"Сумма",	НазначениеТипаXML.Неявное);
			ЗаписатьXML(ЗаписьXML,	Документ.ИдентификаторОтправки,			"ИдентификаторОтправки",	НазначениеТипаXML.Неявное);
			
			//ЗначенияРеквизитов
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЗначенияРеквизитов");
			
			//Проведен
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ЗаписатьXML(ЗаписьXML,	"Проведен",	"Наименование",	НазначениеТипаXML.Неявное);
			ЗаписатьXML(ЗаписьXML,	?(Документ.Проведен, "true", "false"),	"Значение",	НазначениеТипаXML.Неявное);		
			ЗаписьXML.ЗаписатьКонецЭлемента(); //ЗначениеРеквизита
			
			//Проведен
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ЗаписатьXML(ЗаписьXML,	"ПометкаУдаления",	"Наименование",	НазначениеТипаXML.Неявное);
			ЗаписатьXML(ЗаписьXML,	?(Документ.ПометкаУдаления, "true", "false"),	"Значение",	НазначениеТипаXML.Неявное);		
			ЗаписьXML.ЗаписатьКонецЭлемента(); //ЗначениеРеквизита
			
			//Статус заказа
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ЗаписатьXML(ЗаписьXML,	"Статус заказа",	"Наименование",	НазначениеТипаXML.Неявное);
			СтатусИД = "" + ?(ЗначениеЗаполнено(Документ.Статус.IDНаСайте), Формат(Документ.Статус.IDНаСайте,"ЧГ=0"), "") + "#" + Документ.Статус.Наименование; //в формате ID_сайта#Ссылка
			ЗаписатьXML(ЗаписьXML,	СтатусИД,	"Значение",	НазначениеТипаXML.Неявное);		
			ЗаписьXML.ЗаписатьКонецЭлемента(); //ЗначениеРеквизита
			
			//Способ доставки
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ЗаписатьXML(ЗаписьXML,	"Способ доставки",	"Наименование",	НазначениеТипаXML.Неявное);
			СпособДоставкиИД = "" + ?(ЗначениеЗаполнено(Документ.СпособДоставки.IDНаСайте), Формат(Документ.СпособДоставки.IDНаСайте,"ЧГ=0"), "") + "#" + Документ.СпособДоставки.Наименование; //в формате ID_сайта#Ссылка
			ЗаписатьXML(ЗаписьXML,	СпособДоставкиИД,	"Значение",	НазначениеТипаXML.Неявное);		
			ЗаписьXML.ЗаписатьКонецЭлемента(); //ЗначениеРеквизита
			
			//Метод оплаты
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЗначениеРеквизита");
			ЗаписатьXML(ЗаписьXML,	"Метод оплаты",	"Наименование",	НазначениеТипаXML.Неявное);
			МетодОплатыИД = "" + ?(ЗначениеЗаполнено(Документ.МетодОплаты.IDНаСайте), Формат(Документ.МетодОплаты.IDНаСайте,"ЧГ=0"), "") + "#" + Документ.МетодОплаты.Наименование; //в формате ID_сайта#Ссылка
			ЗаписатьXML(ЗаписьXML,	МетодОплатыИД,	"Значение",	НазначениеТипаXML.Неявное);		
			ЗаписьXML.ЗаписатьКонецЭлемента(); //ЗначениеРеквизита

			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //ЗначенияРеквизитов
			
			//Товары
			ЗаписьXML.ЗаписатьНачалоЭлемента("Товары");
			
			Для Каждого Товар ИЗ Документ.Товары Цикл
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Товар");
				
				//Проверка. если товар не был выгружен/загружен на сайт/с сайта, то он не иммет IDНаСайте				
				Если НЕ ЗначениеЗаполнено(Товар.Номенклатура.IDНаСайте) Тогда
					Справочники.Номенклатура.ЗарегистрироватьВПО(Товар.Номенклатура.Ссылка);
					ВызватьИсключение "Товар не был выгружен на сайт." + Товар.Номенклатура;					
				КонецЕсли;
				
				Ид = "" + ?(ЗначениеЗаполнено(Товар.Номенклатура.IDНаСайте), Формат(Товар.Номенклатура.IDНаСайте,"ЧГ=0"), "") + "#" + XMLСтрока(Товар.Номенклатура.Ссылка); //в формате ID_сайта#Ссылка
				
				ЗаписатьXML(ЗаписьXML,	Ид,		"Ид",				НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML,	Товар.Номенклатура.Артикул,			"Артикул",			НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML,	Товар.Номенклатура.Наименование,	"Наименование",		НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML,	Товар.Количество,					"Количество",		НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML,	Товар.Цена,							"ЦенаЗаЕдиницу",	НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML,	Товар.Сумма,						"Сумма",	НазначениеТипаXML.Неявное);
				
				//Скидки
				Если Товар.ПроцентСкидкиНаценки <> 0 Тогда
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Скидки");
					
					//Скидка
					ЗаписьXML.ЗаписатьНачалоЭлемента("Скидка");
					ЗаписатьXML(ЗаписьXML,	Товар.ПроцентСкидкиНаценки,	"Процент",	НазначениеТипаXML.Неявное);			
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Скидка
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Скидки
					
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); //Товар
				
			КонецЦикла;		
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Товары
			
			
			//Контрагенты
			ЗаписьXML.ЗаписатьНачалоЭлемента("Контрагенты");			
			
				ЗаписьXML.ЗаписатьНачалоЭлемента("Контрагент");
				
					//Проверка. если элемент не был выгружен/загружен на сайт/с сайта, то он не иммет IDНаСайте				
					Если НЕ ЗначениеЗаполнено(Документ.Контрагент.IDНаСайте) Тогда
						Справочники.Контрагенты.ЗарегистрироватьВПО(Документ.Контрагент);
						//ВызватьИсключение "Пользователь не был выгружен на сайт." + Документ.Контрагент;					
					КонецЕсли;
				
					КонтрагентИд = "" + ?(ЗначениеЗаполнено(Документ.Контрагент.IDНаСайте), Формат(Документ.Контрагент.IDНаСайте,"ЧГ=0"), "") + "#" + XMLСтрока(Документ.Контрагент.Ссылка);
					ЗаписатьXML(ЗаписьXML,	КонтрагентИд,	"Ид",	НазначениеТипаXML.Неявное);
					ЗаписатьXML(ЗаписьXML,	Документ.Контрагент.Наименование,	"Наименование",	НазначениеТипаXML.Неявное);
					
				ЗаписьXML.ЗаписатьКонецЭлемента(); //Контрагент				
				
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Контрагенты
			
			
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Документ
			
			счДокКоличествоВыгружено = счДокКоличествоВыгружено + 1;
			
		КонецЦикла;	
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //КоммерческаяИнформация
		
		ЗаписьXML.Закрыть();
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка заказов. Ошибка: При записи данных в файл возникла ошибка." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	#КонецОбласти
	
	//Сжать при необходимости и разделить на части при превышении размера	
	Если ZIPФайлыРазрешены Тогда
		
		ИмяФайлаОбменаАрхив = КаталогВыгрузки + "sale.zip";
		ЗаписьАрхива = Новый ЗаписьZipФайла(ИмяФайлаОбменаАрхив);		
		ЗаписьАрхива.Добавить(ИмяФайлаОбмена);
		
		Попытка
			ЗаписьАрхива.Записать();
			ИмяФайлаОбмена = ИмяФайлаОбменаАрхив;
		Исключение
			ОО = ОписаниеОшибки();
			стРезультат.Ошибки = "Выгрузка заказов. Ошибка: Не удалось записать zip-архив." + Символы.ПС + ОО;
			Возврат;		
		КонецПопытки;
		
	КонецЕсли;
	
	мсФайлыДляОтправки = Новый Массив;
	Если ОграничениеРазмераФрагментаФайлаОбмена > 0 Тогда		
		мсФайлыДляОтправки = РазделитьФайлНаФрагменты(ИмяФайлаОбмена,ОграничениеРазмераФрагментаФайлаОбмена);		
	Иначе
		мсФайлыДляОтправки.Добавить(ИмяФайлаОбмена);
	КонецЕсли;
	
	//Отправить на сервер
	Для Каждого ФайлДляОтправки Из мсФайлыДляОтправки Цикл 
		
		ПараметрыСоединения.АдресСкриптаПараметры = "?type=sale&mode=file&filename=" + ПолучитьИмяФайлаИзПолногоПути(ФайлДляОтправки); //http://<сайт>/<путь> /1c_exchange.php?type=sale&mode=file&filename=<имя файла>
		
		//Ожидается 1 строка "success"
		стРезультатОтправки = HTTPОтправитьФайлНаСервер(стСоединение.Соединение, ПараметрыСоединения, ФайлДляОтправки);
		
		Если ЗначениеЗаполнено(стРезультатОтправки.Ошибки) Тогда
			стРезультат.Ошибки = стРезультатОтправки.Ошибки;
			Возврат;
		КонецЕсли;
		
		Если стРезультатОтправки.ОтветСервера <> "success" Тогда
			стРезультат.Ошибки = "Выгрузка заказов. Ошибка не получен ответ ""success"" от сервера.";
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	//Грохнуть временные файлы
	Попытка	
		УдалитьФайлы(КаталогВыгрузки)
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка заказов. Ошибка: Ошибка при удалении временного каталога для выгрузки данных." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	//Очистить регистрацию
	Для Каждого Документ ИЗ СтруктураИзменений.Заказы Цикл		
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Документ);		
	КонецЦикла;
	
	стРезультат.Результат = стРезультат.Результат + "Выгрузка заказов. Успешно. К выгрузке " + СтруктураИзменений.Заказы.Количество() + ", выгружено " + счДокКоличествоВыгружено;
	
КонецПроцедуры

Процедура ВыгрузитьКлассификаторИКаталог(стРезультат) Экспорт
	
	стРезультат = Новый Структура("Результат,Ошибки");
	стРезультат.Результат = "";
	стРезультат.Ошибки = Неопределено; //Нет ошибок
	
	Если НЕ УзелОбмена.ВыгружатьТовары Тогда 
		стРезультат.Ошибки = "Не активирован флаг ""Выгружать товары"" в плане обмена.";
		Возврат;		
	КонецЕсли;
	
	//Получить объекты к выгрузке
	СтруктураИзменений = ПолучитьСтруктуруИзмененийДляУзла(УзелОбмена);		
	Если СтруктураИзменений.Товары.Количество() = 0 И СтруктураИзменений.ОстаткиЦены.Количество() = 0 Тогда //Если нет изменений
		стРезультат.Результат = "Выгрузка каталога. Нет изменений к выгрузке.";
		Возврат;		
	КонецЕсли;
	
	
	ПараметрыСоединения = ПолучитьПараметрыСоединения();	
	стСоединение = ПолучитьСоединение(ПараметрыСоединения);	
	Если ЗначениеЗаполнено(стСоединение.Ошибки) Тогда //Обработка ошибок
		стРезультат.Ошибки = стСоединение.Ошибки;
		Возврат;		
	КонецЕсли;
	
	
	//Авторизация
	HTTPВыполнитьАвторизацию(стСоединение.Соединение, ПараметрыСоединения, стРезультат);	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ЗаголовкиЗапросовCookie) ИЛИ ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //Авторизация не выполнена 
		Возврат;
	КонецЕсли;
	
	#Область ПолучитьПараметрыВыгрузки
	
	//Получить параметры выгрузки
	ПараметрыСоединения.АдресСкриптаПараметры = "?type=catalog&mode=init"; //http://<сайт>/<путь> /1c_exchange.php?type=catalog&mode=init	
	//Ожидается 2 строки zip=yes/no \n file_limit=1000000
	стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
	
	Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
		стРезультат.Ошибки = стОтветСервера.Ошибки;
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоСтрок(стОтветСервера.ОтветСервера) <> 2 Тогда		
		стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ответ с сайта не содержит количество ожидаемых строк.";
		Возврат;
	КонецЕсли;
	
	Если НЕ (СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPРазрешен
		ИЛИ СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPЗапрещен) Тогда //Проверить первую строку д/быть zip=no или zip=yes
		стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ответ с сайта не содержит допустимых параметров.";
		Возврат;		
	КонецЕсли;
	
	ZIPФайлыРазрешены = СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPРазрешен;
	ОграничениеРазмераФрагментаФайлаОбмена = 0;
	
	Попытка		
		ОграничениеРазмераФрагментаФайлаОбмена = Число(СтрЗаменить(СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 2))),
		ПараметрыСоединения.ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена, "")); //file_limit= вырезать		
	Исключение		 		
		стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ошибка получения параметров обмена (ограничение размера файла).";
		ОграничениеРазмераФрагментаФайлаОбмена = -1;
		//Возврат; Не критичная ошибка
	КонецПопытки;
	
	ОграничениеРазмераФрагментаФайлаОбмена = -1; //ЮРР 05.04.2017 10:52:31 На данный момент не поддерживается сайтом
	
	#КонецОбласти	
	
	
	//Выгрузить данные в файл
	мсФайлыДляОтправки = Новый Массив;
	
	КаталогВыгрузки = КаталогВременныхФайлов() + "webdata\";
	
	Попытка		
		СоздатьКаталог(КаталогВыгрузки);
		УдалитьФайлы(КаталогВыгрузки, "*.*"); //очистить
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка каталога. Ошибка: Ошибка при создании временного каталога для выгрузки данных." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	ИмяФайлаОбмена = КаталогВыгрузки + "catalog.xml";
	
	
	#Область ЗаписьXML
	
	КаталогВыгружатьСвойства = Ложь; //На сайте сперва обрабатывается каталог//потом возможные свойства/параметры товаров//потом уже сами товары, причем возможные параметры беруться из кеша загруженного ранее и получается перезатирование списочных параметров
	
	//Запись данных в файл
	счТоварыКоличествоВыгружено = 0;
	счКлассификаторКоличествоВыгружено = 0;
	счПакетПредложенийКоличествоВыгружено = 0;	
	
	Попытка
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаОбмена, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("КоммерческаяИнформация");
		ЗаписьXML.ЗаписатьАтрибут("ВерсияСхемы","2.04");
		ЗаписьXML.ЗаписатьАтрибут("ДатаФормирования",Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"));
		
		//Классификаторы (КатегорииТоваров+Характиристики товаров)
		
		//Каталог
		Если СтруктураИзменений.Товары.Количество() > 0 Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Каталог");
			ЗаписьXML.ЗаписатьНачалоЭлемента("Товары");
			
			Для Каждого Товар ИЗ СтруктураИзменений.Товары Цикл
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Товар");
				
				//Товар = Справочники.Номенклатура.СоздатьЭлемент();
				
				Если ЗначениеЗаполнено(Товар.IDНаСайте) Тогда 				
					ЗаписатьXML(ЗаписьXML,	"" + Товар.IDНаСайте + "#" + XMLСтрока(Товар.Ссылка),	"Ид",	НазначениеТипаXML.Неявное);
				Иначе
					ЗаписатьXML(ЗаписьXML,	XMLСтрока(Товар.Ссылка),	"Ид",	НазначениеТипаXML.Неявное);
				КонецЕсли;
				ЗаписатьXML(ЗаписьXML,	Товар.Наименование,						"Наименование",		НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML,	Товар.Артикул,							"Артикул",			НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML,	Товар.ЕдиницаИзмерения.Наименование,	"БазоваяЕдиница",	НазначениеТипаXML.Неявное);
				
				//ЗначенияСвойств
				Если Товар.ДополнительныеРеквизиты.Количество() > 0 И КаталогВыгружатьСвойства = Истина Тогда 
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("ЗначенияСвойств");
					
					Для Каждого Строка Из Товар.ДополнительныеРеквизиты Цикл
						
						Если НЕ ЗначениеЗаполнено(Строка.Свойство) Тогда
							Продолжить;
						КонецЕсли;
						
						ЗаписьXML.ЗаписатьНачалоЭлемента("ЗначенияСвойства");
						
						ЗаписатьXML(ЗаписьXML,	Строка.Свойство.IDНаСайте,		"Ид",			НазначениеТипаXML.Неявное);
						ЗаписатьXML(ЗаписьXML,	Строка.Свойство.Наименование,	"Наименование",	НазначениеТипаXML.Неявное);						
						
						Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
						    ЗаписатьXML(ЗаписьXML,	"",			"Значение",	НазначениеТипаXML.Неявное);
						ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Строка") ИЛИ ТипЗнч(Строка.Значение) = Тип("Число") Тогда
							ЗаписатьXML(ЗаписьXML,	Строка.Значение,			"Значение",	НазначениеТипаXML.Неявное);
						ИначеЕсли ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.ДополнительныеЗначенияРеквизитов") Тогда
							ЗаписатьXML(ЗаписьXML,	Строка.Значение.Наименование,		"ЗначениеНаименование",	НазначениеТипаXML.Неявное);
							ЗаписатьXML(ЗаписьXML,	Строка.Значение.IDНаСайте,			"Значение",	НазначениеТипаXML.Неявное);
						КонецЕсли;
						
						ЗаписьXML.ЗаписатьКонецЭлемента(); //ЗначенияСвойства						
						
					КонецЦикла;
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //ЗначенияСвойств
					
				КонецЕсли;
				
				//Категория товара
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	МАКСИМУМ(ТоварыПоКатегориям.Категория.IDНаСайте) КАК КатегорияIDНаСайте
				|ИЗ
				|	РегистрСведений.ТоварыПоКатегориям КАК ТоварыПоКатегориям
				|ГДЕ
				|	ТоварыПоКатегориям.Номенклатура = &Номенклатура";				
				Запрос.УстановитьПараметр("Номенклатура", Товар.Ссылка);				
				РезультатЗапроса = Запрос.Выполнить();				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Группы");
					ЗаписатьXML(ЗаписьXML,	ВыборкаДетальныеЗаписи.КатегорияIDНаСайте,			"Ид",	НазначениеТипаXML.Неявное);
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Группы
					
				КонецЦикла;				
				
				//Картинка
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	МИНИМУМ(Изображения.Ссылка) КАК Ссылка
				|ПОМЕСТИТЬ вт
				|ИЗ
				|	Справочник.Изображения КАК Изображения
				|ГДЕ
				|	Изображения.Владелец = &Владелец
				|	И НЕ Изображения.ПометкаУдаления
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	вт.Ссылка КАК Ссылка
				|ИЗ
				|	вт КАК вт";				
				Запрос.УстановитьПараметр("Владелец", Товар.Ссылка);				
				РезультатЗапроса = Запрос.Выполнить();				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка) Тогда 
						Продолжить;
					КонецЕсли;
					
					ИмяФайла = "img_" + ВыборкаДетальныеЗаписи.Ссылка.Код + ".jpg";					
					
					//Сохранить изображение
					Картинка = ВыборкаДетальныеЗаписи.Ссылка.Хранилище.Получить();
					Картинка.Записать("" + КаталогВыгрузки + ИмяФайла);						
					мсФайлыДляОтправки.Добавить("" + КаталогВыгрузки + ИмяФайла);
					
					ЗаписатьXML(ЗаписьXML,	ИмяФайла, "Картинка",	НазначениеТипаXML.Неявное);					
					
				КонецЦикла;					
					
													
				
				
				//Статус
				
				//Изготовитель->Ид
				//Изготовитель->Наименование
				//Описание
				//////ЗначенияРеквизитов->ЗначениеРеквизита //Не передавать
				////	//Наименование //Значение //'Полное наименование'
				//ХарактеристикиТовара->ХарактеристикаТовара
					//Наименование //'Файл'
					//Значение - путь к файлу в папке /tmp/1с/ на сайте/ т.е сначала выгрузить файлы
				
				
				
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); //Товар
				
				счТоварыКоличествоВыгружено = счТоварыКоличествоВыгружено + 1;
				
			КонецЦикла;	
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Товары
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Каталог			
			
		КонецЕсли;
		
		//ПакетПредложений	
		Если СтруктураИзменений.ОстаткиЦены.Количество() > 0 Тогда
			
			//выбрать данные остатков и цен
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УстановкаЦенЦены.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ втНоменклатураПрев
			|ИЗ
			|	Документ.УстановкаЦен.Цены КАК УстановкаЦенЦены
			|ГДЕ
			|	УстановкаЦенЦены.Ссылка В(&мсОстаткиЦены)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			|ГДЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка В(&мсОстаткиЦены)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаказПокупателяТовары.Номенклатура
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|ГДЕ
			|	ЗаказПокупателяТовары.Ссылка В(&мсОстаткиЦены)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПоступлениеТоваровТовары.Номенклатура
			|ИЗ
			|	Документ.ПоступлениеТоваров.Товары КАК ПоступлениеТоваровТовары
			|ГДЕ
			|	ПоступлениеТоваровТовары.Ссылка В(&мсОстаткиЦены)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СписаниеТоваровТовары.Номенклатура
			|ИЗ
			|	Документ.СписаниеТоваров.Товары КАК СписаниеТоваровТовары
			|ГДЕ
			|	СписаниеТоваровТовары.Ссылка В(&мсОстаткиЦены)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втНоменклатураПрев.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ втНоменклатура
			|ИЗ
			|	втНоменклатураПрев КАК втНоменклатураПрев
			|
			|СГРУППИРОВАТЬ ПО
			|	втНоменклатураПрев.Номенклатура
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
			|	ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
			|ПОМЕСТИТЬ втОстатки
			|ИЗ
			|	РегистрНакопления.Запасы.Остатки(
			|			,
			|			Номенклатура В
			|				(ВЫБРАТЬ
			|					втНоменклатура.Номенклатура
			|				ИЗ
			|					втНоменклатура КАК втНоменклатура)) КАК ЗапасыОстатки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
			|	ЦеныНоменклатурыСрезПоследних.ВидЦен КАК ВидЦен
			|ПОМЕСТИТЬ втЦены
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			,
			|			Номенклатура В
			|				(ВЫБРАТЬ
			|					втНоменклатура.Номенклатура
			|				ИЗ
			|					втНоменклатура КАК втНоменклатура)) КАК ЦеныНоменклатурыСрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втНоменклатура.Номенклатура.IDНаСайте КАК IDНаСайте,
			|	втНоменклатура.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(втОстатки.КоличествоОстаток, 0) КАК Количество,
			|	ЕСТЬNULL(втЦены.ВидЦен.Наименование, """") КАК ВидЦен,
			|	ЕСТЬNULL(втЦены.Цена, 0) КАК Цена
			|ИЗ
			|	втНоменклатура КАК втНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
			|		ПО втНоменклатура.Номенклатура = втОстатки.Номенклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
			|		ПО втНоменклатура.Номенклатура = втЦены.Номенклатура";			
			Запрос.УстановитьПараметр("мсОстаткиЦены", СтруктураИзменений.ОстаткиЦены);			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() > 0 Тогда
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("ПакетПредложений");
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Предложения");				
				
				Пока Выборка.Следующий() Цикл
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Предложение");
					
					Если ЗначениеЗаполнено(Выборка.IDНаСайте) Тогда 				
						ЗаписатьXML(ЗаписьXML,	"" + Выборка.IDНаСайте + "#" + XMLСтрока(Выборка.Номенклатура),	"Ид",	НазначениеТипаXML.Неявное);
					Иначе
						ЗаписатьXML(ЗаписьXML,	XMLСтрока(Выборка.Номенклатура),	"Ид",	НазначениеТипаXML.Неявное);
					КонецЕсли;
					
					//Цены
					ЗаписьXML.ЗаписатьНачалоЭлемента("Цены");
					ЗаписьXML.ЗаписатьНачалоЭлемента("Цена");
					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Валюта");					
					ЗаписатьXML(ЗаписьXML,	Выборка.ВидЦен,	"Валюта",	НазначениеТипаXML.Неявное);
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Валюта
					
					ЗаписатьXML(ЗаписьXML,	Выборка.Цена,	"ЦенаЗаЕдиницу",	НазначениеТипаXML.Неявное);											
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Цена
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Цены
					
					//Остатки
					ЗаписатьXML(ЗаписьXML,	Выборка.Количество,	"Количество",	НазначениеТипаXML.Неявное);
					
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Предложение
					
					счПакетПредложенийКоличествоВыгружено = счПакетПредложенийКоличествоВыгружено + 1;
					
				КонецЦикла;
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); //Предложения
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); //ПакетПредложений
			
			КонецЕсли;
			
		КонецЕсли;		
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //КоммерческаяИнформация
		
		ЗаписьXML.Закрыть();
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка каталога. Ошибка: При записи данных в файл возникла ошибка." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	//Сжать при необходимости и разделить на части при превышении размера	
	Если ZIPФайлыРазрешены Тогда
		
		ИмяФайлаОбменаАрхив = КаталогВыгрузки + "catalog.zip";
		ЗаписьАрхива = Новый ЗаписьZipФайла(ИмяФайлаОбменаАрхив);		
		ЗаписьАрхива.Добавить(ИмяФайлаОбмена);
		
		Попытка
			ЗаписьАрхива.Записать();
			ИмяФайлаОбмена = ИмяФайлаОбменаАрхив;
		Исключение
			ОО = ОписаниеОшибки();
			стРезультат.Ошибки = "Выгрузка каталога. Ошибка: Не удалось записать zip-архив." + Символы.ПС + ОО;
			Возврат;		
		КонецПопытки;
		
	КонецЕсли;		
	
	Если ОграничениеРазмераФрагментаФайлаОбмена > 0 Тогда		
		мсФайлыДляОтправки = РазделитьФайлНаФрагменты(ИмяФайлаОбмена,ОграничениеРазмераФрагментаФайлаОбмена);		
	Иначе
		мсФайлыДляОтправки.Добавить(ИмяФайлаОбмена);
	КонецЕсли;		
	
	#КонецОбласти
	
	
	//Отправить на сервер
	Для Каждого ФайлДляОтправки Из мсФайлыДляОтправки Цикл 
		
		ПараметрыСоединения.АдресСкриптаПараметры = "?type=catalog&mode=file&filename=" + ПолучитьИмяФайлаИзПолногоПути(ФайлДляОтправки); //http://<сайт>/<путь> /1c_exchange.php?type=catalog&mode=file&filename=<имя файла>
		
		//Ожидается 1 строка "success"
		стРезультатОтправки = HTTPОтправитьФайлНаСервер(стСоединение.Соединение, ПараметрыСоединения, ФайлДляОтправки);
		
		Если ЗначениеЗаполнено(стРезультатОтправки.Ошибки) Тогда
			стРезультат.Ошибки = стРезультатОтправки.Ошибки;
			Возврат;
		КонецЕсли;
		
		Если СтрПолучитьСтроку(стРезультатОтправки.ОтветСервера,1) <> "success" Тогда
			стРезультат.Ошибки = "Выгрузка каталога. Ошибка: Ошибка выгрузки фалов на сайт, не получен ответ ""success"" от сайта.";
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	//Отправить запрос на обработку выгруженных файлов                                                                //catalog.xml
	ПараметрыСоединения.АдресСкриптаПараметры = "?type=catalog&mode=import&filename=" + ПолучитьИмяФайлаИзПолногоПути(ИмяФайлаОбмена); //http://<сайт>/<путь> /1c_exchange.php?type=catalog&mode=import&filename=<имя файла>
	
	//Ожидается 1 строка "success"
	стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
	
	Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
		стРезультат.Ошибки = стОтветСервера.Ошибки;
		Возврат;
	КонецЕсли;
	
	Если СтрПолучитьСтроку(стОтветСервера.ОтветСервера,1) <> "success" Тогда
		стРезультат.Ошибки = "Выгрузка каталога. Ошибка: Ошибка обработки файлов сайтом, не получен ответ ""success"" от сайта.";
		Возврат;
	КонецЕсли;
	
	//Грохнуть временные файлы
	Попытка	
		УдалитьФайлы(КаталогВыгрузки)
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка каталога. Ошибка: Ошибка при удалении временного каталога для выгрузки данных." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	
	//Очистить регистрацию
	Для Каждого Товар ИЗ СтруктураИзменений.Товары Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Товар);
	КонецЦикла;
	
	Для Каждого Регистратор ИЗ СтруктураИзменений.ОстаткиЦены Цикл
		Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.УстановкаЦен") Тогда 
			НЗ = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
			НЗ.Отбор.Регистратор.Установить(Регистратор);
		Иначе
			НЗ = РегистрыНакопления.Запасы.СоздатьНаборЗаписей();
			НЗ.Отбор.Регистратор.Установить(Регистратор);
		КонецЕсли;
			
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НЗ);
		
	КонецЦикла;
	
	стРезультат.Результат = стРезультат.Результат + "Выгрузка каталога. Успешно. Товары к выгрузке " + СтруктураИзменений.Товары.Количество() + ", выгружено " + счТоварыКоличествоВыгружено + ", изменения цен и статков " + СтруктураИзменений.ОстаткиЦены.Количество();
	
КонецПроцедуры

Процедура ЗагрузитьПользователей(стРезультат) Экспорт
	
	//Т.к. структура xml с оптового сайта иная, то проще чрз отдельную процедуру
	Если УзелОбмена.Оптовый Тогда
		ЗагрузитьПользователейОпт(стРезультат);
		Возврат;
	КонецЕсли;
	
	стРезультат = Новый Структура("Результат,Ошибки");
	стРезультат.Результат = "";
	стРезультат.Ошибки = Неопределено; //Нет ошибок
	
	Если НЕ УзелОбмена.ЗагружатьПользователей Тогда 
		стРезультат.Ошибки = "Не активирован флаг ""Загружать пользователей"" в плане обмена.";
		Возврат;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайлаОбмена) Тогда //Если не указан файл для обмена, то обращаемся к сайту
		
		ПараметрыСоединения = ПолучитьПараметрыСоединения();
		
		стСоединение = ПолучитьСоединение(ПараметрыСоединения);
		
		Если ЗначениеЗаполнено(стСоединение.Ошибки) Тогда //Обработка ошибок
			стРезультат.Ошибки = стСоединение.Ошибки;
			Возврат;		
		КонецЕсли;
		
		
		//Авторизация
		HTTPВыполнитьАвторизацию(стСоединение.Соединение, ПараметрыСоединения, стРезультат);
		
		Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ЗаголовкиЗапросовCookie) ИЛИ ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //Авторизация не выполнена 
			Возврат;
		КонецЕсли;
		
		пВремяОбмена = ТекущаяДата() - 60*60*2;	//По МСК
		
		//Получить пользователей
		ПараметрыСоединения.АдресСкриптаПараметры = "?type=users&mode=export"; //http://<сайт>/<путь> /1c_exchange.php?type=sale&mode=query //https://www.orenburgshal.ru/1c/shop/1c/1c_exchange.php/?type=users&mode=export
		
		//Ожидается XML или ZIP
		стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
		
		Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
			стРезультат.Ошибки = стОтветСервера.Ошибки;
			Возврат;
		КонецЕсли;
		
		#Область ОбработкаXML
		
		//Обработка XML
		СтрокаXML = стОтветСервера.ОтветСервера;			
		
		Если ПустаяСтрока(СтрокаXML) Тогда //Обработка ошибок
			стРезультат.Ошибки = "Загрузка пользователей. Ошибка: Не удалось прочитать данные, загруженные с сайта.";		
			Возврат;		
		КонецЕсли;
		
	Иначе
		
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОбмена);
			СтрокаXML = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
		Исключение
			ОО = ОписаниеОшибки();
			стРезультат.Ошибки = "Загрузка заказов. Ошибка: Не удалось прочитать файл." + Символы.ПС + ОО;		
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		
		ЛогироватьXML("ЗагрузитьПользователей", СтрокаXML); //Логирование
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка пользователей. Ошибка: Не удалось обработать XML." + Символы.ПС + ОО;
		Возврат;
	КонецПопытки;
	
	мсРезультатРазборки = Новый Массив;
	
	Попытка
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "КоммерческаяИнформация" Тогда 
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Контрагенты" Тогда 
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		СтекУзлов = Новый Массив;
		ТекущийПуть = "";
		Пока ЧтениеXML.Прочитать() Цикл 
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				СтекУзлов.Добавить(ЧтениеXML.Имя);
				ТекущийПуть = МассивВСтроку(СтекУзлов);
				
				//Контрагент
				Если ЧтениеXML.Имя = "Контрагент" И ТекущийПуть = "Контрагент" Тогда
					стКонтрагент = Новый Структура("Ид,Наименование,Роль,ПолноеНаименование,АдресРегистрации,Контакты"); //АдресРегистрации
					
				//АдресРегистрации
				ИначеЕсли ЧтениеXML.Имя = "АдресРегистрации" И ТекущийПуть = "Контрагент\АдресРегистрации" Тогда
					мсАдресРегистрации = Новый Массив;
					
				//АдресноеПоле
				ИначеЕсли ЧтениеXML.Имя = "АдресноеПоле" И ТекущийПуть = "Контрагент\АдресРегистрации\АдресноеПоле" Тогда
					стАдресноеПоле = Новый Структура("Тип,Значение");
					
				//Контакты
				ИначеЕсли ЧтениеXML.Имя = "Контакты" И ТекущийПуть = "Контрагент\Контакты" Тогда
					мсКонтакты = Новый Массив;
					
				//Контакт
				ИначеЕсли ЧтениеXML.Имя = "Контакт" И ТекущийПуть = "Контрагент\Контакты\Контакт" Тогда
					стКонтакт = Новый Структура("Тип,Значение");
						
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				
				//Контрагент
				Если ТекущийПуть = "Контрагент\Ид" Тогда 				
					стКонтрагент.Ид = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\Наименование" Тогда 				
					стКонтрагент.Наименование = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\Роль" Тогда 				
					стКонтрагент.Роль = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\ПолноеНаименование" Тогда 				
					стКонтрагент.ПолноеНаименование = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\АдресРегистрации\АдресноеПоле\Тип" Тогда 				
					стАдресноеПоле.Тип = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\АдресРегистрации\АдресноеПоле\Значение" Тогда 				
					стАдресноеПоле.Значение = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\Контакты\Контакт\Тип" Тогда 				
					стКонтакт.Тип = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\Контакты\Контакт\Значение" Тогда 				
					стКонтакт.Значение = ЧтениеXML.Значение;
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если ЧтениеXML.Имя = "КоммерческаяИнформация" ИЛИ ЧтениеXML.Имя = "Контрагенты"  Тогда 
					Прервать;	
				КонецЕсли;
				
				//Контрагент
				Если ТекущийПуть = "Контрагент" Тогда 
					мсРезультатРазборки.Добавить(стКонтрагент);
					
				//АдресРегистрации
				ИначеЕсли ТекущийПуть = "Контрагент\АдресРегистрации" Тогда 
					стКонтрагент.АдресРегистрации = мсАдресРегистрации;
					
				//АдресноеПоле
				ИначеЕсли ТекущийПуть = "Контрагент\АдресРегистрации\АдресноеПоле" Тогда 
					мсАдресРегистрации.Добавить(стАдресноеПоле);
					
				//Контакты
				ИначеЕсли ТекущийПуть = "Контрагент\Контакты" Тогда 
					стКонтрагент.Контакты = мсКонтакты;
					
				//Контакт
				ИначеЕсли ТекущийПуть = "Контрагент\Контакты\Контакт" Тогда 
					мсКонтакты.Добавить(стКонтакт);
					
				КонецЕсли;	
				
				СтекУзлов.Удалить(СтекУзлов.Количество()-1);
				ТекущийПуть = МассивВСтроку(СтекУзлов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка пользователей. Ошибка: В результате разбора XML возникла ошибка." + Символы.ПС + ОО;		
		Возврат;
	КонецПопытки;
	
	стРезультат.Результат = стРезультат.Результат + "Загрузка пользователей. Получено " + мсРезультатРазборки.Количество() + " элементов";
	
	#КонецОбласти
	
	#Область ЗаписьПользователей
	
	//Запись пользователей
	
	//Счетчики
	СчКоличествоПользователей = 0;
	СчКоличествоПользователейНовых = 0;
	
	Попытка
		
		Для Каждого стрПользователь ИЗ мсРезультатРазборки Цикл
			
			Пользователь = КонтрагентПоЗначению(стрПользователь.Ид);
			
			Если Не ЗначениеЗаполнено(Пользователь) Тогда 
				
				Пользователь = Справочники.Контрагенты.СоздатьЭлемент();
				
				СчКоличествоПользователейНовых = СчКоличествоПользователейНовых + 1;
				
				НовыйПользователь = Истина;
				
			ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.Контрагенты") Тогда 
				
				Пользователь = Пользователь.ПолучитьОбъект();
				
				НовыйПользователь = Ложь;
				
			КонецЕсли;
			
			Разделитель = Найти(стрПользователь.Ид,"#");
			
			Если Разделитель <> 0 Тогда				
				IDНаСайте = Сред(стрПользователь.Ид, 1, Разделитель - 1);
				КонтрагентСсылка = Сред(стрПользователь.Ид, Разделитель + 1, СтрДлина(стрПользователь.Ид) - Разделитель + 1);
			Иначе 
				IDНаСайте = стрПользователь.Ид;
			КонецЕсли;
			
			Если НовыйПользователь = Истина Тогда  
				Пользователь.УстановитьНовыйКод();
			КонецЕсли;
			
			Пользователь.IDНаСайте = IDНаСайте;
			Пользователь.Наименование = стрПользователь.Наименование;
			Пользователь.НаименованиеПолное = стрПользователь.ПолноеНаименование;
			Пользователь.Покупатель = Истина;
			
			Если УзелОбмена.Оптовый Тогда 
				Пользователь.Опт = Истина;
			Иначе
				Пользователь.Розница = Истина;
			КонецЕсли;
			
			Пользователь.ВидКонтрагента = Перечисления.ЮрФизЛицо.ФизическоеЛицо;
			
			Пользователь.КонтактнаяИнформация.Очистить();
			
			//АдресРегистрации
			Для Каждого АдресноеПоле Из стрПользователь.АдресРегистрации Цикл 
				
				Если АдресноеПоле.Тип = "Адрес" Тогда 
					
					нСтрокаКИ  = Пользователь.КонтактнаяИнформация.Добавить();
					нСтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
					нСтрокаКИ.Представление = АдресноеПоле.Значение;					
					
				КонецЕсли;
				
			КонецЦикла;
			
			//Контакты
			Для Каждого Контакт Из стрПользователь.Контакты Цикл 
				
				Если Контакт.Тип = "E-mail" Тогда 
					
					нСтрокаКИ  = Пользователь.КонтактнаяИнформация.Добавить();
					нСтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					нСтрокаКИ.Представление = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Контактные телефоны (с кодом города)" Тогда
					
					нСтрокаКИ  = Пользователь.КонтактнаяИнформация.Добавить();
					нСтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					нСтрокаКИ.Представление = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Индекс" Тогда
					
					нСтрокаКИ  = Пользователь.КонтактнаяИнформация.Добавить();
					нСтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ПочтовыйИндекс;
					нСтрокаКИ.Представление = Контакт.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
						
			Пользователь.ОбменДанными.Загрузка = Истина;			
			Пользователь.Записать();
			
			СчКоличествоПользователей = СчКоличествоПользователей + 1;			
						
		КонецЦикла;
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка пользователей. Ошибка: В результате загрузки пользователей возникла ошибка." + Символы.ПС + ОО;		
		Возврат;
	КонецПопытки;
	
	#КонецОбласти	
	
	//Успешное завершение импорта
	Если ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //!!!Отправлять на сайт "Успех" только в случает корректной загрузки
		Возврат 		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайлаОбмена) Тогда
		
		ПараметрыСоединения.АдресСкриптаПараметры = "?type=users&mode=success&setdate=" + Формат(пВремяОбмена, "ДФ='dd.MM.yyyy H:m'"); //02.05.2017 16:41
		
		//Ожидается пустой ответ
		стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
		
		Если стОтветСервера.Ошибки <> "Получение данных с сайта: Получен пустой ответ." Тогда
			стРезультат.Ошибки = стОтветСервера.Ошибки;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	стРезультат.Результат = стРезультат.Результат + Символы.ПС + "Обработано: " + СчКоличествоПользователей + " пользователей из них новых: " + СчКоличествоПользователейНовых;
	
Конецпроцедуры

Процедура ЗагрузитьПользователейОпт(стРезультат) Экспорт
	
	стРезультат = Новый Структура("Результат,Ошибки");
	стРезультат.Результат = "";
	стРезультат.Ошибки = Неопределено; //Нет ошибок
	
	Если НЕ УзелОбмена.ЗагружатьПользователей Тогда 
		стРезультат.Ошибки = "Не активирован флаг ""Загружать пользователей"" в плане обмена.";
		Возврат;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайлаОбмена) Тогда //Если не указан файл для обмена, то обращаемся к сайту
		
		ПараметрыСоединения = ПолучитьПараметрыСоединения();
		
		стСоединение = ПолучитьСоединение(ПараметрыСоединения);
		
		Если ЗначениеЗаполнено(стСоединение.Ошибки) Тогда //Обработка ошибок
			стРезультат.Ошибки = стСоединение.Ошибки;
			Возврат;		
		КонецЕсли;	
		
		//Авторизация
		HTTPВыполнитьАвторизацию(стСоединение.Соединение, ПараметрыСоединения, стРезультат);
		
		Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ЗаголовкиЗапросовCookie) ИЛИ ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //Авторизация не выполнена 
			Возврат;
		КонецЕсли;
		
		пВремяОбмена = ТекущаяДата() - 60*60*2;	//По МСК
		
		//Получить пользователей
		ПараметрыСоединения.АдресСкриптаПараметры = "?type=users&mode=export"; //http://<сайт>/<путь> /1c_exchange.php?type=sale&mode=query //https://www.orenburgshal.ru/1c/shop/1c/1c_exchange.php/?type=users&mode=export
		
		//Ожидается XML или ZIP
		стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
		
		Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
			стРезультат.Ошибки = стОтветСервера.Ошибки;
			Возврат;
		КонецЕсли;
		
		#Область ОбработкаXML
		
		//Обработка XML
		СтрокаXML = стОтветСервера.ОтветСервера;			
		
		Если ПустаяСтрока(СтрокаXML) Тогда //Обработка ошибок
			стРезультат.Ошибки = "Загрузка пользователей. Ошибка: Не удалось прочитать данные, загруженные с сайта.";		
			Возврат;		
		КонецЕсли;
		
	Иначе
		
		Попытка
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаОбмена);
			СтрокаXML = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
			
		Исключение
			ОО = ОписаниеОшибки();
			стРезультат.Ошибки = "Загрузка заказов. Ошибка: Не удалось прочитать файл." + Символы.ПС + ОО;		
			Возврат;
		КонецПопытки;
		
	КонецЕсли;

	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		
		ЛогироватьXML("ЗагрузитьПользователейОпт", СтрокаXML); //Логирование
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка пользователей. Ошибка: Не удалось обработать XML." + Символы.ПС + ОО;
		Возврат;
	КонецПопытки;
	
	мсРезультатРазборки = Новый Массив;
	
	Попытка
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "КоммерческаяИнформация" Тогда 
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Контрагенты" Тогда 
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		СтекУзлов = Новый Массив;
		ТекущийПуть = "";
		Пока ЧтениеXML.Прочитать() Цикл 
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				СтекУзлов.Добавить(ЧтениеXML.Имя);
				ТекущийПуть = МассивВСтроку(СтекУзлов);
				
				//Контрагент
				Если ЧтениеXML.Имя = "Контрагент" И ТекущийПуть = "Контрагент" Тогда
					стКонтрагент = Новый Структура("Ид,Наименование,Роль,ПолноеНаименование,АдресРегистрации,Контакты,КонтактныеЛица"); //АдресРегистрации
					
				//АдресРегистрации
				ИначеЕсли ЧтениеXML.Имя = "АдресРегистрации" И ТекущийПуть = "Контрагент\АдресРегистрации" Тогда
					мсАдресРегистрации = Новый Массив;
					
				//АдресноеПоле
				ИначеЕсли ЧтениеXML.Имя = "АдресноеПоле" И ТекущийПуть = "Контрагент\АдресРегистрации\АдресноеПоле" Тогда
					стАдресноеПоле = Новый Структура("Тип,Значение");
					
				//Контакты
				ИначеЕсли ЧтениеXML.Имя = "Контакты" И ТекущийПуть = "Контрагент\Контакты" Тогда
					мсКонтакты = Новый Массив;
					
				//Контакт
				ИначеЕсли ЧтениеXML.Имя = "Контакт" И ТекущийПуть = "Контрагент\Контакты\Контакт" Тогда
					стКонтакт = Новый Структура("Тип,Значение");
					
				//КонтактныеЛица
				ИначеЕсли ЧтениеXML.Имя = "КонтактныеЛица" И ТекущийПуть = "Контрагент\КонтактныеЛица" Тогда
					мсКонтактныеЛица = Новый Массив;
					
				//КонтактноеЛицо
				ИначеЕсли ЧтениеXML.Имя = "КонтактноеЛицо" И ТекущийПуть = "Контрагент\КонтактныеЛица\КонтактноеЛицо" Тогда
					мсКонтактноеЛицо = Новый Массив;
					
				//Контакт
				ИначеЕсли ЧтениеXML.Имя = "Контакт" И ТекущийПуть = "Контрагент\КонтактныеЛица\КонтактноеЛицо\Контакт" Тогда
					стКонтактноеЛицоКонтакт = Новый Структура("Тип,Значение");
						
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				
				//Контрагент
				Если ТекущийПуть = "Контрагент\Ид" Тогда 				
					стКонтрагент.Ид = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\Наименование" Тогда 				
					стКонтрагент.Наименование = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\Роль" Тогда 				
					стКонтрагент.Роль = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\ПолноеНаименование" Тогда 				
					стКонтрагент.ПолноеНаименование = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\АдресРегистрации\АдресноеПоле\Тип" Тогда 				
					стАдресноеПоле.Тип = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\АдресРегистрации\АдресноеПоле\Значение" Тогда 				
					стАдресноеПоле.Значение = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\Контакты\Контакт\Тип" Тогда 				
					стКонтакт.Тип = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\Контакты\Контакт\Значение" Тогда 				
					стКонтакт.Значение = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\КонтактныеЛица\КонтактноеЛицо\Контакт\Тип" Тогда 				
					стКонтактноеЛицоКонтакт.Тип = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Контрагент\КонтактныеЛица\КонтактноеЛицо\Контакт\Значение" Тогда 				
					стКонтактноеЛицоКонтакт.Значение = ЧтениеXML.Значение;
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если ЧтениеXML.Имя = "КоммерческаяИнформация" ИЛИ ЧтениеXML.Имя = "Контрагенты"  Тогда 
					Прервать;	
				КонецЕсли;
				
				//Контрагент
				Если ТекущийПуть = "Контрагент" Тогда 
					мсРезультатРазборки.Добавить(стКонтрагент);
					
				//АдресРегистрации
				ИначеЕсли ТекущийПуть = "Контрагент\АдресРегистрации" Тогда 
					стКонтрагент.АдресРегистрации = мсАдресРегистрации;
					
				//АдресноеПоле
				ИначеЕсли ТекущийПуть = "Контрагент\АдресРегистрации\АдресноеПоле" Тогда 
					мсАдресРегистрации.Добавить(стАдресноеПоле);
					
				//Контакты
				ИначеЕсли ТекущийПуть = "Контрагент\Контакты" Тогда 
					стКонтрагент.Контакты = мсКонтакты;
					
				//Контакт
				ИначеЕсли ТекущийПуть = "Контрагент\Контакты\Контакт" Тогда 
					мсКонтакты.Добавить(стКонтакт);
					
				//КонтактныеЛица
				ИначеЕсли ТекущийПуть = "Контрагент\КонтактныеЛица" Тогда 
					стКонтрагент.КонтактныеЛица = мсКонтактныеЛица;
					
				//КонтактноеЛицо
				ИначеЕсли ТекущийПуть = "Контрагент\КонтактныеЛица\КонтактноеЛицо" Тогда 
					мсКонтактныеЛица.Добавить(мсКонтактноеЛицо);
					
				//Контакт
				ИначеЕсли ТекущийПуть = "Контрагент\КонтактныеЛица\КонтактноеЛицо\Контакт" Тогда 
					мсКонтактноеЛицо.Добавить(стКонтактноеЛицоКонтакт);
					
				КонецЕсли;	
				
				СтекУзлов.Удалить(СтекУзлов.Количество()-1);
				ТекущийПуть = МассивВСтроку(СтекУзлов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка пользователей. Ошибка: В результате разбора XML возникла ошибка." + Символы.ПС + ОО;		
		Возврат;
	КонецПопытки;
	
	стРезультат.Результат = стРезультат.Результат + "Загрузка пользователей. Получено " + мсРезультатРазборки.Количество() + " элементов";
	
	#КонецОбласти
	
	#Область ЗаписьПользователей
	
	//Запись пользователей
	
	//Счетчики
	СчКоличествоПользователей = 0;
	СчКоличествоПользователейНовых = 0;
	
	Попытка
		
		Для Каждого стрПользователь ИЗ мсРезультатРазборки Цикл
			
			Пользователь = КонтрагентПоЗначению(стрПользователь.Ид);
			
			Если Не ЗначениеЗаполнено(Пользователь) Тогда 
				
				Пользователь = Справочники.Контрагенты.СоздатьЭлемент();
				
				СчКоличествоПользователейНовых = СчКоличествоПользователейНовых + 1;
				
				НовыйПользователь = Истина;
				
			ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.Контрагенты") Тогда 
				
				Пользователь = Пользователь.ПолучитьОбъект();
				
				НовыйПользователь = Ложь;
				
			КонецЕсли;
			
			//Чистка
			Пользователь.Покупатель = Неопределено;
			Пользователь.Поставщик = Неопределено;
			Пользователь.НаименованиеПолное = Неопределено;
			Пользователь.ВидКонтрагента = Неопределено;
			Пользователь.КодПоОКПО = Неопределено;
			Пользователь.ИНН = Неопределено;
			Пользователь.КПП = Неопределено;
			Пользователь.Опт = Неопределено;
			Пользователь.Розница = Неопределено;
			Пользователь.ДокументУдостоверяющийЛичность = Неопределено;
			Пользователь.РегистрационныйНомер = Неопределено;
			Пользователь.СвидетельствоДатаВыдачи = Неопределено;
			Пользователь.СвидетельствоСерияНомер = Неопределено;
			Пользователь.УсловияОплаты = Неопределено;
			Пользователь.ПредпочтенияВИзделиях = Неопределено;
			Пользователь.ЭтоТранспортнаяКомпания = Неопределено;
			Пользователь.ОсновнаяТранспортнаяКомпания = Неопределено;
			Пользователь.ПоискПоТелефону = Неопределено;
			Пользователь.ПоискПоАдресуЭлектроннойПочты = Неопределено;
			Пользователь.ПоискПоАдресам = Неопределено;
			Пользователь.IDНаСайте = Неопределено;
			
			Пользователь.КонтактнаяИнформация.Очистить();
			Пользователь.ДополнительныеРеквизиты.Очистить();
			
			Разделитель = Найти(стрПользователь.Ид,"#");
			
			Если Разделитель <> 0 Тогда				
				IDНаСайте = Сред(стрПользователь.Ид, 1, Разделитель - 1);
				КонтрагентСсылка = Сред(стрПользователь.Ид, Разделитель + 1, СтрДлина(стрПользователь.Ид) - Разделитель + 1);
			Иначе 
				IDНаСайте = стрПользователь.Ид;
			КонецЕсли;
			
			Если НовыйПользователь = Истина Тогда  
				Пользователь.УстановитьНовыйКод();
			КонецЕсли;
			
			Пользователь.IDНаСайте = IDНаСайте;
			Пользователь.Наименование = стрПользователь.Наименование;
			Пользователь.НаименованиеПолное = стрПользователь.ПолноеНаименование;
			Пользователь.Покупатель = Истина;
			
			Если УзелОбмена.Оптовый Тогда 
				Пользователь.Опт = Истина;
			Иначе
				Пользователь.Розница = Истина;
			КонецЕсли;
			
			Пользователь.ВидКонтрагента = Перечисления.ЮрФизЛицо.ФизическоеЛицо;
			

			
			////АдресРегистрации
			//Для Каждого АдресноеПоле Из стрПользователь.АдресРегистрации Цикл 
			//	
			//	Если АдресноеПоле.Тип = "Адрес" Тогда 
			//		
			//		нСтрокаКИ  = Пользователь.КонтактнаяИнформация.Добавить();
			//		нСтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			//		нСтрокаКИ.Представление = АдресноеПоле.Значение;					
			//		
			//	КонецЕсли;
			//	
			//КонецЦикла;
			//
			РасчетныйСчет = Неопределено;
			Банк = Неопределено;
			БИК = Неопределено;
			КС = Неопределено;
			
			//Контакты
			Для Каждого Контакт Из стрПользователь.Контакты Цикл 
				
				Если Контакт.Тип = "E-mail" Тогда 
					
					нСтрокаКИ  = Пользователь.КонтактнаяИнформация.Добавить();
					нСтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					нСтрокаКИ.Представление = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Контактные телефоны (с кодом города)" Тогда
					
					нСтрокаКИ  = Пользователь.КонтактнаяИнформация.Добавить();
					нСтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					нСтрокаКИ.Представление = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Индекс" Тогда
					
					нСтрокаКИ  = Пользователь.КонтактнаяИнформация.Добавить();
					нСтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ПочтовыйИндекс;
					нСтрокаКИ.Представление = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Адрес юридический" Тогда
					
					нСтрокаКИ  = Пользователь.КонтактнаяИнформация.Добавить();
					нСтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
					нСтрокаКИ.Представление = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Тип организации" Тогда
					
					//нСтрока  = Пользователь.ДополнительныеРеквизиты.Добавить();
					//нСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоНаименованию("Тип организации");
					//нСтрока.Значение = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "ИНН/ОГРН" Тогда
					
					Если ЗначениеЗаполнено(Контакт.Значение) Тогда 
					
						мСтрИННОГРН = СтрЗаменить(Контакт.Значение, "/", Символы.ПС);
						
						Если СтрЧислоСтрок(мСтрИННОГРН) = 2 Тогда 
							Пользователь.ИНН = СтрПолучитьСтроку(мСтрИННОГРН, 1);
							Пользователь.РегистрационныйНомер = СтрПолучитьСтроку(мСтрИННОГРН, 2);
						ИначеЕсли СтрЧислоСтрок(мСтрИННОГРН) = 1 Тогда 
							Пользователь.ИНН = СтрПолучитьСтроку(мСтрИННОГРН, 1);
						КонецЕсли;
						
						Пользователь.ВидКонтрагента = Перечисления.ЮрФизЛицо.ЮридическоеЛицо;
					
					КонецЕсли;
					
					//нСтрока  = Пользователь.ДополнительныеРеквизиты.Добавить();
					//нСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоНаименованию("ИНН/ОГРН");
					//нСтрока.Значение = Контакт.Значение;

				ИначеЕсли Контакт.Тип = "Расчетный счет" Тогда
					
					РасчетныйСчет = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Банк" Тогда
					
					Банк = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "БИК" Тогда
					
					БИК = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "К/С" Тогда
					
					КС = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Отправитель" Тогда
					
					//нСтрока  = Пользователь.ДополнительныеРеквизиты.Добавить();
					//нСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоНаименованию("Отправитель");
					//нСтрока.Значение = Контакт.Значение;
					
					нСтрокаКИ  = Пользователь.КонтактнаяИнформация.Добавить();
					нСтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Отправитель;
					нСтрокаКИ.Представление = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Транспортная компания" Тогда
					
					нСтрока  = Пользователь.ДополнительныеРеквизиты.Добавить();
					нСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоНаименованию("Транспортная компания");
					нСтрока.Значение = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Количество заказов" Тогда
					
					нСтрока  = Пользователь.ДополнительныеРеквизиты.Добавить();
					нСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоНаименованию("Количество заказов");
					нСтрока.Значение = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Сумма заказов" Тогда
					
					нСтрока  = Пользователь.ДополнительныеРеквизиты.Добавить();
					нСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоНаименованию("Сумма заказов");
					нСтрока.Значение = Контакт.Значение;
					
				ИначеЕсли Контакт.Тип = "Комментарий" Тогда
					
					нСтрока  = Пользователь.ДополнительныеРеквизиты.Добавить();
					нСтрока.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоНаименованию("Комментарий");
					нСтрока.Значение = Контакт.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Пользователь.ОбменДанными.Загрузка = Истина;			
			Пользователь.Записать();
			
			//Создать и привязать счет к контрагенту
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	БанковскиеСчета.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец = &Владелец
			|	И БанковскиеСчета.Банк.КоррСчет = &КоррСчет
			|	И БанковскиеСчета.Банк.Код = &КодБИК
			|	И БанковскиеСчета.НомерСчета = &НомерСчета
			|	И НЕ БанковскиеСчета.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("Владелец", Пользователь.Ссылка);
			Запрос.УстановитьПараметр("КодБИК", БИК);
			Запрос.УстановитьПараметр("КоррСчет", КС);
			Запрос.УстановитьПараметр("НомерСчета", РасчетныйСчет);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				Пользователь.ОсновнойБанковскийСчет = Выборка.Ссылка;
				
			Иначе
				
				//Создать счет
				//	1.	Найти банк				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	КлассификаторБанковРФ.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
				|ГДЕ
				|	КлассификаторБанковРФ.Код = &КодБИК
				|	И КлассификаторБанковРФ.КоррСчет = &КоррСчет
				|	И НЕ КлассификаторБанковРФ.ПометкаУдаления";
				
				Запрос.УстановитьПараметр("КодБИК", БИК);
				Запрос.УстановитьПараметр("КоррСчет", КС);
				
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если Не РезультатЗапроса.Пустой() Тогда
					
					Выборка = РезультатЗапроса.Выбрать();
					Выборка.Следующий();
					
				    //	2.Создать счет
					спрСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
					спрСчет.Наименование = "" + Пользователь.Наименование + " ("+ Выборка.Ссылка.Наименование + ": " + РасчетныйСчет + ")";
					спрСчет.Банк = Выборка.Ссылка;
					спрСчет.Владелец = Пользователь.Ссылка;
					спрСчет.НомерСчета = РасчетныйСчет;
					спрСчет.Записать();
					
					Пользователь.ОсновнойБанковскийСчет = спрСчет.Ссылка;					
					Пользователь.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
			//КонтактныеЛица, после записи контрагента!
			Для Каждого КонтактноеЛицо Из стрПользователь.КонтактныеЛица Цикл
				
				КонтактИмя = "";
				КонтактEmail = "";
				КонтактТелефон = "";
				
				Для Каждого Контакт Из КонтактноеЛицо Цикл
				
					Если Контакт.Тип = "Имя" Тогда						
						КонтактИмя = Контакт.Значение;
					ИначеЕсли Контакт.Тип = "E-mail" Тогда
						КонтактEmail = Контакт.Значение;
					ИначеЕсли Контакт.Тип = "Телефон" Тогда
						КонтактТелефон = Контакт.Значение;
					КонецЕсли;
					
				КонецЦикла;
				
				//Найти такой контакт, если есть, то перезаписать его
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	КонтактныеЛица.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.КонтактныеЛица КАК КонтактныеЛица
				|ГДЕ
				|	КонтактныеЛица.Наименование = &Наименование
				|	И КонтактныеЛица.Контрагент = &Контрагент";
				
				Запрос.УстановитьПараметр("Контрагент", Пользователь.Ссылка);
				Запрос.УстановитьПараметр("Наименование", КонтактИмя);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если Не РезультатЗапроса.Пустой() Тогда 
					
					Выборка = РезультатЗапроса.Выбрать();
					
					Выборка.Следующий();
					
					спрКонтактноеЛицо = Выборка.Ссылка.ПолучитьОбъект();
					
				Иначе
					
					спрКонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
					
				КонецЕсли;
				
				спрКонтактноеЛицо.Наименование = КонтактИмя;
				спрКонтактноеЛицо.Контрагент = Пользователь.Ссылка;
				
				спрКонтактноеЛицо.КонтактнаяИнформация.Очистить();
				
				Если ЗначениеЗаполнено(КонтактТелефон) Тогда 
					нСтрока = спрКонтактноеЛицо.КонтактнаяИнформация.Добавить(); 
					нСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
					нСтрока.Представление = КонтактТелефон;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КонтактEmail) Тогда 
					нСтрока = спрКонтактноеЛицо.КонтактнаяИнформация.Добавить(); 
					нСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					нСтрока.Представление = КонтактEmail;
				КонецЕсли;
				
				спрКонтактноеЛицо.Записать();
				
			КонецЦикла;
			
			СчКоличествоПользователей = СчКоличествоПользователей + 1;			
						
		КонецЦикла;
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка пользователей. Ошибка: В результате загрузки пользователей возникла ошибка." + Символы.ПС + ОО;		
		Возврат;
	КонецПопытки;
	
	#КонецОбласти	
	
	//Успешное завершение импорта
	Если ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //!!!Отправлять на сайт "Успех" только в случает корректной загрузки
		Возврат 		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайлаОбмена) Тогда
		
		ПараметрыСоединения.АдресСкриптаПараметры = "?type=users&mode=success&setdate=" + Формат(пВремяОбмена, "ДФ='dd.MM.yyyy H:m'"); //02.05.2017 16:41
		
		//Ожидается пустой ответ
		стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
		
		Если стОтветСервера.Ошибки <> "Получение данных с сайта: Получен пустой ответ." Тогда
			стРезультат.Ошибки = стОтветСервера.Ошибки;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	стРезультат.Результат = стРезультат.Результат + Символы.ПС + "Обработано: " + СчКоличествоПользователей + " пользователей из них новых: " + СчКоличествоПользователейНовых;
	
Конецпроцедуры

Процедура ВыгрузитьПользователей(стРезультат) Экспорт
	
	
	стРезультат = Новый Структура("Результат,Ошибки");
	стРезультат.Результат = "";
	стРезультат.Ошибки = Неопределено; //Нет ошибок
	
	Если НЕ УзелОбмена.ВыгружатьПользователей Тогда 
		стРезультат.Ошибки = "Не активирован флаг ""Выгружать пользователей"" в плане обмена.";
		Возврат;		
	КонецЕсли;
	
	//Получить пользователей к выгрузке
	СтруктураИзменений = ПолучитьСтруктуруИзмененийДляУзла(УзелОбмена);		
	Если СтруктураИзменений.Контрагенты.Количество() = 0 Тогда //Если нет изменений
		стРезультат.Результат = "Выгрузка пользователей. Нет изменений к выгрузке.";
		Возврат;		
	КонецЕсли;
	
	
	ПараметрыСоединения = ПолучитьПараметрыСоединения();	
	стСоединение = ПолучитьСоединение(ПараметрыСоединения);	
	Если ЗначениеЗаполнено(стСоединение.Ошибки) Тогда //Обработка ошибок
		стРезультат.Ошибки = стСоединение.Ошибки;
		Возврат;		
	КонецЕсли;
	
	
	//Авторизация
	HTTPВыполнитьАвторизацию(стСоединение.Соединение, ПараметрыСоединения, стРезультат);	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ЗаголовкиЗапросовCookie) ИЛИ ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //Авторизация не выполнена 
		Возврат;
	КонецЕсли;
	
	//Выгрузить данные в файл
	КаталогВыгрузки = КаталогВременныхФайлов() + "webdata\";
	
	Попытка		
		СоздатьКаталог(КаталогВыгрузки);
		УдалитьФайлы(КаталогВыгрузки, "*.*"); //очистить
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка пользователей. Ошибка: Ошибка при создании временного каталога для выгрузки данных." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	ИмяФайлаОбмена = КаталогВыгрузки + "users.xml";
	
	#Область ЗаписьXML
	
	//Запись данных в файл
	Попытка
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаОбмена, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("КоммерческаяИнформация");
		ЗаписьXML.ЗаписатьАтрибут("ВерсияСхемы","2.04");
		ЗаписьXML.ЗаписатьАтрибут("ДатаФормирования",Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Контрагенты");
		
		счКоличествоВыгружено = 0;
		
		Для Каждого Контрагент ИЗ СтруктураИзменений.Контрагенты Цикл
			
			//Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Контрагент");
			
			Ид = "" + ?(ЗначениеЗаполнено(Контрагент.IDНаСайте), Формат(Контрагент.IDНаСайте,"ЧГ=0"), "") + "#" + XMLСтрока(Контрагент.Ссылка); //в формате ID_сайта#Ссылка
			
			ЗаписатьXML(ЗаписьXML,	Ид,								"Ид",			НазначениеТипаXML.Неявное);
			ЗаписатьXML(ЗаписьXML,	Контрагент.Наименование,		"Наименование",	НазначениеТипаXML.Неявное);
			ЗаписатьXML(ЗаписьXML,	"Пользователь",					"Роль",			НазначениеТипаXML.Неявное);
			ЗаписатьXML(ЗаписьXML,	Контрагент.НаименованиеПолное,	"ПолноеНаименование",	НазначениеТипаXML.Неявное);
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("АдресРегистрации");
			
			нСтроки = Контрагент.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип",Перечисления.ТипыКонтактнойИнформации.Адрес));
			Если нСтроки.Количество() > 0 Тогда 
				ЗаписатьXML(ЗаписьXML,	нСтроки[0].Представление,	"Представление",	НазначениеТипаXML.Неявное);
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("АдресноеПоле");
				
				ЗаписатьXML(ЗаписьXML,	"Адрес",	"Тип",	НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML,	нСтроки[0].Представление,	"Значение",	НазначениеТипаXML.Неявное);
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); //АдресноеПоле
				
			Иначе				
				ЗаписатьXML(ЗаписьXML,	"",	"Представление",	НазначениеТипаXML.Неявное);				
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //АдресРегистрации
			
			
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Контакты");
			
			Для Каждого стрКи Из Контрагент.КонтактнаяИнформация Цикл 
				
				Если стрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда					
					ЗаписьXML.ЗаписатьНачалоЭлемента("Контакт");					
					ЗаписатьXML(ЗаписьXML,	"E-mail",	"Тип",	НазначениеТипаXML.Неявное);
					ЗаписатьXML(ЗаписьXML,	стрКИ.Представление,	"Значение",	НазначениеТипаXML.Неявное);						
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Контакт					
				ИначеЕсли стрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Контакт");					
					ЗаписатьXML(ЗаписьXML,	"Контактные телефоны (с кодом города)",	"Тип",	НазначениеТипаXML.Неявное);
					ЗаписатьXML(ЗаписьXML,	стрКИ.Представление,	"Значение",	НазначениеТипаXML.Неявное);						
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Контакт
				ИначеЕсли стрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ПочтовыйИндекс Тогда
					ЗаписьXML.ЗаписатьНачалоЭлемента("Контакт");					
					ЗаписатьXML(ЗаписьXML,	"Индекс",	"Тип",	НазначениеТипаXML.Неявное);
					ЗаписатьXML(ЗаписьXML,	стрКИ.Представление,	"Значение",	НазначениеТипаXML.Неявное);						
					ЗаписьXML.ЗаписатьКонецЭлемента(); //Контакт
				КонецЕсли;				
				
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Контакты
			
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Контрагент
			
			счКоличествоВыгружено = счКоличествоВыгружено + 1;
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //Контрагенты
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //КоммерческаяИнформация
		
		ЗаписьXML.Закрыть();
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка пользователей. Ошибка: При записи данных в файл возникла ошибка." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	#КонецОбласти

	
	мсФайлыДляОтправки = Новый Массив;
	мсФайлыДляОтправки.Добавить(ИмяФайлаОбмена);
	
	//Отправить на сервер
	Для Каждого ФайлДляОтправки Из мсФайлыДляОтправки Цикл 
		
		ПараметрыСоединения.АдресСкриптаПараметры = "?type=users&mode=import&filename=" + ПолучитьИмяФайлаИзПолногоПути(ФайлДляОтправки);
		
		//Ожидается 1 строка "success"
		стРезультатОтправки = HTTPОтправитьФайлНаСервер(стСоединение.Соединение, ПараметрыСоединения, ФайлДляОтправки);
		
		Если ЗначениеЗаполнено(стРезультатОтправки.Ошибки) Тогда
			стРезультат.Ошибки = стРезультатОтправки.Ошибки;
			Возврат;
		КонецЕсли;
		
		Если стРезультатОтправки.ОтветСервера <> "success" Тогда
			стРезультат.Ошибки = "Выгрузка пльзователей. Ошибка не получен ответ ""success"" от сервера.";
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	//Грохнуть временные файлы
	Попытка	
		УдалитьФайлы(КаталогВыгрузки)
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка пользователей. Ошибка: Ошибка при удалении временного каталога для выгрузки данных." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	//Очистить регистрацию
	Для Каждого Контрагент ИЗ СтруктураИзменений.Контрагенты Цикл		
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Контрагент);
	КонецЦикла;
	
	стРезультат.Результат = стРезультат.Результат + "Выгрузка пользователей. Успешно. К выгрузке " + СтруктураИзменений.Контрагенты.Количество() + ", выгружено " + счКоличествоВыгружено;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеСФормыОбратнойСвязи(стРезультат) Экспорт
	
	стРезультат = Новый Структура("Результат,Ошибки");
	стРезультат.Результат = "";
	стРезультат.Ошибки = Неопределено; //Нет ошибок
	
	Если НЕ УзелОбмена.ЗагружатьДанныеФормыОбратнойСвязи Тогда 
		стРезультат.Ошибки = "Не активирован флаг ""Загружать данные с формы обратной связи"" в плане обмена.";
		Возврат;		
	КонецЕсли;
	
	ПараметрыСоединения = ПолучитьПараметрыСоединения();
	
	стСоединение = ПолучитьСоединение(ПараметрыСоединения);
	
	Если ЗначениеЗаполнено(стСоединение.Ошибки) Тогда //Обработка ошибок
		стРезультат.Ошибки = стСоединение.Ошибки;
		Возврат;		
	КонецЕсли;
	
	
	//Авторизация
	HTTPВыполнитьАвторизацию(стСоединение.Соединение, ПараметрыСоединения, стРезультат);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ЗаголовкиЗапросовCookie) ИЛИ ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //Авторизация не выполнена 
		Возврат;
	КонецЕсли;
	
	//Начинаются костыли! Нужно обратиться к следующему адресу
	//https://www.orenburgshal.ru/1c/feedback/1c/1c_exchange.php/?type=info&mode=query	
	ПараметрыСоединения.АдресСкрипта = СтрЗаменить(ПараметрыСоединения.АдресСкрипта,"shop/","feedback/");
	
	//Получить данные
	ПараметрыСоединения.АдресСкриптаПараметры = "?type=info&mode=query";
	
	//Ожидается XML или ZIP
	стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
	
	Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
		стРезультат.Ошибки = стОтветСервера.Ошибки;
		Возврат;
	КонецЕсли;
	
	#Область ОбработкаXML
	
	//Обработка XML
	СтрокаXML = "";	
	Если Лев(стОтветСервера.ОтветСервера, 5) = "<?xml" Тогда			
		СтрокаXML = стОтветСервера.ОтветСервера;			
	КонецЕсли;
	
	
	Если ПустаяСтрока(СтрокаXML) Тогда //Обработка ошибок
		стРезультат.Ошибки = "Загрузка данных с формы обратной связи. Ошибка: Не удалось прочитать данные, загруженные с сайта. Получен ответ: " + Символы.ПС + стОтветСервера.ОтветСервера;		
		Возврат;		
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Попытка
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка данных с формы обратной связи. Ошибка: Не удалось обработать CML." + Символы.ПС + ОО;
		Возврат;
	КонецПопытки;
	
	мсРезультатРазборки = Новый Массив;	
	
	Попытка
		
		Пока ЧтениеXML.Прочитать() Цикл 
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "КоммерческаяИнформация" Тогда 
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		СтекУзлов = Новый Массив;
		ТекущийПуть = "";
		Пока ЧтениеXML.Прочитать() Цикл 
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
				СтекУзлов.Добавить(ЧтениеXML.Имя);
				ТекущийПуть = МассивВСтроку(СтекУзлов);
				
				//Документ
				Если ЧтениеXML.Имя = "Документ" И ТекущийПуть = "Документ" Тогда 
					стДокумент = Новый Структура("Ид,Дата,Время,Сообщения"); //Сообщения
					
				//Сообщения	
				ИначеЕсли ЧтениеXML.Имя = "Сообщения" И ТекущийПуть = "Документ\Сообщения" Тогда 
					мсСообщения = Новый Массив;
					
				//Сообщение				
				ИначеЕсли ЧтениеXML.Имя = "Сообщение" И ТекущийПуть = "Документ\Сообщения\Сообщение" Тогда 
					стСообщение = Новый Структура("Ид,Имя,Форма,Поля"); //Поля
					
				//Поля	
				ИначеЕсли ЧтениеXML.Имя = "Поля" И ТекущийПуть = "Документ\Сообщения\Сообщение\Поля" Тогда 
					мсПоля = Новый Массив; 
					
				//Поле	
				ИначеЕсли ЧтениеXML.Имя = "Поле" И ТекущийПуть = "Документ\Сообщения\Сообщение\Поля\Поле" Тогда 
					стПоле = Новый Структура("Тип,Значение"); 
					
								
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
				
				//Документ
				Если ТекущийПуть = "Документ\Ид" Тогда
					стДокумент.Ид = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Дата" Тогда
					стДокумент.Дата = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Время" Тогда
					стДокумент.Время = ЧтениеXML.Значение;
					
				//Сообщение	
				ИначеЕсли ТекущийПуть = "Документ\Сообщения\Сообщение\Ид" Тогда
					стСообщение.Ид = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Сообщения\Сообщение\Имя" Тогда
					стСообщение.Имя = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Сообщения\Сообщение\Форма" Тогда
					стСообщение.Форма = ЧтениеXML.Значение;
					
				//Поле	
				ИначеЕсли ТекущийПуть = "Документ\Сообщения\Сообщение\Поля\Поле\Тип" Тогда
					стПоле.Тип = ЧтениеXML.Значение;
				ИначеЕсли ТекущийПуть = "Документ\Сообщения\Сообщение\Поля\Поле\Значение" Тогда
					стПоле.Значение = ЧтениеXML.Значение;
					
				КонецЕсли;
				
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если ЧтениеXML.Имя = "КоммерческаяИнформация" Тогда 
					Прервать;	
				КонецЕсли;
				
				//Документ
				Если ТекущийПуть = "Документ" Тогда 
					мсРезультатРазборки.Добавить(стДокумент);
					
				//Сообщения
				ИначеЕсли ТекущийПуть = "Документ\Сообщения" Тогда 
					стДокумент.Сообщения = мсСообщения;
					
				//Сообщение
				ИначеЕсли ТекущийПуть = "Документ\Сообщения\Сообщение" Тогда 
					мсСообщения.Добавить(стСообщение);
					
				//Поля
				ИначеЕсли ТекущийПуть = "Документ\Сообщения\Сообщение\Поля" Тогда 
					стСообщение.Поля = мсПоля;
					
				//Поле
				ИначеЕсли ТекущийПуть = "Документ\Сообщения\Сообщение\Поля\Поле" Тогда					
					мсПоля.Добавить(стПоле);
					
				КонецЕсли;	
				
				СтекУзлов.Удалить(СтекУзлов.Количество()-1);
				ТекущийПуть = МассивВСтроку(СтекУзлов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка данных с формы обратной связи. Ошибка: В результате разбора XML возникла ошибка." + Символы.ПС + ОО;		
		Возврат;
	КонецПопытки;
	
	стРезультат.Результат = стРезультат.Результат + "Загрузка данных с формы обратной связи. Получено " + мсРезультатРазборки.Количество() + " документов";
	
	#КонецОбласти
	
	#Область ЗаписьЗаказов
	
	//Запись 
	
	//Счетчики
	СчКоличество = 0;
	СчКоличествоНовых = 0;
	
	Попытка
		
		Для Каждого стрЭлемент ИЗ мсРезультатРазборки Цикл
			
			спрЭлемент = Справочники.ОбратнаяCвязь.НайтиПоРеквизиту("IDНаСайте", Число(стрЭлемент.Ид));
			Если НЕ ЗначениеЗаполнено(спрЭлемент) Тогда 
				спрЭлемент = Справочники.ОбратнаяCвязь.СоздатьЭлемент();
				НовыйЭлемент = Истина;
				СчКоличествоНовых = СчКоличествоНовых + 1;
			Иначе
				НовыйЭлемент = Ложь;
				спрЭлемент = спрЭлемент.ПолучитьОбъект();				
			КонецЕсли;
			
			//2016-12-28 -> 28-12-2016
			ДатаНаСайтеПредв = стрЭлемент.Дата;
			ДатаНаСайтеПредвМогоСтрок = СтрЗаменить(ДатаНаСайтеПредв,"-",Символы.ПС);
			ДатаНаСайтеПредвИзменено = "" + СтрПолучитьСтроку(ДатаНаСайтеПредвМогоСтрок,3) + "." 
				+ СтрПолучитьСтроку(ДатаНаСайтеПредвМогоСтрок,2) + "."
				+ СтрПолучитьСтроку(ДатаНаСайтеПредвМогоСтрок,1);
			
			
			спрЭлемент.ДатаНаСайте = ПолучитьДатуВремяИзСтроки(ДатаНаСайтеПредвИзменено, стрЭлемент.Время);
			спрЭлемент.IDНаСайте = стрЭлемент.Ид;
			спрЭлемент.УстановитьНовыйКод();
			спрЭлемент.Статус = Перечисления.СтатусыЗаявокСФормыОбратнойСвязи.Новый;
			
			спрЭлемент.КонтактнаяИнформация.Очистить();
			
			Для Каждого стрСоотбщение Из стрЭлемент.Сообщения Цикл 
				
				спрЭлемент.Пользователь = стрСоотбщение.Имя;
				спрЭлемент.РазделСайта	= стрСоотбщение.Форма;
				
				Для Каждого Поле Из стрСоотбщение.Поля Цикл 
					
					нСтрКИ = спрЭлемент.КонтактнаяИнформация.Добавить();
					
					Если Поле.Тип = "E-mail" Тогда
						нСтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
					ИначеЕсли Поле.Тип = "Телефон (с кодом города)" ИЛИ Поле.Тип = "Телефон" Тогда
						нСтрКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;						
					Иначе
						нСтрКИ.Тип = Поле.Тип
					КонецЕсли;		
					
					нСтрКИ.Представление = Поле.Значение; 
					
				КонецЦикла;
				
			КонецЦикла;
			
			спрЭлемент.Наименование = спрЭлемент.IDНаСайте;
						
			спрЭлемент.ОбменДанными.Загрузка = Истина;			
			спрЭлемент.Записать();
			
			СчКоличество = СчКоличество + 1;
			
		КонецЦикла;
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Загрузка данных с формы обратной связи. Ошибка: В результате записи возникла ошибка." + Символы.ПС + ОО;		
		Возврат;
	КонецПопытки;
	
	#КонецОбласти	
	
	стРезультат.Результат = стРезультат.Результат + Символы.ПС + "Обработано: " + СчКоличество + " элементов из них новых: " + СчКоличествоНовых;
	
КонецПроцедуры

Процедура ЗагрузитьТовары(стРезультат) Экспорт
	
	стРезультат = Новый Структура("Результат, Ошибки");
	стРезультат.Результат = "";
	стРезультат.Ошибки = Неопределено; //Нет ошибок
	
	Если НЕ УзелОбмена.ЗагружатьТовары Тогда 
		стРезультат.Ошибки = "Не активирован флаг ""Загружать товары"" в плане обмена.";
		Возврат;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УзелОбмена.АдресВыгрузкиТоваров) Тогда 
		стРезультат.Ошибки = "Не указан адрес выгрузки товаров в плане обмена.";
		Возврат;
	КонецЕсли;
	
	ПараметрыСоединения = ПолучитьПараметрыСоединения();
	
	стСоединение = ПолучитьСоединение(ПараметрыСоединения);
	
	Если ЗначениеЗаполнено(стСоединение.Ошибки) Тогда //Обработка ошибок
		стРезультат.Ошибки = стСоединение.Ошибки;
		Возврат;		
	КонецЕсли;	
	
	//Авторизация
	HTTPВыполнитьАвторизацию(стСоединение.Соединение, ПараметрыСоединения, стРезультат);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ЗаголовкиЗапросовCookie) ИЛИ ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //Авторизация не выполнена 
		Возврат;
	КонецЕсли;
	
	пВремяОбмена = ТекущаяДата() - 60*60*2;
	
	//Получить cvs выгрузки
	//https://www.orenburgshal.ru/shop/export/9/ //это вручную настроено
	ПараметрыСоединения.АдресСкрипта = УзелОбмена.АдресВыгрузкиТоваров;
	ПараметрыСоединения.АдресСкриптаПараметры = "";	
	
	//Ожидается CVS
	стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
	
	Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
		стРезультат.Ошибки = стОтветСервера.Ошибки;
		Возврат;
	КонецЕсли;
	
	Пока Найти(стОтветСервера.ОтветСервера, "Refresh") > 0 Цикл 
		
		//Необходимо найти параметры с котороми обращаться к сайту
		
		//Пример ответа с редиректом
		//		Exported: 200
		//		<meta http-equiv="Refresh" content="0; url=https://www.orenburgshal.ru/shop/export/9/?2001">
		
		URL = ПараметрыСоединения.Сервер + "/" + УзелОбмена.АдресВыгрузкиТоваров;	//www.orenburgshal.ru/shop/export/9/
		URLДлина = СтрДлина(ПараметрыСоединения.Сервер + "/" + УзелОбмена.АдресВыгрузкиТоваров);	//34
		
		СтрНачало = СтрНайти(стОтветСервера.ОтветСервера, ПараметрыСоединения.Сервер + "/" + УзелОбмена.АдресВыгрузкиТоваров);
		
		СтрКонец = СтрНайти(Сред(стОтветСервера.ОтветСервера, СтрНачало + URLДлина, СтрДлина(стОтветСервера.ОтветСервера) - (СтрНачало + URLДлина) + 1), """");
		
		ПараметрыСоединения.АдресСкриптаПараметры = Сред(стОтветСервера.ОтветСервера, СтрНачало + URLДлина, СтрКонец - 1);
		
		стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
		стРезультат.Ошибки = стОтветСервера.Ошибки;
		Возврат;
	КонецЕсли;
	
	//Записть данные экспорта во временный файл
	ИмяCVS = ПолучитьИмяВременногоФайла("csv");	
	Файл = Новый ЗаписьТекста(ИмяCVS);
	Файл.ЗаписатьСтроку(стОтветСервера.ОтветСервера);	
	Файл.Закрыть();
	
	ИмпортТоварыНаСервере(ИмяCVS);
	
КонецПроцедуры

Процедура ВыгрузитьОстаткиТоваров(стРезультат) Экспорт
	
	стРезультат = Новый Структура("Результат,Ошибки");
	стРезультат.Результат = "";
	стРезультат.Ошибки = Неопределено; //Нет ошибок
	
	Если НЕ УзелОбмена.ВыгружатьОстаткиТоваров Тогда 
		стРезультат.Ошибки = "Не активирован флаг ""Выгружать остатки товаров"" в плане обмена.";
		Возврат;		
	КонецЕсли;	
	
	ПараметрыСоединения = ПолучитьПараметрыСоединения();	
	стСоединение = ПолучитьСоединение(ПараметрыСоединения);	
	Если ЗначениеЗаполнено(стСоединение.Ошибки) Тогда //Обработка ошибок
		стРезультат.Ошибки = стСоединение.Ошибки;
		Возврат;		
	КонецЕсли;
	
	
	//Авторизация
	HTTPВыполнитьАвторизацию(стСоединение.Соединение, ПараметрыСоединения, стРезультат);	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ЗаголовкиЗапросовCookie) ИЛИ ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //Авторизация не выполнена 
		Возврат;
	КонецЕсли;
	
	#Область ПолучитьПараметрыВыгрузки
	
	//Получить параметры выгрузки
	ПараметрыСоединения.АдресСкриптаПараметры = "?type=catalog&mode=init"; //http://<сайт>/<путь> /1c_exchange.php?type=catalog&mode=init	
	//Ожидается 2 строки zip=yes/no \n file_limit=1000000
	стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
	
	Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
		стРезультат.Ошибки = стОтветСервера.Ошибки;
		Возврат;
	КонецЕсли;
	
	Если СтрЧислоСтрок(стОтветСервера.ОтветСервера) <> 2 Тогда		
		стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ответ с сайта не содержит количество ожидаемых строк.";
		Возврат;
	КонецЕсли;
	
	Если НЕ (СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPРазрешен
		ИЛИ СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPЗапрещен) Тогда //Проверить первую строку д/быть zip=no или zip=yes
		стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ответ с сайта не содержит допустимых параметров.";
		Возврат;		
	КонецЕсли;
	
	ZIPФайлыРазрешены = СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPРазрешен;
	ОграничениеРазмераФрагментаФайлаОбмена = 0;
	
	Попытка		
		ОграничениеРазмераФрагментаФайлаОбмена = Число(СтрЗаменить(СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 2))),
		ПараметрыСоединения.ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена, "")); //file_limit= вырезать		
	Исключение		 		
		стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ошибка получения параметров обмена (ограничение размера файла).";
		ОграничениеРазмераФрагментаФайлаОбмена = -1;
		//Возврат; Не критичная ошибка
	КонецПопытки;
	
	ОграничениеРазмераФрагментаФайлаОбмена = -1; //ЮРР 05.04.2017 10:52:31 На данный момент не поддерживается сайтом
	
	#КонецОбласти	
	
	
	//Выгрузить данные в файл
	мсФайлыДляОтправки = Новый Массив;
	
	КаталогВыгрузки = КаталогВременныхФайлов() + "webdata\";
	
	Попытка		
		СоздатьКаталог(КаталогВыгрузки);
		УдалитьФайлы(КаталогВыгрузки, "*.*"); //очистить
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка остатков. Ошибка: Ошибка при создании временного каталога для выгрузки данных." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	ИмяФайлаОбмена = КаталогВыгрузки + "remnants.xml";
	
	#Область ЗаписьXML	
	
	//Запись данных в файл
	счТоварыКоличествоВыгружено = 0;	
	
	Попытка
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайлаОбмена, "UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("КоммерческаяИнформация");
		ЗаписьXML.ЗаписатьАтрибут("ВерсияСхемы","2.04");
		ЗаписьXML.ЗаписатьАтрибут("ДатаФормирования",Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"));		
		
		//Выбрать данные
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.IDНаСайте в (673,672) или истина
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
		|	ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ втОстатки
		|ИЗ
		|	РегистрНакопления.Запасы.Остатки(
		|			&ТекущаяДата,
		|			Номенклатура В
		|					(ВЫБРАТЬ
		|						втНоменклатура.Ссылка КАК Ссылка
		|					ИЗ
		|						втНоменклатура КАК втНоменклатура)
		|				И Склад = &Склад) КАК ЗапасыОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыВРезервеОстатки.Номенклатура КАК Номенклатура,
		|	СУММА(ТоварыВРезервеОстатки.КоличествоОстаток) КАК КоличествоРезерв
		|ПОМЕСТИТЬ втРезервы
		|ИЗ
		|	РегистрНакопления.ТоварыВРезерве.Остатки(
		|			&ТекущаяДата,
		|			Номенклатура В
		|					(ВЫБРАТЬ
		|						втНоменклатура.Ссылка КАК Ссылка
		|					ИЗ
		|						втНоменклатура КАК втНоменклатура)
		|				И Склад = &Склад) КАК ТоварыВРезервеОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВРезервеОстатки.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНоменклатура.Ссылка КАК Номенклатура,
		|	втНоменклатура.Ссылка.Наименование КАК Наименование,
		|	втНоменклатура.Ссылка.IDНаСайте КАК IDНаСайте,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(втРезервы.КоличествоРезерв, 0) > 0
		|			ТОГДА ЕСТЬNULL(втОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(втРезервы.КоличествоРезерв, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоОстаток
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
		|		ПО втНоменклатура.Ссылка = втОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРезервы КАК втРезервы
		|		ПО втНоменклатура.Ссылка = втРезервы.Номенклатура";
		
		Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоКоду("000000001"));	//Основной
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
		ВыборкаТоварыОстатки = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаТоварыОстатки.Количество() > 0 Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Каталог");
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("Товары");				
			
			Пока ВыборкаТоварыОстатки.Следующий() Цикл
				
				//<Товар>
				//	<Ид>403#3a96b44a-ee9a-11e6-b79d-74d43502462b</Ид> <!-- Ид на сайте # Ид в 1с-->
				//	<Наименование>Тубус из бересты (маленький)</Наименование>				
				//	<Количество>12</Количество>
				//</Товар>
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Товар");
				
				ЗаписатьXML(ЗаписьXML,	"" + ВыборкаТоварыОстатки.IDНаСайте + "#" + XMLСтрока(ВыборкаТоварыОстатки.Номенклатура),	"Ид",			НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML,	ВыборкаТоварыОстатки.Наименование,															"Наименование",	НазначениеТипаXML.Неявное);
				ЗаписатьXML(ЗаписьXML,	ВыборкаТоварыОстатки.КоличествоОстаток,														"Количество",	НазначениеТипаXML.Неявное);
				
				ЗаписьXML.ЗаписатьКонецЭлемента(); //Товар
				
				счТоварыКоличествоВыгружено = счТоварыКоличествоВыгружено + 1;
				
			КонецЦикла;
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Товары
			
			ЗаписьXML.ЗаписатьКонецЭлемента(); //Каталог
			
		КонецЕсли;		
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //КоммерческаяИнформация
		
		ЗаписьXML.Закрыть();
		
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка остатков. Ошибка: При записи данных в файл возникла ошибка." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	//Сжать при необходимости и разделить на части при превышении размера	
	Если ZIPФайлыРазрешены Тогда
		
		ИмяФайлаОбменаАрхив = КаталогВыгрузки + "remnants.zip";
		ЗаписьАрхива = Новый ЗаписьZipФайла(ИмяФайлаОбменаАрхив);		
		ЗаписьАрхива.Добавить(ИмяФайлаОбмена);
		
		Попытка
			ЗаписьАрхива.Записать();
			ИмяФайлаОбмена = ИмяФайлаОбменаАрхив;
		Исключение
			ОО = ОписаниеОшибки();
			стРезультат.Ошибки = "Выгрузка остатков. Ошибка: Не удалось записать zip-архив." + Символы.ПС + ОО;
			Возврат;		
		КонецПопытки;
		
	КонецЕсли;		
	
	Если ОграничениеРазмераФрагментаФайлаОбмена > 0 Тогда		
		мсФайлыДляОтправки = РазделитьФайлНаФрагменты(ИмяФайлаОбмена,ОграничениеРазмераФрагментаФайлаОбмена);		
	Иначе
		мсФайлыДляОтправки.Добавить(ИмяФайлаОбмена);
	КонецЕсли;		
	
	#КонецОбласти
	
	
	//Отправить на сервер
	Для Каждого ФайлДляОтправки Из мсФайлыДляОтправки Цикл 
		
		ПараметрыСоединения.АдресСкриптаПараметры = "?type=catalog&mode=file&filename=" + ПолучитьИмяФайлаИзПолногоПути(ФайлДляОтправки); //http://<сайт>/<путь> /1c_exchange.php?type=catalog&mode=file&filename=<имя файла>
		
		//Ожидается 1 строка "success"
		стРезультатОтправки = HTTPОтправитьФайлНаСервер(стСоединение.Соединение, ПараметрыСоединения, ФайлДляОтправки);
		
		Если ЗначениеЗаполнено(стРезультатОтправки.Ошибки) Тогда
			стРезультат.Ошибки = стРезультатОтправки.Ошибки;
			Возврат;
		КонецЕсли;
		
		Если СтрПолучитьСтроку(стРезультатОтправки.ОтветСервера,1) <> "success" Тогда
			стРезультат.Ошибки = "Выгрузка остатков. Ошибка: Ошибка выгрузки фалов на сайт, не получен ответ ""success"" от сайта.";
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	//Отправить запрос на обработку выгруженных файлов                                                                //remnants.xml
	ПараметрыСоединения.АдресСкриптаПараметры = "?type=catalog&mode=remnants&filename=" + ПолучитьИмяФайлаИзПолногоПути(ИмяФайлаОбмена) + "&file=" + ПолучитьИмяФайлаИзПолногоПути(ИмяФайлаОбмена); //http://<сайт>/<путь> /1c_exchange.php?type=catalog&mode=remnants&filename=<имя файла>
	
	//Ожидается 1 строка "success"
	стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
	
	Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
		стРезультат.Ошибки = стОтветСервера.Ошибки;
		Возврат;
	КонецЕсли;
	
	Если СтрПолучитьСтроку(стОтветСервера.ОтветСервера,1) <> "success" Тогда
		стРезультат.Ошибки = "Выгрузка остатков. Ошибка: Ошибка обработки файлов сайтом, не получен ответ ""success"" от сайта.";
		Возврат;
	КонецЕсли;
	
	//Грохнуть временные файлы
	Попытка	
		УдалитьФайлы(КаталогВыгрузки)
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка остатков. Ошибка: Ошибка при удалении временного каталога для выгрузки данных." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	стРезультат.Результат = стРезультат.Результат + "Выгрузка остатков. Успешно. Товары к выгрузке " + ВыборкаТоварыОстатки.Количество() + ", выгружено " + счТоварыКоличествоВыгружено;
	
КонецПроцедуры

Процедура ВыгрузитьСерийныеНомера(стРезультат, ПолнаяВыгрузка = Ложь) Экспорт
	
	стРезультат = Новый Структура("Результат,Ошибки");
	стРезультат.Результат = "";
	стРезультат.Ошибки = Неопределено; //Нет ошибок
	
	Если НЕ УзелОбмена.ВыгружатьСерийныеНомера Тогда 
		стРезультат.Ошибки = "Не активирован флаг ""Выгружать серийные номера"" в плане обмена.";
		Возврат;		
	КонецЕсли;	
	
	ПараметрыСоединения = ПолучитьПараметрыСоединения();	
	стСоединение = ПолучитьСоединение(ПараметрыСоединения);	
	Если ЗначениеЗаполнено(стСоединение.Ошибки) Тогда //Обработка ошибок
		стРезультат.Ошибки = стСоединение.Ошибки;
		Возврат;		
	КонецЕсли;
	
	//Авторизация
	HTTPВыполнитьАвторизацию(стСоединение.Соединение, ПараметрыСоединения, стРезультат);	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоединения.ЗаголовкиЗапросовCookie) ИЛИ ЗначениеЗаполнено(стРезультат.Ошибки) Тогда //Авторизация не выполнена 
		Возврат;
	КонецЕсли;
	
	#Область ПолучитьПараметрыВыгрузки
	
	//Получить параметры выгрузки
	ПараметрыСоединения.АдресСкрипта = УзелОбмена.АдресВыгрузкиСерийныхНомеров;
	//ПараметрыСоединения.АдресСкриптаПараметры = "?type=catalog&mode=init"; //http://<сайт>/<путь> /1c_exchange.php?type=catalog&mode=init	
	////Ожидается 2 строки zip=yes/no \n file_limit=1000000
	//стОтветСервера = HTTPПолучитьДанныеССервера(стСоединение.Соединение, ПараметрыСоединения);
	//
	//Если ЗначениеЗаполнено(стОтветСервера.Ошибки) Тогда
	//	стРезультат.Ошибки = стОтветСервера.Ошибки;
	//	Возврат;
	//КонецЕсли;
	//
	//Если СтрЧислоСтрок(стОтветСервера.ОтветСервера) <> 2 Тогда		
	//	стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ответ с сайта не содержит количество ожидаемых строк.";
	//	Возврат;
	//КонецЕсли;
	//
	//Если НЕ (СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPРазрешен
	//	ИЛИ СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPЗапрещен) Тогда //Проверить первую строку д/быть zip=no или zip=yes
	//	стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ответ с сайта не содержит допустимых параметров.";
	//	Возврат;		
	//КонецЕсли;
	//
	ZIPФайлыРазрешены = Ложь;
	//ZIPФайлыРазрешены = СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 1))) = ПараметрыСоединения.ОтветСервера_ZIPРазрешен;
	//ОграничениеРазмераФрагментаФайлаОбмена = 0;
	//
	//Попытка		
	//	ОграничениеРазмераФрагментаФайлаОбмена = Число(СтрЗаменить(СокрЛП(НРег(СтрПолучитьСтроку(стОтветСервера.ОтветСервера, 2))),
	//	ПараметрыСоединения.ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена, "")); //file_limit= вырезать		
	//Исключение		 		
	//	стРезультат.Ошибки = "Получение параметров обмена. Ошибка: Ошибка получения параметров обмена (ограничение размера файла).";
	//	ОграничениеРазмераФрагментаФайлаОбмена = -1;
	//	//Возврат; Не критичная ошибка
	//КонецПопытки;
	//
	ОграничениеРазмераФрагментаФайлаОбмена = -1; //ЮРР 05.04.2017 10:52:31 На данный момент не поддерживается сайтом
	
	#КонецОбласти	
	 	
	//Выгрузить данные в файл
	мсФайлыДляОтправки = Новый Массив;
	
	КаталогВыгрузки = КаталогВременныхФайлов() + "webdata\";
	
	Попытка		
		СоздатьКаталог(КаталогВыгрузки);
		УдалитьФайлы(КаталогВыгрузки, "*.*"); //очистить
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка серийных номеров. Ошибка: Ошибка при создании временного каталога для выгрузки данных." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	ИмяФайлаОбмена = КаталогВыгрузки + "serial_numbers.json";
		
	#Область ЗаписьJSON	
	
	//Запись данных в файл
	счСерийникиКоличествоВыгружено = 0;	
	
	Попытка

		ЗаписьДЖСОН = Новый ЗаписьJSON;
		ЗаписьДЖСОН.ОткрытьФайл(ИмяФайлаОбмена);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзмененныеСерийныеНомера.СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ ВТ_ИзмененныеСерийныеНомера
		|ИЗ
		|	&ИзмененныеСерийныеНомера КАК ИзмененныеСерийныеНомера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыПоСерийнымНомерамОстатки.СерийныйНомер КАК СерийныйНомер
		|ПОМЕСТИТЬ ВТ_СерийныеНомера
		|ИЗ
		|	РегистрНакопления.ЗапасыПоСерийнымНомерам.Остатки(, Склад.ВыгружатьОстаткиСерийныхНомеров) КАК ЗапасыПоСерийнымНомерамОстатки
		|ГДЕ
		|	ЗапасыПоСерийнымНомерамОстатки.КоличествоОстаток > 0
		|	И &ПолнаяВыгрузка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ИзмененныеСерийныеНомера.СерийныйНомер
		|ИЗ
		|	ВТ_ИзмененныеСерийныеНомера КАК ВТ_ИзмененныеСерийныеНомера
		|ГДЕ
		|	НЕ &ПолнаяВыгрузка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_СерийныеНомера.СерийныйНомер.Наименование КАК serial_number,
		|	ВТ_СерийныеНомера.СерийныйНомер.Владелец.Артикул КАК product_article,
		|	ВТ_СерийныеНомера.СерийныйНомер.Владелец.IDНаСайте КАК product_id,
		|	ЕСТЬNULL(ДанныеСерийныхНомеров.Вязальщица.IDНаСайте, 0) КАК id_master,
		|	ЕСТЬNULL(ДанныеСерийныхНомеров.Вязальщица.Наименование, """") КАК fio_master,
		|	ЕСТЬNULL(ДанныеСерийныхНомеров.ВязальщицаНаСайте.IDНаСайте, 0) КАК id_master_f,
		|	ДанныеСерийныхНомеров.Вес КАК weight,
		|	ЕСТЬNULL(ДанныеСерийныхНомеров.АртикулСтарый.Артикул, """") КАК product_article_old,
		|	ЕСТЬNULL(ДанныеСерийныхНомеров.АртикулСтарый.IDНаСайте, 0) КАК product_id_old,
		|	ДанныеСерийныхНомеров.ДатаПоступления КАК date_of_receipt,
		|	ДанныеСерийныхНомеров.ДатаСписания КАК date_of_debiting
		|ИЗ
		|	ВТ_СерийныеНомера КАК ВТ_СерийныеНомера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСерийныхНомеров КАК ДанныеСерийныхНомеров
		|		ПО ВТ_СерийныеНомера.СерийныйНомер = ДанныеСерийныхНомеров.СерийныйНомер";
		Запрос.УстановитьПараметр("ПолнаяВыгрузка", ПолнаяВыгрузка);
		
		ИзмененныеСерийныеНомера = Новый ТаблицаЗначений;
		ИзмененныеСерийныеНомера.Колонки.Добавить("СерийныйНомер", Новый ОписаниеТипов("СправочникСсылка.СерийныеНомера"));
				
		Если Не ПолнаяВыгрузка Тогда
			
			НомерОтправленного = УзелОбмена.НомерОтправленного + 1;
			ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, НомерОтправленного);
			Пока ВыборкаИзменений.Следующий() Цикл
				
				ТекущийОбъект = ВыборкаИзменений.Получить();
				
				Если ТипЗнч(ТекущийОбъект) <> Тип("РегистрСведенийНаборЗаписей.ДанныеСерийныхНомеров") Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ИзмененныеСерийныеНомера.Добавить();
				НоваяСтрока.СерийныйНомер = ТекущийОбъект.Отбор.СерийныйНомер.Значение;
							
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИзмененныеСерийныеНомера", ИзмененныеСерийныеНомера);
		
		МассивСерийныхНомеров = Новый Массив;
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаСерийныхНомеров = РезультатЗапроса.Выбрать();
		Пока ВыборкаСерийныхНомеров.Следующий() Цикл
			
			ТекущаяСтруктура = Новый Структура;
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				ТекущееЗначение = ВыборкаСерийныхНомеров[Колонка.Имя]; 
				ТекущаяСтруктура.Вставить(Колонка.Имя, ?(ТекущееЗначение = NULL, Неопределено, ТекущееЗначение));
			КонецЦикла;
			
			МассивСерийныхНомеров.Добавить(ТекущаяСтруктура);
			счСерийникиКоличествоВыгружено = счСерийникиКоличествоВыгружено + 1;

		КонецЦикла;
		
		ЗаписатьJSON(ЗаписьДЖСОН, МассивСерийныхНомеров);
		ЗаписьДЖСОН.Закрыть();  	
				
	Исключение		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка серийных номеров. Ошибка: При записи данных в файл возникла ошибка." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	//Сжать при необходимости и разделить на части при превышении размера	
	Если ZIPФайлыРазрешены Тогда
		
		ИмяФайлаОбменаАрхив = КаталогВыгрузки + "serial_numbers.json";
		ЗаписьАрхива = Новый ЗаписьZipФайла(ИмяФайлаОбменаАрхив);		
		ЗаписьАрхива.Добавить(ИмяФайлаОбмена);
		
		Попытка
			ЗаписьАрхива.Записать();
			ИмяФайлаОбмена = ИмяФайлаОбменаАрхив;
		Исключение
			ОО = ОписаниеОшибки();
			стРезультат.Ошибки = "Выгрузка серийных номеров. Ошибка: Не удалось записать zip-архив." + Символы.ПС + ОО;
			Возврат;		
		КонецПопытки;
		
	КонецЕсли;		
	
	Если ОграничениеРазмераФрагментаФайлаОбмена > 0 Тогда		
		мсФайлыДляОтправки = РазделитьФайлНаФрагменты(ИмяФайлаОбмена, ОграничениеРазмераФрагментаФайлаОбмена);		
	Иначе
		мсФайлыДляОтправки.Добавить(ИмяФайлаОбмена);
	КонецЕсли;		
	
	#КонецОбласти
		
	//Отправить на сервер
	Для Каждого ФайлДляОтправки Из мсФайлыДляОтправки Цикл 
		
		ПараметрыСоединения.АдресСкриптаПараметры = "?type=catalog&mode=file&filename=" + ПолучитьИмяФайлаИзПолногоПути(ФайлДляОтправки); //http://<сайт>/<путь> /1c_exchange.php?type=catalog&mode=file&filename=<имя файла>
		
		//Ожидается 1 строка "success"
		стРезультатОтправки = HTTPОтправитьФайлНаСервер(стСоединение.Соединение, ПараметрыСоединения, ФайлДляОтправки, Истина);
		
		Если ЗначениеЗаполнено(стРезультатОтправки.Ошибки) Тогда
			стРезультат.Ошибки = стРезультатОтправки.Ошибки;
			Возврат;
		КонецЕсли;
		
		//Если СтрПолучитьСтроку(стРезультатОтправки.ОтветСервера,1) <> "success" Тогда
		//	стРезультат.Ошибки = "Выгрузка серийных номеров. Ошибка: Ошибка выгрузки фалов на сайт, не получен ответ ""success"" от сайта.";
		//	Возврат;
		//КонецЕсли;
		
	КонецЦикла;
	
	//Грохнуть временные файлы
	Попытка	
		УдалитьФайлы(КаталогВыгрузки)
	Исключение
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Выгрузка серийных номеров. Ошибка: Ошибка при удалении временного каталога для выгрузки данных." + Символы.ПС + ОО;
		Возврат;		
	КонецПопытки;
	
	Если Не ПолнаяВыгрузка Тогда
		Попытка
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, НомерОтправленного);
		Исключение
			ОО = ОписаниеОшибки();
			стРезультат.Ошибки = "Выгрузка серийных номеров. Ошибка: Ошибка при удалении регистрации измененных данных." + Символы.ПС + ОО;
			Возврат;		
		КонецПопытки;
	КонецЕсли;
	
	стРезультат.Результат = "" + стРезультат.Результат + "Выгрузка серийных номеров. Успешно. Выгружено " + счСерийникиКоличествоВыгружено;
	
КонецПроцедуры

// Процедуры
///////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////
// Функции

Функция ПолучитьПараметрыСоединения()
	
	ПараметрыСоединения = Новый Структура;
	
	ПараметрыИзАдреса = РазобратьАдресСайта(УзелОбмена.АдресСайта);
	
	ПараметрыСоединения.Вставить("Сервер", ПараметрыИзАдреса.HTTPСервер);
	ПараметрыСоединения.Вставить("АдресСкрипта", ПараметрыИзАдреса.HTTPАдресСкрипта);
	ПараметрыСоединения.Вставить("Порт", ПараметрыИзАдреса.HTTPПорт);
	ПараметрыСоединения.Вставить("ЗащищенноеСоединение", ПараметрыИзАдреса.HTTPЗащищенноеСоединение);	
	ПараметрыСоединения.Вставить("Пользователь", УзелОбмена.ИмяПользователя);
	ПараметрыСоединения.Вставить("Пароль", УзелОбмена.Пароль);
	ПараметрыСоединения.Вставить("Таймаут", 1800);
	//ПараметрыСоединения.Вставить("ИспользоватьАутентификациюОС","");
	
	//Прокси //Заложена возможность соединения через прокси, необходимо в узле хранить данные прокси и здесь вставить в структуру
	ПараметрыСоединения.Вставить("ПроксиИспользование", Ложь); 
	ПараметрыСоединения.Вставить("ПроксиИмяПользователя", Неопределено);
	ПараметрыСоединения.Вставить("ПроксиПароль", Неопределено);
	ПараметрыСоединения.Вставить("ПроксиСервер", Неопределено);
	ПараметрыСоединения.Вставить("ПроксиПорт", Неопределено);
	
	//Дополняемые параметры
	//Параметры скрипта
	ПараметрыСоединения.Вставить("АдресСкриптаПараметры", "");
	//Данные об авторизации
	ПараметрыСоединения.Вставить("ЗаголовкиЗапросовCookie", Неопределено); //Если авторизация прошла успешно заполняется Cookie, которые используются при каждом последующем обращении к сайту
	
	
	//Константы
	ПараметрыСоединения.Вставить("ОтветСервера_ZIPРазрешен", "zip=yes");
	ПараметрыСоединения.Вставить("ОтветСервера_ZIPЗапрещен", "zip=no");
	ПараметрыСоединения.Вставить("ОтветСервера_ОграничениеРазмераФрагментаФайлаОбмена", "file_limit=");
	//ПараметрыСоединения.Вставить("АдресСкриптаПараметры", "");    
	
	
	
	
	Возврат ПараметрыСоединения;	
	
КонецФункции

Функция ПолучитьСоединение(ПараметрыСоединения)
	
	стРезультат = Новый Структура("Соединение,Ошибки");	
	стРезультат.Соединение = Неопределено;
	стРезультат.Ошибки = Неопределено;
	
	ИнтернетПрокси = Неопределено;
	
	Если ПараметрыСоединения.ПроксиИспользование Тогда
		
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Пользователь = ПараметрыСоединения.ПроксиИмяПользователя;
		ИнтернетПрокси.Пароль		= ПараметрыСоединения.ПроксиПароль;
		
		ПротоколПрокси = ?(ПараметрыСоединения.ЗащищенноеСоединение, "HTTPS", "HTTP");
		
		Если ПараметрыСоединения.ПроксиПорт = 0 Тогда
			ИнтернетПрокси.Установить(ПротоколПрокси, ПараметрыСоединения.ПроксиСервер);
		Иначе
			ИнтернетПрокси.Установить(ПротоколПрокси, ПараметрыСоединения.ПроксиСервер, ПараметрыСоединения.ПроксиПорт);
		КонецЕсли;
		
	КонецЕсли;
	
	Порт = ?(ЗначениеЗаполнено(ПараметрыСоединения.Порт), ПараметрыСоединения.Порт, ?(ПараметрыСоединения.ЗащищенноеСоединение, 443, 80));
	
	Если ПараметрыСоединения.ЗащищенноеСоединение Тогда  
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
	Иначе
		ssl = Неопределено;	
	КонецЕсли;
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
		ПараметрыСоединения.Сервер, 
		Порт, 
		ПараметрыСоединения.Пользователь, 
		ПараметрыСоединения.Пароль, 
		ИнтернетПрокси, 
		ПараметрыСоединения.Таймаут,
		ssl);
		
		стРезультат.Соединение = Соединение;
		
	Исключение
		
		ОО = ОписаниеОшибки();
		стРезультат.Ошибки = "Получение соединения. Ошибка: Не удалось установить соединение с сайтом." + Символы.ПС +
		"Проверьте правильность адреса сайта" + Символы.ПС + ОО;
		
	Конецпопытки;
	
	Если стРезультат.Ошибки = Неопределено И стРезультат.Соединение = Неопределено Тогда //Не получено соединение и нет ошибок
		
		стРезультат.Ошибки = "Получение соединения. Ошибка: Не удалось установить соединение с сайтом.";	
		
	КонецЕсли;
	
	Возврат стРезультат;
	
КонецФункции

Функция HTTPПолучитьДанныеССервера(Соединение, ПараметрыСоединения)
	
	стРезультат = Новый Структура("ОтветСервера,Ошибки");
	стРезультат.ОтветСервера = Неопределено;
	стРезультат.Ошибки = Неопределено;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();	
	Попытка
		Соединение.Получить("" + СокрЛП(ПараметрыСоединения.АдресСкрипта) + СокрЛП(ПараметрыСоединения.АдресСкриптаПараметры), 
		ИмяФайлаОтвета, 
		СокрЛП(ПараметрыСоединения.ЗаголовкиЗапросовCookie));	
	Исключение
		ОО = ОписаниеОшибки();		
		стРезультат.Ошибки = "Получение данных с сайта: Не удалось получить данные с сайта. Проверьте правильность адреса сайта, порт, имя пользователя и пароль."
		+ Символы.ПС + "А также настройки подключения к Интернет."
		+ Символы.ПС + ОО;		
		Возврат стРезультат;
	КонецПопытки;	
	
	ФайлОтвета = Новый Файл(ИмяФайлаОтвета);	
	Если ФайлОтвета.Существует() Тогда
		
		ТекстОтвета = Новый ТекстовыйДокумент();
		ТекстОтвета.Прочитать(ИмяФайлаОтвета);
		Если ТекстОтвета.КоличествоСтрок()>0 Тогда
			стРезультат.ОтветСервера = ТекстОтвета.ПолучитьТекст();
		Иначе			
			стРезультат.Ошибки = "Получение данных с сайта: Получен пустой ответ.";		
			Возврат стРезультат;
		КонецЕсли;
		
	Иначе	
		стРезультат.Ошибки = "Получение данных с сайта: Ответ с сайта не получен.";		
		Возврат стРезультат;		
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат стРезультат;	
	
КонецФункции

Функция HTTPОтправитьФайлНаСервер(Соединение, ПараметрыСоединения, ИмяФайла, ПроверятьТолькоКодОтвета = Ложь)
	
	стРезультат = Новый Структура("ОтветСервера,Ошибки");
	стРезультат.ОтветСервера = Неопределено;
	стРезультат.Ошибки = Неопределено;
	
	КодОтвета = 0;
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();	
	Попытка
		ХТТПОтвет = Соединение.ОтправитьДляОбработки(ИмяФайла, 
		"" + СокрЛП(ПараметрыСоединения.АдресСкрипта) + СокрЛП(ПараметрыСоединения.АдресСкриптаПараметры),
		ИмяФайлаОтвета,
		СокрЛП(ПараметрыСоединения.ЗаголовкиЗапросовCookie));
		КодОтвета = ХТТПОтвет.КодСостояния; 
	Исключение
		ОО = ОписаниеОшибки();		
		стРезультат.Ошибки = "Отправка данных на сайт. Ошибка: Не удалось отправить файл на сайт.";
		//+ Символы.ПС + ОО;		
		Возврат стРезультат;
	КонецПопытки;	
	
	Если ПроверятьТолькоКодОтвета Тогда
		
		Если КодОтвета <> 200 Тогда
			стРезультат.Ошибки = "Отправка данных на сайт: " + ХТТПОтвет.ПолучитьТелоКакСтроку();		
			Возврат стРезультат;   		
		КонецЕсли;
		
	Иначе
	
		ФайлОтвета = Новый Файл(ИмяФайлаОтвета);	
		Если ФайлОтвета.Существует() Тогда
			
			ТекстОтвета = Новый ТекстовыйДокумент();
			ТекстОтвета.Прочитать(ИмяФайлаОтвета);
			Если ТекстОтвета.КоличествоСтрок()>0 Тогда
				стРезультат.ОтветСервера = ТекстОтвета.ПолучитьТекст();
			Иначе			
				стРезультат.Ошибки = "Отправка данных на сайт: Получен пустой ответ.";		
				Возврат стРезультат;
			КонецЕсли;
			
		Иначе	
			стРезультат.Ошибки = "Отправка данных на сайт: Ответ с сайта не получен.";		
			Возврат стРезультат;		
		КонецЕсли;
	
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяФайлаОтвета);
	Исключение
	КонецПопытки;
	
	Возврат стРезультат;	
	
КонецФункции

// Функции
///////////////////////////////////////////////////////////////////////////





///////////////////////////////////////////////////////////////////////////
// Вспомогательные функции

Функция РазобратьАдресСайта(Знач АдресСайта) Экспорт
	
	АдресСайта = СокрЛП(АдресСайта); 
	
	HTTPСервер		 			= ""; 
	HTTPПорт					= 0;
	HTTPАдресСкрипта 			= "";
	HTTPЗащищенноеСоединение 	= Ложь;
	
	Если ЗначениеЗаполнено(АдресСайта) Тогда
		
		АдресСайта = СтрЗаменить(АдресСайта, "\", "/");
		АдресСайта = СтрЗаменить(АдресСайта, " ", "");
		
		Если ВРег(Лев(АдресСайта, 7)) = "HTTP://" Тогда
			АдресСайта = Сред(АдресСайта, 8);
		ИначеЕсли ВРег(Лев(АдресСайта, 8)) = "HTTPS://" Тогда
			АдресСайта = Сред(АдресСайта, 9);
			HTTPЗащищенноеСоединение = Истина;
		КонецЕсли;
		
		ПозицияСлэша = Найти(АдресСайта, "/");
		
		Если ПозицияСлэша > 0 Тогда
			HTTPСервер 		 = Лев(АдресСайта, ПозицияСлэша - 1);
			HTTPАдресСкрипта = Прав(АдресСайта, СтрДлина(АдресСайта) - ПозицияСлэша);
		Иначе	
			HTTPСервер 		 = АдресСайта;
			HTTPАдресСкрипта = "";
		КонецЕсли;	
		ПозицияДвоеточия = Найти(HTTPСервер, ":");
		Если ПозицияДвоеточия > 0 Тогда
			HTTPСерверСПортом = HTTPСервер;
			HTTPСервер		  = Лев(HTTPСерверСПортом, ПозицияДвоеточия - 1);
			HTTPПортСтрока 	  = Прав(HTTPСерверСПортом, СтрДлина(HTTPСерверСПортом) - ПозицияДвоеточия);
		Иначе
			HTTPПортСтрока = "0";
		КонецЕсли;
		
		HTTPПорт = ПривестиСтрокуКЧислу(HTTPПортСтрока);
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("HTTPСервер"	  			, HTTPСервер); 
	СтруктураРезультата.Вставить("HTTPПорт"		   			, HTTPПорт);
	СтруктураРезультата.Вставить("HTTPАдресСкрипта"			, HTTPАдресСкрипта);
	СтруктураРезультата.Вставить("HTTPЗащищенноеСоединение"	, HTTPЗащищенноеСоединение);
	
	Возврат СтруктураРезультата;
	
КонецФункции

//Извлекаются числа из строки и возвращаются
Функция ПривестиСтрокуКЧислу(ЧислоСтрокой, ВозвращатьНеопределено = Ложь) Экспорт		
	
	ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
	ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
	
	Если ВозвращатьНеопределено И (ЗначениеЧисла = 0) Тогда
		
		Стр = Строка(ЧислоСтрокой);
		Если Стр = "" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Стр = СтрЗаменить(СокрЛП(Стр), "0", "");
		Если (Стр <> "") И (Стр <> ".") И (Стр <> ",") Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеЧисла;	
	
КонецФункции

Функция РаспаковатьZIPАрхив(СтрокаZIP) Экспорт
	
	стРезультат = Новый Структура("СтрокаСодержимого,Ошибка");
	стРезультат.СтрокаСодержимого = "";
	стРезультат.Ошибки = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("zip");
	ИмяКаталога = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор);
	
	Попытка		
		СоздатьКаталог(ИмяКаталога);		
	Исключение		
		стРезультат.Ошибки = "Распаковка архива с сайта. Ошибка: Не удалось создать временную папку для архива, полученного с сайта.";
		Возврат стРезультат;		
	КонецПопытки;
	
	СтрокаВФайл = Новый ТекстовыйДокумент;
	СтрокаВФайл.УстановитьТекст(СтрокаZIP);
	
	Попытка		
		СтрокаВФайл.Записать(ИмяФайла);		
	Исключение		
		стРезультат.Ошибки = "Распаковка архива с сайта. Ошибка: Не удалось сохранить архив, полученный с сайта.";
		Возврат стРезультат;		
	КонецПопытки;
	
	Попытка
		
		ЧтениеZIP = Новый ЧтениеZIPФайла(ИмяФайла);
		ЧтениеZIP.ИзвлечьВсе(ИмяКаталога);
		ЧтениеZIP.Закрыть();
		
		РаспакованныеФайлы = НайтиФайлы(ИмяКаталога, "*.xml");
		
		Если РаспакованныеФайлы.Количество() = 1 Тогда
			
			КодировкаXML = КодировкаФайла(РаспакованныеФайлы[0].ПолноеИмя);
			
			СтрокаИзФайла = Новый ТекстовыйДокумент;
			СтрокаИзФайла.Прочитать(РаспакованныеФайлы[0].ПолноеИмя, КодировкаXML);
			стРезультат.СтрокаСодержимого = СтрокаИзФайла.ПолучитьТекст();
			
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайла);
		УдалитьФайлы(ИмяКаталога);
		
	Исключение		
		стРезультат.Ошибки = "Распаковка архива с сайта. Ошибка: Не удалось распаковать архив, полученный с сайта.";
		Возврат стРезультат;		
	КонецПопытки;
	
	Возврат стРезультат;
	
КонецФункции

Функция МассивВСтроку(мсМассив, Разделитель="\")
	
	Результат = "";
	
	Если ТипЗнч(мсМассив) <> Тип("Массив") Тогда 
		Возврат Результат;	
	КонецЕсли;
	
	Для Сч = 1 По мсМассив.Количество() Цикл 
		
		Результат = Результат + мсМассив[Сч-1];
		
		Если Сч <> мсМассив.Количество() Тогда 
			Результат = Результат + Разделитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ФункцииПриЗаписиДанныхССайта

Функция СтатусПоЗначению(Знач ЗначениеСайта)
	
	Статус = Неопределено;
	
	//Ожидается в виде "ID#Наименование", пример: "3#Доставлен"
	Разделитель = Найти(ЗначениеСайта,"#");
	
	Если Разделитель <> 0 Тогда 
		
		ID = Сред(ЗначениеСайта, 1, Разделитель - 1);
		Наименование = Сред(ЗначениеСайта, Разделитель + 1, СтрДлина(ЗначениеСайта) - Разделитель + 1);
		
		
		//Поиск по ID
		Если НЕ ПустаяСтрока(ID) Тогда 
			Попытка
				Статус = Справочники.СтатусыЗаказов.НайтиПоРеквизиту("IDНаСайте",Число(ID));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		//Поиск по наименованию
		Если НЕ ЗначениеЗаполнено(Статус) И НЕ ПустаяСтрока(Наименование) Тогда
			Статус = Справочники.СтатусыЗаказов.НайтиПоНаименованию(Наименование);			
		КонецЕсли;
		
	Иначе
		
		
		//Поиск по ID
		Попытка
			Статус = Справочники.СтатусыЗаказов.НайтиПоРеквизиту("IDНаСайте",Число(ЗначениеСайта));
		Исключение
		КонецПопытки;
		
		//Поиск по наименованию
		Если НЕ ЗначениеЗаполнено(Статус) Тогда
			Статус = Справочники.СтатусыЗаказов.НайтиПоНаименованию(ЗначениеСайта);			
		КонецЕсли;
		
	КонецЕсли;		
	
	Возврат Статус;
	
КонецФункции

Функция МетодОплатыПоЗначению(Знач ЗначениеСайта)
	
	МетодОплаты = Неопределено;
	
	//Ожидается в виде "ID#Наименование", пример: "1#Наличными при получении"
	Разделитель = Найти(ЗначениеСайта,"#");
	
	Если Разделитель <> 0 Тогда 
		
		ID = Сред(ЗначениеСайта, 1, Разделитель - 1);
		Наименование = Сред(ЗначениеСайта, Разделитель + 1, СтрДлина(ЗначениеСайта) - Разделитель + 1);
		
		
		//Поиск по ID
		Если НЕ ПустаяСтрока(ID) Тогда
			Попытка
				МетодОплаты = Справочники.МетодыОплаты.НайтиПоРеквизиту("IDНаСайте",Число(ID));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		//Поиск по наименованию
		Если НЕ ЗначениеЗаполнено(МетодОплаты) И НЕ ПустаяСтрока(Наименование) Тогда
			МетодОплаты = Справочники.МетодыОплаты.НайтиПоНаименованию(Наименование);			
		КонецЕсли;
		
	Иначе
		
		
		//Поиск по ID
		Попытка
			МетодОплаты = Справочники.МетодыОплаты.НайтиПоРеквизиту("IDНаСайте",Число(ЗначениеСайта));
		Исключение
		КонецПопытки;
		
		//Поиск по наименованию
		Если НЕ ЗначениеЗаполнено(МетодОплаты) Тогда
			МетодОплаты = Справочники.МетодыОплаты.НайтиПоНаименованию(ЗначениеСайта);			
		КонецЕсли;
		
	КонецЕсли;		
	
	Возврат МетодОплаты;
	
КонецФункции

Функция СпособДоставкиПоЗначению(Знач ЗначениеСайта)
	
	СпособДоставки = Неопределено;
	
	//Ожидается в виде "ID#Наименование", пример: "1#Наличными при получении"
	Разделитель = Найти(ЗначениеСайта,"#");
	
	Если Разделитель <> 0 Тогда 
		
		ID = Сред(ЗначениеСайта, 1, Разделитель - 1);
		Наименование = Сред(ЗначениеСайта, Разделитель + 1, СтрДлина(ЗначениеСайта) - Разделитель + 1);
		
		
		//Поиск по ID
		Если НЕ ПустаяСтрока(ID) Тогда
			Попытка
				СпособДоставки = Справочники.СпособыДоставки.НайтиПоРеквизиту("IDНаСайте",Число(ID));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		//Поиск по наименованию
		Если НЕ ЗначениеЗаполнено(СпособДоставки) И НЕ ПустаяСтрока(Наименование) Тогда
			СпособДоставки = Справочники.СпособыДоставки.НайтиПоНаименованию(Наименование);			
		КонецЕсли;
		
	Иначе
		
		
		//Поиск по ID
		Попытка
			СпособДоставки = Справочники.СпособыДоставки.НайтиПоРеквизиту("IDНаСайте",Число(ЗначениеСайта));
		Исключение
		КонецПопытки;
		
		//Поиск по наименованию
		Если НЕ ЗначениеЗаполнено(СпособДоставки) Тогда
			СпособДоставки = Справочники.СпособыДоставки.НайтиПоНаименованию(ЗначениеСайта);			
		КонецЕсли;
		
	КонецЕсли;		
	
	Возврат СпособДоставки;
	
КонецФункции

Функция ПолучитьДатуВремяИзСтроки(ДатаСтрока, ВремяСтрока = Неопределено)	
	
	Возврат Дата(Формат(ДатаСтрока, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяСтрока, "ДЛФ=T"));
	
КонецФункции

Функция НоменклатураПоЗначению(Знач НоменклатураСайта)
	
	Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	//Обрабатывать только товары //Услуги не надо
	Для Каждого ЗначениеРеквизита ИЗ НоменклатураСайта.ЗначенияРеквизитов Цикл 
		
		Если ЗначениеРеквизита.Наименование = "ВидНоменклатуры" 
			И ЗначениеРеквизита.Значение <> "Товар" Тогда 
			Возврат Номенклатура;
		КонецЕсли;
		
	КонецЦикла;
	
	//Может иметь такой вид <Ид>118#29769</Ид>
	ПозицияРазделителя = СтрНайти(НоменклатураСайта.ИД, "#");
	Если ПозицияРазделителя > 0 Тогда
		НоменклатураСайтаIDНаСайте = Лев(НоменклатураСайта.ИД, ПозицияРазделителя - 1);		
		
		//поиск по ИД		
		НоменклатураСайтаIDНаСайтеЧисло = ПривестиСтрокуКЧислу(НоменклатураСайтаIDНаСайте);
		Если НоменклатураСайтаIDНаСайтеЧисло > 0 Тогда 
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("IDНаСайте", НоменклатураСайтаIDНаСайтеЧисло);
		КонецЕсли;
		
		//поиск по ссылке
		Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
			Попытка
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(НоменклатураСайтаIDНаСайте))
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		//поиск по ИД
		НоменклатураСайтаIDНаСайтеЧисло = ПривестиСтрокуКЧислу(НоменклатураСайта.ИД);
		Если НоменклатураСайтаIDНаСайтеЧисло > 0 Тогда
			Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("IDНаСайте", НоменклатураСайтаIDНаСайтеЧисло);			
		КонецЕсли;
		
		//поиск по ссылке
		Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда 
			Попытка
				Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(НоменклатураСайта.ИД));
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда //Создать новую
		
		НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		
		//IDНаСайте
		ПозицияРазделителя = СтрНайти(НоменклатураСайта.ИД, "#");
		Если ПозицияРазделителя > 0 Тогда
			НоменклатураСайтаIDНаСайте = Лев(НоменклатураСайта.ИД, ПозицияРазделителя - 1);
			НоменклатураСайтаIDНаСайтеЧисло = ПривестиСтрокуКЧислу(НоменклатураСайтаIDНаСайте);
		Иначе 
			НоменклатураСайтаIDНаСайтеЧисло = ПривестиСтрокуКЧислу(НоменклатураСайта.ИД);
		КонецЕсли;		
		НоменклатураОбъект.IDНаСайте = НоменклатураСайтаIDНаСайтеЧисло;
		НоменклатураОбъект.Артикул = НоменклатураСайта.Артикул;
		НоменклатураОбъект.Наименование = НоменклатураСайта.Наименование;
		НоменклатураОбъект.ВыгружатьНаСайт = Истина;
		НоменклатураОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
		НоменклатураОбъект.Записать();
		
		Номенклатура = НоменклатураОбъект.Ссылка;
		
	КонецЕсли;
	
	//Категории
	НЗТоварыПоКатегориям = РегистрыСведений.ТоварыПоКатегориям.СоздатьНаборЗаписей();
	НЗТоварыПоКатегориям.Отбор.Номенклатура.Установить(Номенклатура);
	
	Если ЗначениеЗаполнено(НоменклатураСайта.Категории) Тогда		
		
		Для Каждого СтрокаКатегория ИЗ НоменклатураСайта.Категории Цикл 
			
			Категория = Справочники.КатегорииТоваров.НайтиПоРеквизиту("IDНаСайте", ПривестиСтрокуКЧислу(СтрокаКатегория.Ид));
			
			Если НЕ ЗначениеЗаполнено(Категория) Тогда //Если нет такой категории добавить 
				
				КатегорияОбъект = Справочники.КатегорииТоваров.СоздатьЭлемент();
				КатегорияОбъект.IDНаСайте = СтрокаКатегория.Ид;
				КатегорияОбъект.Наименование = СтрокаКатегория.Наименование;
				КатегорияОбъект.Записать();
				
				Категория = КатегорияОбъект.Ссылка;
				
			КонецЕсли;
			
			нСтрока = НЗТоварыПоКатегориям.Добавить();
			нСтрока.Номенклатура = Номенклатура;
			нСтрока.Категория = Категория;
			
		КонецЦикла;
	
	КонецЕсли;
	
	НЗТоварыПоКатегориям.Записать();
	
	//ДополнительныеХарактеристики
	НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
	НоменклатураОбъект.ДополнительныеРеквизиты.Очистить();
	
	Если ЗначениеЗаполнено(НоменклатураСайта.ДополнительныеХарактеристики) Тогда 
		
		Для Каждого СтрокаДополнительныйРеквизит ИЗ НоменклатураСайта.ДополнительныеХарактеристики Цикл
			
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоРеквизиту("IDНаСайте", ПривестиСтрокуКЧислу(СтрокаДополнительныйРеквизит.Ид));
			
			Если НЕ ЗначениеЗаполнено(Свойство) Тогда //Создать новое
				
				СвойствоОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизиты.СоздатьЭлемент();
				СвойствоОбъект.IDНаСайте = СтрокаДополнительныйРеквизит.Ид; 
				СвойствоОбъект.Наименование = СтрокаДополнительныйРеквизит.Наименование;
				СвойствоОбъект.Записать();
				
				Свойство =  СвойствоОбъект.Ссылка;			
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДополнительныйРеквизит.ЗначениеИд) Тогда 
				Значение = Справочники.ДополнительныеЗначенияРеквизитов.НайтиПоРеквизиту("IDНаСайте", ПривестиСтрокуКЧислу(СтрокаДополнительныйРеквизит.ЗначениеИд));
				
				Если НЕ ЗначениеЗаполнено(Значение) Тогда //Создать новое 
					
					ЗначениеОбъект = Справочники.ДополнительныеЗначенияРеквизитов.СоздатьЭлемент();
					ЗначениеОбъект.IDНаСайте = СтрокаДополнительныйРеквизит.ЗначениеИд;
					ЗначениеОбъект.Владелец = Свойство;
					ЗначениеОбъект.Наименование = СтрокаДополнительныйРеквизит.ЗначениеНаименование;
					ЗначениеОбъект.Записать();
					
					Значение = ЗначениеОбъект.Ссылка;
					
				КонецЕсли;
				
			Иначе 
				Значение = СтрокаДополнительныйРеквизит.ЗначениеНаименование;
			КонецЕсли;
			
			нСтрока = НоменклатураОбъект.ДополнительныеРеквизиты.Добавить();
			нСтрока.Свойство = Свойство;
			нСтрока.Значение = Значение;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	НоменклатураОбъект.Записать();
	
	
	
	Возврат Номенклатура;	
	
КонецФункции

Функция ЕдиницаИзмеренияПоЗначению(Знач ЗначениеСайта)
	
	ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию(ЗначениеСайта.Наименование);
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда //Добавить новую 
		
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЕдиницаИзмерения.Наименование = ЗначениеСайта.Наименование;
		ЕдиницаИзмерения.Код = ЗначениеСайта.Код;
		ЕдиницаИзмерения.НаименованиеПолное = ЗначениеСайта.НаименованиеПолное;
		ЕдиницаИзмерения.МеждународноеСокращение = ЗначениеСайта.МеждународноеСокращение;
		ЕдиницаИзмерения.Записать();		
		
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

Функция КонтрагентПоЗначению(Знач ЗначениеСайта)
	
	Контрагент = Неопределено;
	
	//Ожидается в виде "ID#Ссылка", пример: "308#99881be9-245b-11e7-ae0c-5404a6b2d5c3"
	Разделитель = Найти(ЗначениеСайта,"#");
	
	Если Разделитель <> 0 Тогда 
		
		ID = Сред(ЗначениеСайта, 1, Разделитель - 1);
		КонтрагентСсылка = Сред(ЗначениеСайта, Разделитель + 1, СтрДлина(ЗначениеСайта) - Разделитель + 1);
		
		
		//Поиск по ID
		Если НЕ ПустаяСтрока(ID) Тогда
			Попытка
				Если Число(ID) <> 0 Тогда //Бывает приходит с сайта Ид 0
					Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("IDНаСайте",Число(ID));
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		//Поиск по ссылке
		Если НЕ ЗначениеЗаполнено(Контрагент) И НЕ ПустаяСтрока(КонтрагентСсылка) Тогда
			Попытка
				Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(КонтрагентСсылка));			
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если Найти(Контрагент, "Объект не найден") > 0 Тогда 
			
			Контрагент = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		
		//Поиск по ID
		Попытка
			Если Число(ЗначениеСайта) <> 0 Тогда
				Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("IDНаСайте",Число(ЗначениеСайта));
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		//Поиск по ссылке
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Попытка
				Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеСайта));			
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;		
	
	Возврат Контрагент;
	
КонецФункции

//Отладка
Функция КонтрагентПоЗначениюССозданием(Знач ЗначениеСайта)	
	
	Контрагент = Неопределено;
	
	Если ЗначениеСайта.Ид = "0#" И ЗначениеСайта.Контакты = Неопределено И ЗначениеСайта.Наименование = Неопределено Тогда //Никаким образом нельзя определить контрагента и добавлять такого не имеет смысла
		Возврат Контрагент;	
	КонецЕсли;
	
	//Ожидается в виде "ID#Ссылка", пример: "308#99881be9-245b-11e7-ae0c-5404a6b2d5c3"
	Разделитель = Найти(ЗначениеСайта.Ид,"#");
	
	Если Разделитель <> 0 Тогда 
		
		ID = Сред(ЗначениеСайта.Ид, 1, Разделитель - 1);
		КонтрагентСсылка = Сред(ЗначениеСайта.Ид, Разделитель + 1, СтрДлина(ЗначениеСайта.Ид) - Разделитель + 1);
		
		
		//Поиск по ID
		Если НЕ ПустаяСтрока(ID) Тогда
			Попытка
				Если Число(ID) <> 0 Тогда 
					Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("IDНаСайте",Число(ID));
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		//Поиск по ссылке
		Если НЕ ЗначениеЗаполнено(Контрагент) И НЕ ПустаяСтрока(КонтрагентСсылка) Тогда
			Попытка
				Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(КонтрагентСсылка));			
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		ID = ЗначениеСайта.Ид;
		
		
		//Поиск по ID
		Попытка
			Если Число(ID) <> 0 Тогда
				Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("IDНаСайте",Число(ID));
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		//Поиск по ссылке
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Попытка
				Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ЗначениеСайта.Ид));			
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;		
	
	//Если ЗначениеЗаполнено(Контрагент) И СтрНайти(Контрагент,"Объект не найден") = 0 Тогда		
	//	Возврат Контрагент;	
	//КонецЕсли;
	// Не возвращать т.к. надо еще актуализировать данные по контрагенту
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда	//Если не сомгли определить контрагента выше пытаемя найти по е-маил
		
		//Ищем по мылу или телефону
		ЕМайл = Неопределено;
		//Обход КИ и поиск мыла
		Если ЗначениеЗаполнено(ЗначениеСайта.Контакты) Тогда 
			
			Для Каждого СтрКИ Из ЗначениеСайта.Контакты Цикл 
				
				Если СтрКИ.Тип = "E-mail" Тогда 
					ЕМайл = СтрКИ.Значение;	
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		//Если есть Емейл пытаемя найти пользователя по нему
		Если ЗначениеЗаполнено(ЕМайл) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
			|ГДЕ
			|	КонтрагентыКонтактнаяИнформация.Представление = &Представление";
			
			Запрос.УстановитьПараметр("Представление", ЕМайл);	
			РезультатЗапроса = Запрос.Выполнить();	
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Контрагент = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЦикла;
			
			//Если ЗначениеЗаполнено(Контрагент) И СтрНайти(Контрагент,"Объект не найден") = 0 Тогда	//Не выходим, будем актуализировать инфу по контрагенту		
			//	Возврат Контрагент;	
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	//////
	// Контрагентов не заводим онм должный выгружаться отдельно!!!
	
	//Если контрагент содержит данные ОфициальноеНаименование то это ЮрЛицо
	
	//Отладка, в опции
	КонтрагентРозница = Истина;
	
	//!!!!!!! По имени не искать есть полные тезки!
	////"Ид,Наименование,Роль,ПолноеНаименование,АдресРегистрации,Контакты"
	//Если СтрДлина(ЗначениеСайта.Наименование) > 0 Тогда 
	//	Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(ЗначениеСайта.Наименование);
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ СтрНайти(Контрагент,"Объект не найден") <> 0 Тогда //Добавить 
		
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		
		Попытка //Если получили ссылку ппробуем ее установить
			Если ЗначениеЗаполнено(КонтрагентСсылка) Тогда
				Контрагент.УстановитьСсылкуНового(Новый УникальныйИдентификатор(КонтрагентСсылка));				
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	Иначе
		
		Контрагент = Контрагент.ПолучитьОбъект();
		
	КонецЕсли;
	
	Контрагент.КонтактнаяИнформация.Очистить();
	
	
	//Контрагент.Код = ЗначениеСайта.Ид;
	Контрагент.Наименование = ЗначениеСайта.Наименование;
	Контрагент.НаименованиеПолное = ЗначениеСайта.ПолноеНаименование;		
	Контрагент.Покупатель = ЗначениеСайта.Роль = "Покупатель";
	Контрагент.IDНаСайте = ID;
	
	//КонтактнаяИнформация
	Если ТипЗнч(ЗначениеСайта.АдресРегистрации) = Тип("Массив") Тогда  			
		Для Каждого стрАдрес ИЗ ЗначениеСайта.АдресРегистрации Цикл 
			
			нСтрокаКонтактнаяИнформация = Контрагент.КонтактнаяИнформация.Добавить();
			
			Если стрАдрес.Тип = "Адрес" Тогда  
				нСтрокаКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
				нСтрокаКонтактнаяИнформация.Представление = стрАдрес.Значение;
			КонецЕсли;			
			
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеСайта.Контакты) = Тип("Массив") Тогда 
		Для Каждого стрКонтакт ИЗ ЗначениеСайта.Контакты Цикл 
			
			нСтрокаКонтактнаяИнформация = Контрагент.КонтактнаяИнформация.Добавить();
			
			Если стрКонтакт.Тип = "E-mail" Тогда  
				нСтрокаКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				нСтрокаКонтактнаяИнформация.Представление = стрКонтакт.Значение;
			ИначеЕсли стрКонтакт.Тип = "Контактные телефоны (с кодом города)" Тогда  
				нСтрокаКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
				нСтрокаКонтактнаяИнформация.Представление = стрКонтакт.Значение;				
				
			ИначеЕсли стрКонтакт.Тип = "Почтовый индекс" Тогда
				
				нСтрокаКонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.ПочтовыйИндекс;
				нСтрокаКонтактнаяИнформация.Представление = стрКонтакт.Значение;					
				
			КонецЕсли;			
			
		КонецЦикла;
	КонецЕсли;
	
	Если КонтрагентРозница Тогда 
		Контрагент.Розница = Истина;
		Контрагент.Опт = Ложь;
	Иначе
		Контрагент.Розница = Ложь;
		Контрагент.Опт = Истина;
	КонецЕсли;
	
	Контрагент.ВидКонтрагента = Перечисления.ЮрФизЛицо.ФизическоеЛицо;	//Разделить на Юр и Физ лиц?
	
	//Контрагент.ДокументУдостоверяющийЛичность = Неопределено;
	//Контрагент.ИНН = Неопределено;		
	//Контрагент.КодПоОКПО = Неопределено;		
	//Контрагент.КПП = Неопределено;
	//Контрагент.Поставщик = Неопределено; //Есть поставщики на сайте?				
	//Контрагент.ОсновнаяТранспортнаяКомпания = Неопределено;
	//Контрагент.ОсновнойБанковскийСчет = Неопределено;
	
	//Контрагент.ПоискПоАдресам = Неопределено; //ПередЗаписью элемента 
	//Контрагент.ПоискПоАдресуЭлектроннойПочты = Неопределено;
	//Контрагент.ПоискПоАдресуЭлектроннойПочты = Неопределено;
	//Контрагент.ПоискПоТелефону = Неопределено;
	
	//Контрагент.ПредпочтенияВИзделиях = Неопределено;
	//Контрагент.РегистрационныйНомер = Неопределено;		
	//Контрагент.СвидетельствоДатаВыдачи = Неопределено;
	//Контрагент.СвидетельствоСерияНомер = Неопределено;
	//Контрагент.УсловияОплаты = Неопределено;
	//Контрагент.ЭтоТранспортнаяКомпания = Неопределено;
	
	Если НЕ (СтрДлина(Контрагент.Наименование) = 0 И Контрагент.IDНаСайте = 0) Тогда 
		Контрагент.ОбменДанными.Загрузка = Истина;
		Контрагент.Записать();
	КонецЕсли;
	
	Возврат Контрагент.Ссылка;
	
	//КонецЕсли;
	//
	//Возврат Контрагент;	
	
КонецФункции

#КонецОбласти

// Записывает в структуру ссылки на измененные объекты по узлу плана обмена.
//
// Параметры:
//	УзелПланаОбмена - ПланОбмена.Ссылка
//	СтруктураВозврата - Структура
//
Функция ПолучитьСтруктуруИзмененийДляУзла(УзелПланаОбмена) Экспорт
	
	СтруктураВозврата = Новый Структура;	
	СтруктураВозврата.Вставить("Товары", Новый Массив);
	СтруктураВозврата.Вставить("Заказы", Новый Массив);
	СтруктураВозврата.Вставить("Файлы", Новый Массив);
	СтруктураВозврата.Вставить("ОстаткиЦены", Новый Массив);
	СтруктураВозврата.Вставить("Контрагенты", Новый Массив);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Запасы.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ втОстаткиЦены
	|ИЗ
	|	РегистрНакопления.Запасы.Изменения КАК Запасы
	|ГДЕ
	|	Запасы.Узел = &Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Регистратор
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.Изменения КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Узел = &Узел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураИзменения.Ссылка КАК Ссылка,
	|	""Товары"" КАК ТипСсылки
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|ГДЕ
	|	НоменклатураИзменения.Узел = &Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИзображенияИзменения.Ссылка,
	|	""Файлы""
	|ИЗ
	|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Изображения.Изменения КАК ИзображенияИзменения
	|		ПО НоменклатураИзменения.Ссылка = ИзображенияИзменения.Ссылка.Владелец
	|ГДЕ
	|	НоменклатураИзменения.Узел = &Узел
	|	И ИзображенияИзменения.Узел = &Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыИзменения.Ссылка,
	|	""Заказы""
	|ИЗ
	|	Документ.ЗаказПокупателя.Изменения КАК ЗаказыИзменения
	|ГДЕ
	|	ЗаказыИзменения.Узел = &Узел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втОстаткиЦены.Регистратор,
	|	""ОстаткиЦены""
	|ИЗ
	|	втОстаткиЦены КАК втОстаткиЦены
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтрагентыИзменения.Ссылка,
	|	""Контрагенты""
	|ИЗ
	|	Справочник.Контрагенты.Изменения КАК КонтрагентыИзменения
	|ГДЕ
	|	КонтрагентыИзменения.Узел = &Узел");
	
	Запрос.УстановитьПараметр("Узел", УзелПланаОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураВозврата[Выборка.ТипСсылки].Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция РазделитьФайлНаФрагменты(ФайлПуть, ОграничениеРазмераФрагмента)
	
	мсСписокФайлов = Новый Массив;
	
	ФайлНаДиске = Новый Файл(ФайлПуть);
	Если ФайлНаДиске.Размер() > ОграничениеРазмераФрагмента Тогда
		
		МассивФрагментов = РазделитьФайл(ФайлНаДиске.ПолноеИмя, ОграничениеРазмераФрагмента);
		Для Каждого НовыйФайл Из МассивФрагментов Цикл
			мсСписокФайлов.Добавить(НовыйФайл);
		КонецЦикла;
		
		УдалитьФайлы(ФайлНаДиске.ПолноеИмя);
		
	Иначе
		мсСписокФайлов.Добавить(ФайлПуть);
	КонецЕсли;
	
	Возврат мсСписокФайлов;
	
КонецФункции

Функция ПолучитьИмяФайлаИзПолногоПути(Знач ФайлПуть)
	
	ФайлПуть = СтрЗаменить(ФайлПуть,"\",Символы.ПС);
	ФайлИмя = СтрПолучитьСтроку(ФайлПуть, СтрЧислоСтрок(ФайлПуть));
	
	Возврат ФайлИмя;
	
КонецФункции

Функция КодировкаФайла(ИмяФайла)
	
	КодировкаXML = "UTF-8";
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ЧтениеXML.Прочитать();
		КодировкаXML = ЧтениеXML.КодировкаXML;
	Исключение
	КонецПопытки;
	ЧтениеXML.Закрыть();
	
	Возврат КодировкаXML;
	
КонецФункции

Процедура ЛогироватьXML(ИмяФайлаXML, СтрокаXML)
	
	ЗаписьТекста = Новый ЗаписьТекста;
	//ЗаписьТекста.Открыть("C:\1c_exchange_logs\" + ИмяФайлаXML + "_" + Формат(ТекущаяДата(), "ДФ=yyyy_MM_dd_HH_mm_ss") + ".xml");
	ЗаписьТекста.Открыть("C:\1C лог обмена\" + ИмяФайлаXML + "_" + Формат(ТекущаяДата(), "ДФ=yyyy_MM_dd_HH_mm_ss") + ".xml");
	
	ЗаписьТекста.ЗаписатьСтроку(СтрокаXML);	
	ЗаписьТекста.Закрыть();	
	
КонецПроцедуры

Процедура ЛогироватьКСВ(Текст)
	
	//ЗаписьТекста = Новый ЗаписьТекста;
	//ЗаписьТекста.Открыть("С:\1c_exchange_logs_tovar\tovar_" + Формат(ТекущаяДата(), "ДФ=yyyy_MM_dd_HH_mm_ss") + ".csv");
	//ЗаписьТекста.ЗаписатьСтроку(Текст);	
	//ЗаписьТекста.Закрыть();	
	
КонецПроцедуры


// Вспомогательные функции
///////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////
// Импорт товаров из файла экспорта с сайта{

Функция КакЧисло(Строка)
	
	Попытка
		СтрокаВЧисло = Число(Строка);
		Возврат СтрокаВЧисло;
	Исключение
		Возврат 0;
	КонецПопытки;
	
КонецФункции

Процедура СообщитьТекст(Текст, ВЖурнал = Истина)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

// 17;Серая косынка 135х85;С12;;1680.00;10;0;;;39;"Козий пух; вис.шелк";4;Ручное;8;Серый;1;135х85;;;;;;;;;;;;;;;;0;
Функция РазбитьСтроку(Строка, Разделитель)
	
	ЧастиСтроки = Новый Массив;
	СимволПодстроки = """";

	Части = СтрРазделить(Строка, Разделитель, Истина);
	текЧасть = "";
	НачатаСтрока = Ложь;
	
	Для Каждого Часть Из Части Цикл
		
		ЧислоВх = СтрЧислоВхождений(Часть, СимволПодстроки);	
		Если ЧислоВх = 0 Или ЧислоВх%2 = 0 Тогда
			ЧастиСтроки.Добавить(Часть);
			Продолжить;
		КонецЕсли;
		
		текЧасть = текЧасть+?(ПустаяСтрока(текЧасть),"",Разделитель)+Часть;
		
		Если НачатаСтрока Тогда  			
			ЧастиСтроки.Добавить(текЧасть);
			текЧасть = "";
			НачатаСтрока = Ложь;
		Иначе
			НачатаСтрока = Истина;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ЧастиСтроки;
			
КонецФункции

Процедура _ИмпортТоварыНаСервере(ИмяФайла) Экспорт
	
	//Считать файл
	//ИмяФайла = "C:\Users\raph\Downloads\shop_export_internet_magazin_orenburgshal (14).csv";
	ИмяФайлаЛога = "C:\импорт в 1с.Лог.log";
	
	Разделитель = ";";
	Разделитель2 = "|";
		
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(ИмяФайла);
	
	//шапка по умолчанию первая строчка
	Текст = ЗагружаемыйФайл.ПолучитьТекст();
	ЛогироватьКСВ(Текст);

	Текст = СтрЗаменить(Текст,"&quot;","""");
	Текст = СтрЗаменить(Текст,"&quot;","""");
	
	СчВсего = 0;
	СчНовых = 0;
	
	//Цены
	//соотвЦены = Новый Соответствие;
	//соотвЦеныЗакупки = Новый Соответствие;
	
	тзЦены = Новый ТаблицаЗначений;
	тзЦены.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзЦены.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	тзЦены.Колонки.Добавить("ТипЦены", Новый ОписаниеТипов("Число")); //1 - Розничная, 2 - Закупочная

	
	Для НомерСтроки=1 по СтрЧислоСтрок(Текст) Цикл
		
		Строка = СтрПолучитьСтроку(Текст,НомерСтроки);
		МассивКол = РазложитьСтрокуВМассивПодстрок(Строка,Разделитель);
		
		Если МассивКол.Количество() <> 0 Тогда
			
			//Для Каждого Столб Из МассивКол Цикл				
			//	Сообщить(Столб);			
			//КонецЦикла;
			
			вхИдентификатор				=	МассивКол[0];
			вхНазвание					=	МассивКол[1];
			вхАртикул					=	МассивКол[2];
			вхЕИ 						=	МассивКол[3];
			вхЦена 						=	МассивКол[4];
			вхКатегория 				=	МассивКол[5];
			вхПроизводитель 			=	МассивКол[6];
			
			вхДХРазмерВарежек 			=	МассивКол[7];	//5
			вхДХРазмерВарежекНазвание 	=	МассивКол[8];
			вхДХСостав 					=	МассивКол[9];	//4
			вхДХСоставНазвание			=	МассивКол[10];
			вхДХПроизвоство 			=	МассивКол[11];	//3
			вхДХПроизвоствоНазвание 	=	МассивКол[12];
			вхДХЦвет 					=	МассивКол[13];	//2
			вхДХЦветНазвание 			=	МассивКол[14];
			вхДХРазмер 					=	МассивКол[15];	//1
			вхДХРазмерНазвание 			=	МассивКол[16];
			вхДХВес 					=	МассивКол[17];	//6
			вхДХЦенаПоПредоплате 		=	МассивКол[18];	//7
			вхДХЦенаПоПредоплатеНазвание=	МассивКол[19];
			вхДХДлина 					=	МассивКол[20];	//8
			вхДХРазмер2 				=	МассивКол[21];	//9
			вхДХРазмер2Название 		=	МассивКол[22];
			вхДХКолВоСтраниц 			=	МассивКол[23];	//10
			вхДХАвтор 					=	МассивКол[24];	//11
			вхДХГодИздания 				=	МассивКол[25];	//12
			вхДХВес2 					=	МассивКол[26];	//13
			вхДХПроизводитель 			=	МассивКол[27];	//14
			вхДХПроизводительНазвание 	=	МассивКол[28];
			вхДХСложности 				=	МассивКол[29];	//16
			вхДХКачествоПряжи 			=	МассивКол[30];	//17
			вхДХОКЗанеделю 				=	МассивКол[31];	//18
			
			вхОпубликоватьНаСайте		=	МассивКол[32];
			вхЦенаЗакупки				=	МассивКол[33];
			
			//Запись данных
			ТоварОбъект = Справочники.Номенклатура.НайтиПоРеквизиту("IDНаСайте", Число(вхИдентификатор));
			Если НЕ ЗначениеЗаполнено(ТоварОбъект) Тогда //Создать Новый
				ТоварОбъект = Справочники.Номенклатура.СоздатьЭлемент();				
			Иначе
				ТоварОбъект = ТоварОбъект.ПолучитьОбъект();				
			КонецЕсли;
			
			ТоварОбъект.ОбменДанными.Загрузка = Истина;
			
			ТоварОбъект.IDНаСайте = Число(вхИдентификатор);
			ТоварОбъект.Наименование = вхНазвание;
			ТоварОбъект.Артикул = вхАртикул;
			ТоварОбъект.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт");
			ТоварОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
			ТоварОбъект.ВыгружатьНаСайт = Число(вхОпубликоватьНаСайте);
			
			//ДХ
			#Область ДХ
			ТоварОбъект.ДополнительныеРеквизиты.Очистить();
			
			Если ЗначениеЗаполнено(вхДХРазмерВарежек) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 5, вхДХРазмерВарежек);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХСостав) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 4, вхДХСостав);				
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(вхДХПроизвоство) Тогда
			//	ДобавитьЗначениеХарактеристики(ТоварОбъект, 3, вхДХПроизвоство);				
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХЦвет) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 2, вхДХЦвет);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХРазмер) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 1, вхДХРазмер);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХВес) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 6, вхДХВес, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХЦенаПоПредоплате) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 7, вхДХЦенаПоПредоплате);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХДлина) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 8, вхДХДлина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХРазмер2) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 9, вхДХРазмер2);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХКолВоСтраниц) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 10, вхДХКолВоСтраниц, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХАвтор) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 11, вхДХАвтор, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХГодИздания) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 12, вхДХГодИздания, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХВес2) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 13, вхДХВес2, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХПроизводитель) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 14, вхДХПроизводитель);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХСложности) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 16, вхДХСложности, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХКачествоПряжи) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 17, вхДХКачествоПряжи, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХОКЗанеделю) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 18, вхДХОКЗанеделю, Истина);				
			КонецЕсли;
			
			#КонецОбласти
			//}ДХ			
			
			//Если НЕ ТоварОбъект.ЭтоНовый() Тогда
			
				ЭтоНовый = ТоварОбъект.ЭтоНовый();
				ТоварОбъект.Записать();
				
				//Категории{
				НЗ = РегистрыСведений.ТоварыПоКатегориям.СоздатьНаборЗаписей();
				НЗ.Отбор.Номенклатура.Установить(ТоварОбъект.Ссылка);
				
				мсКатегории = РазложитьСтрокуВМассивПодстрок(вхКатегория,Разделитель2);
				для Каждого стрКатегорияИД Из мсКатегории Цикл
					
					КатегорияСсылка = Справочники.КатегорииТоваров.НайтиПоРеквизиту("IDНаСайте", Число(стрКатегорияИД));
					Если НЕ ЗначениеЗаполнено(КатегорияСсылка) Тогда 
						Сообщить("Не найдена категория с ид " + стрКатегорияИД);
						Продолжить;
					КонецЕсли;					
					
					ЗаписьТПК = НЗ.Добавить();
					ЗаписьТПК.Номенклатура = ТоварОбъект.Ссылка;
					ЗаписьТПК.Категория = КатегорияСсылка;
					
				КонецЦикла;
				
				НЗ.Записать();				
				//}Категории
				
				//Цены
				Если ЗначениеЗаполнено(вхЦена) Тогда
					Попытка 
						//соотвЦены.Вставить(ТоварОбъект.Ссылка, вхЦена);
						нСтрокаЦены = тзЦены.Добавить();
						нСтрокаЦены.Номенклатура = ТоварОбъект.Ссылка;
						нСтрокаЦены.Цена = Число(вхЦена); 
						нСтрокаЦены.ТипЦены = 1; //Розничная
					Исключение
					КонецПопытки;					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(вхЦенаЗакупки) Тогда 
					Попытка
						//соотвЦеныЗакупки.Вставить(ТоварОбъект.Ссылка, Число(вхЦенаЗакупки));
						нСтрокаЦены = тзЦены.Добавить();
						нСтрокаЦены.Номенклатура = ТоварОбъект.Ссылка;
						нСтрокаЦены.Цена = Число(вхЦенаЗакупки); 
						нСтрокаЦены.ТипЦены = 2; //Закупочная
					Исключение
					КонецПопытки;
				КонецЕсли;
				
			//КонецЕсли;			
			
			СчВсего = СчВсего + 1;			
			Если ЭтоНовый Тогда 
				Сообщить("Добавлен товар " + ТоварОбъект);
				СчНовых = СчНовых + 1;
			Иначе
				Сообщить("Изменен товар " + ТоварОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
		//Возврат;				
				
	КонецЦикла;

	Сообщить("Товаров " + СчВсего + ", новых " + СчНовых);
	
	//Изменить цены, но не писать если не было изменения цены
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тзЦены.Номенклатура КАК Номенклатура,
	|	тзЦены.Цена КАК Цена,
	|	тзЦены.ТипЦены КАК ТипЦены
	|ПОМЕСТИТЬ втЦеныПредв
	|ИЗ
	|	&тзЦены КАК тзЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦеныПредв.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(втЦеныПредв.Цена) КАК Цена,
	|	втЦеныПредв.ТипЦены КАК ТипЦены
	|ПОМЕСТИТЬ втЦены
	|ИЗ
	|	втЦеныПредв КАК втЦеныПредв
	|
	|СГРУППИРОВАТЬ ПО
	|	втЦеныПредв.Номенклатура,
	|	втЦеныПредв.ТипЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЦены.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втВсяНоменклатура
	|ИЗ
	|	втЦены КАК втЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ втРозничныеЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаЦен,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					втВсяНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					втВсяНоменклатура КАК втВсяНоменклатура)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныЗакупкиСрезПоследних.Контрагент КАК Контрагент,
	|	ЦеныЗакупкиСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ втЦеныЗакупочные
	|ИЗ
	|	РегистрСведений.ЦеныЗакупки.СрезПоследних(
	|			&ДатаЦен,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					втВсяНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					втВсяНоменклатура КАК втВсяНоменклатура)) КАК ЦеныЗакупкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦены.Номенклатура КАК Номенклатура,
	|	втЦены.Цена КАК Цена
	|ИЗ
	|	втЦены КАК втЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРозничныеЦены КАК втРозничныеЦены
	|		ПО втЦены.Номенклатура = втРозничныеЦены.Номенклатура
	|ГДЕ
	|	втЦены.ТипЦены = 1
	|	И втЦены.Цена <> ЕСТЬNULL(втРозничныеЦены.Цена, 0)
	|	И ""Оставить только измененные цены"" <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦеныЗакупочные.Контрагент КАК Контрагент,
	|	втЦены.Номенклатура КАК Номенклатура,
	|	втЦены.Цена КАК Цена
	|ИЗ
	|	втЦены КАК втЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныЗакупочные КАК втЦеныЗакупочные
	|		ПО втЦены.Номенклатура = втЦеныЗакупочные.Номенклатура
	|ГДЕ
	|	втЦены.ТипЦены = 2
	|	И втЦены.Цена <> ЕСТЬNULL(втЦеныЗакупочные.Цена, 0)
	|	И ""Оставить только измененные цены"" <> """"
	|ИТОГИ ПО
	|	Контрагент";
	
	Запрос.УстановитьПараметр("тзЦены", тзЦены);
	Запрос.УстановитьПараметр("ДатаЦен", ТекущаяДата());	
	
	
	мсРезультат = Запрос.ВыполнитьПакет();
	ВыборкаРозничная = мсРезультат[5].Выбрать();
	ВыборкаЗакупочная = мсРезультат[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//УстановкаЦен
	УстановкаЦенОбъект = Документы.УстановкаЦен.СоздатьДокумент();
	УстановкаЦенОбъект.Дата = ТекущаяДата();
	УстановкаЦенОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
	УстановкаЦенОбъект.Комментарий = "Установка цен при загрузке товара с сайта.";
	//УстановкаЦенОбъект.ВидЦен = Перечисления.ТипыЦен.Розничная; //это вообзе справочник и сейчас там нет элементов!
	
	Пока ВыборкаРозничная.Следующий() Цикл
		
		нСтрока = УстановкаЦенОбъект.Цены.Добавить();
		нСтрока.Номенклатура = ВыборкаРозничная.Номенклатура;
		нСтрока.Цена = ВыборкаРозничная.Цена;
		
	КонецЦикла;
	
	Если УстановкаЦенОбъект.Цены.Количество() > 0 Тогда  
		УстановкаЦенОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	//УстановкаЦенЗакупки
	Пока ВыборкаЗакупочная.Следующий() Цикл
		
		УстановкаЦенЗакупкиОбъект = Документы.УстановкаЦенЗакупки.СоздатьДокумент();
		УстановкаЦенЗакупкиОбъект.Дата = ТекущаяДата();
		УстановкаЦенЗакупкиОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
		УстановкаЦенЗакупкиОбъект.Комментарий = "Установка цен закупки при загрузке товара с сайта.";
		УстановкаЦенЗакупкиОбъект.Поставщик = ВыборкаЗакупочная.Контрагент;
		
		ВыборкаЗакупочнаяДетали = ВыборкаЗакупочная.Выбрать();
		
		Пока ВыборкаЗакупочнаяДетали.Следующий() Цикл
			нСтрока = УстановкаЦенЗакупкиОбъект.Товары.Добавить();
			нСтрока.Номенклатура = ВыборкаЗакупочнаяДетали.Номенклатура;
			нСтрока.Цена = ВыборкаЗакупочнаяДетали.Цена;	
		КонецЦикла;
		
		Если УстановкаЦенЗакупкиОбъект.Товары.Количество() > 0 Тогда  
			УстановкаЦенЗакупкиОбъект.Записать(РежимЗаписиДокумента.Проведение);			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьЦену(ЦенаСтрокой, Разделитель)
	
	Попытка
		ЧастиЦены = РазложитьСтрокуВМассивПодстрок(ЦенаСтрокой, Разделитель);
		Цена = Число(ЧастиЦены[ЧастиЦены.ВГраница()]);
	Исключение
		Цена = 0;
	КонецПопытки;
	
	Возврат Цена;	
	
КонецФункции

Процедура УстановитьРеквизитТовара(ТоварОбъект, ИмяРеквизита, ЗначениеРеквизита)
	
	Если ТоварОбъект[ИмяРеквизита] <> ЗначениеРеквизита Тогда  
		ТоварОбъект[ИмяРеквизита] = ЗначениеРеквизита;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмпортТоварыНаСервере(ИмяФайла) Экспорт
	
	//Считать файл
	//ИмяФайла = "C:\Users\raph\Downloads\shop_export_internet_magazin_orenburgshal (14).csv";
	ИмяФайлаЛога = "C:\импорт в 1с.Лог.log";
	
	Разделитель = ";";
	Разделитель2 = "|";  	
			
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(ИмяФайла);
	
	//шапка по умолчанию первая строчка
	Текст = ЗагружаемыйФайл.ПолучитьТекст();
	ЛогироватьКСВ(Текст);

	Текст = СтрЗаменить(Текст,"&quot;","""");
	Текст = СтрЗаменить(Текст,"&quot;","""");
	
	СчВсего = 0;
	СчНовых = 0;
	
	//Цены
	//соотвЦены = Новый Соответствие;
	//соотвЦеныЗакупки = Новый Соответствие;
	Типы = Новый Массив;
	Типы.Добавить(Тип("Число"));
	КвЧ15_2 = Новый КвалификаторыЧисла(15,2);
	ОпТип15_2 = Новый ОписаниеТипов(Типы, КвЧ15_2);
	
	тзЦены = Новый ТаблицаЗначений;
	тзЦены.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	тзЦены.Колонки.Добавить("Цена", ОпТип15_2);//Новый ОписаниеТипов("Число"));
	тзЦены.Колонки.Добавить("ТипЦены", Новый ОписаниеТипов("Число")); //1 - Розничная, 2 - Закупочная
	
	Для НомерСтроки=1 по СтрЧислоСтрок(Текст) Цикл
		
		Строка = СтрПолучитьСтроку(Текст,НомерСтроки);
		МассивКол = РазбитьСтроку(Строка, Разделитель);//РазложитьСтрокуВМассивПодстрок(Строка,Разделитель);
		
		Если МассивКол.Количество() > 33 Тогда
			
			//Для Каждого Столб Из МассивКол Цикл				
			//	Сообщить(Столб);			
			//КонецЦикла;
			
			вхИдентификатор				=	МассивКол[0];
			вхНазвание					=	МассивКол[1];
			вхАртикул					=	МассивКол[2];
			вхЕИ 						=	МассивКол[3];
			вхЦена 						=	МассивКол[4];
			вхКатегория 				=	МассивКол[5];
			вхПроизводитель 			=	МассивКол[6];
			
			вхДХРазмерВарежек 			=	МассивКол[7];	//5
			вхДХРазмерВарежекНазвание 	=	МассивКол[8];
			вхДХСостав 					=	МассивКол[9];	//4
			вхДХСоставНазвание			=	МассивКол[10];
			вхДХПроизвоство 			=	МассивКол[11];	//3
			вхДХПроизвоствоНазвание 	=	МассивКол[12];
			вхДХЦвет 					=	МассивКол[13];	//2
			вхДХЦветНазвание 			=	МассивКол[14];
			вхДХРазмер 					=	МассивКол[15];	//1
			вхДХРазмерНазвание 			=	МассивКол[16];
			вхДХВес 					=	МассивКол[17];	//6
			вхДХЦенаПоПредоплате 		=	МассивКол[18];	//7
			вхДХЦенаПоПредоплатеНазвание=	МассивКол[19];
			вхДХДлина 					=	МассивКол[20];	//8
			вхДХРазмер2 				=	МассивКол[21];	//9
			вхДХРазмер2Название 		=	МассивКол[22];
			вхДХКолВоСтраниц 			=	МассивКол[23];	//10
			вхДХАвтор 					=	МассивКол[24];	//11
			вхДХГодИздания 				=	МассивКол[25];	//12
			вхДХВес2 					=	МассивКол[26];	//13
			вхДХПроизводитель 			=	МассивКол[27];	//14
			вхДХПроизводительНазвание 	=	МассивКол[28];
			вхДХСложности 				=	МассивКол[29];	//16
			вхДХКачествоПряжи 			=	МассивКол[30];	//17
			вхДХОКЗанеделю 				=	МассивКол[31];	//18
			
			вхОпубликоватьНаСайте		=	МассивКол[32];
			вхЦенаЗакупки				=	МассивКол[33];
			
			//Запись данных
			ТоварОбъект = Справочники.Номенклатура.НайтиПоРеквизиту("IDНаСайте", Число(вхИдентификатор));
			Если НЕ ЗначениеЗаполнено(ТоварОбъект) Тогда //Создать Новый
				ТоварОбъект = Справочники.Номенклатура.СоздатьЭлемент();				
			Иначе
				ТоварОбъект = ТоварОбъект.ПолучитьОбъект();				
			КонецЕсли;
			
			ТоварОбъект.ОбменДанными.Загрузка = Истина;
			
			//УстановитьРеквизитТовара();
			
			ТоварОбъект.IDНаСайте = Число(вхИдентификатор);
			ТоварОбъект.Наименование = вхНазвание;
			ТоварОбъект.Артикул = вхАртикул;
			ТоварОбъект.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт");
			ТоварОбъект.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Товар;
			ТоварОбъект.ВыгружатьНаСайт = Число(вхОпубликоватьНаСайте);
			
			//ДХ
			#Область ДХ
			ТоварОбъект.ДополнительныеРеквизиты.Очистить();
			
			Если ЗначениеЗаполнено(вхДХРазмерВарежек) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 5, вхДХРазмерВарежек);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХСостав) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 4, вхДХСостав);				
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(вхДХПроизвоство) Тогда
			//	ДобавитьЗначениеХарактеристики(ТоварОбъект, 3, вхДХПроизвоство);				
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХЦвет) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 2, вхДХЦвет);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХРазмер) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 1, вхДХРазмер);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХВес) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 6, вхДХВес, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХЦенаПоПредоплате) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 7, вхДХЦенаПоПредоплате);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХДлина) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 8, вхДХДлина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХРазмер2) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 9, вхДХРазмер2);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХКолВоСтраниц) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 10, вхДХКолВоСтраниц, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХАвтор) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 11, вхДХАвтор, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХГодИздания) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 12, вхДХГодИздания, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХВес2) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 13, вхДХВес2, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХПроизводитель) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 14, вхДХПроизводитель);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХСложности) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 16, вхДХСложности, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХКачествоПряжи) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 17, вхДХКачествоПряжи, Истина);				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(вхДХОКЗанеделю) Тогда
				ДобавитьЗначениеХарактеристики(ТоварОбъект, 18, вхДХОКЗанеделю, Истина);				
			КонецЕсли;
			
			#КонецОбласти
			//}ДХ			
			
			//Если НЕ ТоварОбъект.ЭтоНовый() Тогда
			
				ЭтоНовый = ТоварОбъект.ЭтоНовый();
				ТоварОбъект.Записать();
				
				//Категории{
				НЗ = РегистрыСведений.ТоварыПоКатегориям.СоздатьНаборЗаписей();
				НЗ.Отбор.Номенклатура.Установить(ТоварОбъект.Ссылка);
				
				мсКатегории = РазложитьСтрокуВМассивПодстрок(вхКатегория,Разделитель2);
				для Каждого стрКатегорияИД Из мсКатегории Цикл
					
					КатегорияСсылка = Справочники.КатегорииТоваров.НайтиПоРеквизиту("IDНаСайте", Число(стрКатегорияИД));
					Если НЕ ЗначениеЗаполнено(КатегорияСсылка) Тогда 
						Сообщить("Не найдена категория с ид " + стрКатегорияИД);
						Продолжить;
					КонецЕсли;					
					
					ЗаписьТПК = НЗ.Добавить();
					ЗаписьТПК.Номенклатура = ТоварОбъект.Ссылка;
					ЗаписьТПК.Категория = КатегорияСсылка;
					
				КонецЦикла;
				
				НЗ.Записать();				
				//}Категории
				
				//Цены
				вхЦена = ОпределитьЦену(вхЦена, Разделитель2);
				Если ЗначениеЗаполнено(вхЦена) Тогда
					Попытка 
						//соотвЦены.Вставить(ТоварОбъект.Ссылка, вхЦена);
						нСтрокаЦены = тзЦены.Добавить();
						нСтрокаЦены.Номенклатура = ТоварОбъект.Ссылка;
						нСтрокаЦены.Цена = Число(вхЦена); 
						нСтрокаЦены.ТипЦены = 1; //Розничная
					Исключение
					КонецПопытки;					
				КонецЕсли;
				
				вхЦенаЗакупки = ОпределитьЦену(вхЦенаЗакупки, Разделитель2);
				Если ЗначениеЗаполнено(вхЦенаЗакупки) Тогда 
					Попытка
						//соотвЦеныЗакупки.Вставить(ТоварОбъект.Ссылка, Число(вхЦенаЗакупки));
						нСтрокаЦены = тзЦены.Добавить();
						нСтрокаЦены.Номенклатура = ТоварОбъект.Ссылка;
						нСтрокаЦены.Цена = Число(вхЦенаЗакупки); 
						нСтрокаЦены.ТипЦены = 2; //Закупочная
					Исключение
					КонецПопытки;
				КонецЕсли;
				
			//КонецЕсли;			
			
			СчВсего = СчВсего + 1;			
			Если ЭтоНовый Тогда 
				Сообщить("Добавлен товар " + ТоварОбъект);
				СчНовых = СчНовых + 1;
			Иначе
				Сообщить("Изменен товар " + ТоварОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
		//Возврат;				
				
	КонецЦикла;

	Сообщить("Товаров " + СчВсего + ", новых " + СчНовых);
	
	//Изменить цены, но не писать если не было изменения цены
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тзЦены.Номенклатура КАК Номенклатура,
	|	тзЦены.Цена КАК Цена,
	|	тзЦены.ТипЦены КАК ТипЦены
	|ПОМЕСТИТЬ втЦеныПредв
	|ИЗ
	|	&тзЦены КАК тзЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦеныПредв.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(втЦеныПредв.Цена) КАК Цена,
	|	втЦеныПредв.ТипЦены КАК ТипЦены
	|ПОМЕСТИТЬ втЦены
	|ИЗ
	|	втЦеныПредв КАК втЦеныПредв
	|
	|СГРУППИРОВАТЬ ПО
	|	втЦеныПредв.Номенклатура,
	|	втЦеныПредв.ТипЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЦены.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втВсяНоменклатура
	|ИЗ
	|	втЦены КАК втЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ втРозничныеЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаЦен,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					втВсяНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					втВсяНоменклатура КАК втВсяНоменклатура)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныЗакупкиСрезПоследних.Контрагент КАК Контрагент,
	|	ЦеныЗакупкиСрезПоследних.Цена КАК Цена,
	|	ЦеныЗакупкиСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ втЦеныЗакупочные
	|ИЗ
	|	РегистрСведений.ЦеныЗакупки.СрезПоследних(
	|			&ДатаЦен,
	|			Номенклатура В
	|				(ВЫБРАТЬ
	|					втВсяНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					втВсяНоменклатура КАК втВсяНоменклатура)) КАК ЦеныЗакупкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦеныЗакупочные.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(втЦеныЗакупочные.Период) КАК Период
	|ПОМЕСТИТЬ ВТПоследниеУстановкиЦенЗакупки
	|ИЗ
	|	втЦеныЗакупочные КАК втЦеныЗакупочные
	|
	|СГРУППИРОВАТЬ ПО
	|	втЦеныЗакупочные.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦеныЗакупочные.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(втЦеныЗакупочные.Контрагент) КАК Контрагент
	|ПОМЕСТИТЬ ВТПоставщики
	|ИЗ
	|	втЦеныЗакупочные КАК втЦеныЗакупочные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеУстановкиЦенЗакупки КАК ВТПоследниеУстановкиЦенЗакупки
	|		ПО втЦеныЗакупочные.Номенклатура = ВТПоследниеУстановкиЦенЗакупки.Номенклатура
	|			И втЦеныЗакупочные.Период = ВТПоследниеУстановкиЦенЗакупки.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	втЦеныЗакупочные.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЦены.Номенклатура КАК Номенклатура,
	|	втЦены.Цена КАК Цена
	|ИЗ
	|	втЦены КАК втЦены
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРозничныеЦены КАК втРозничныеЦены
	|		ПО втЦены.Номенклатура = втРозничныеЦены.Номенклатура
	|ГДЕ
	|	втЦены.ТипЦены = 1
	|	И втЦены.Цена <> ЕСТЬNULL(втРозничныеЦены.Цена, 0)
	|	И ""Оставить только измененные цены"" <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЦеныЗакупочные.Контрагент КАК Контрагент,
	|	втЦены.Номенклатура КАК Номенклатура,
	|	втЦены.Цена КАК Цена
	|ИЗ
	|	втЦены КАК втЦены
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоставщики КАК ВТПоставщики
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЦеныЗакупочные КАК втЦеныЗакупочные
	|			ПО ВТПоставщики.Номенклатура = втЦеныЗакупочные.Номенклатура
	|				И ВТПоставщики.Контрагент = втЦеныЗакупочные.Контрагент
	|		ПО втЦены.Номенклатура = ВТПоставщики.Номенклатура
	|ГДЕ
	|	втЦены.ТипЦены = 2
	|	И втЦены.Цена <> ЕСТЬNULL(втЦеныЗакупочные.Цена, 0)
	|	И ""Оставить только измененные цены"" <> """"
	|ИТОГИ ПО
	|	Контрагент";
	
	Запрос.УстановитьПараметр("тзЦены", тзЦены);
	Запрос.УстановитьПараметр("ДатаЦен", ТекущаяДата());	
	
	
	мсРезультат = Запрос.ВыполнитьПакет();
	ВыборкаРозничная = мсРезультат[мсРезультат.ВГраница()-1].Выбрать();
	ВыборкаЗакупочная = мсРезультат[мсРезультат.ВГраница()].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//УстановкаЦен
	УстановкаЦенОбъект = Документы.УстановкаЦен.СоздатьДокумент();
	УстановкаЦенОбъект.Дата = ТекущаяДата();
	УстановкаЦенОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
	УстановкаЦенОбъект.Комментарий = "Установка цен при загрузке товара с сайта.";
	//УстановкаЦенОбъект.ВидЦен = Перечисления.ТипыЦен.Розничная; //это вообзе справочник и сейчас там нет элементов!
	
	Пока ВыборкаРозничная.Следующий() Цикл
		
		нСтрока = УстановкаЦенОбъект.Цены.Добавить();
		нСтрока.Номенклатура = ВыборкаРозничная.Номенклатура;
		нСтрока.Цена = ВыборкаРозничная.Цена;
		
	КонецЦикла;
	
	Если УстановкаЦенОбъект.Цены.Количество() > 0 Тогда  
		Попытка
			УстановкаЦенОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщение.Сообщить();
			Попытка
				УстановкаЦенОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение	
			КонецПопытки; 			
		КонецПопытки;
	КонецЕсли;
	
	//УстановкаЦенЗакупки
	Пока ВыборкаЗакупочная.Следующий() Цикл
		
		УстановкаЦенЗакупкиОбъект = Документы.УстановкаЦенЗакупки.СоздатьДокумент();
		УстановкаЦенЗакупкиОбъект.Дата = ТекущаяДата();
		УстановкаЦенЗакупкиОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
		УстановкаЦенЗакупкиОбъект.Комментарий = "Установка цен закупки при загрузке товара с сайта.";
		УстановкаЦенЗакупкиОбъект.Поставщик = ВыборкаЗакупочная.Контрагент;
		
		ВыборкаЗакупочнаяДетали = ВыборкаЗакупочная.Выбрать();
		
		Пока ВыборкаЗакупочнаяДетали.Следующий() Цикл
			нСтрока = УстановкаЦенЗакупкиОбъект.Товары.Добавить();
			нСтрока.Номенклатура = ВыборкаЗакупочнаяДетали.Номенклатура;
			нСтрока.Цена = ВыборкаЗакупочнаяДетали.Цена;	
		КонецЦикла;
		
		Если УстановкаЦенЗакупкиОбъект.Товары.Количество() > 0 Тогда  			
			Попытка
				УстановкаЦенЗакупкиОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Сообщение.Сообщить();
				Попытка
					УстановкаЦенЗакупкиОбъект.Записать(РежимЗаписиДокумента.Запись);
				Исключение	
				КонецПопытки;
			КонецПопытки;			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗначениеХарактеристики(ТоварОбъект, СвойствоИД, ЗначениеИДИлиТекст, ПростоеЗначение = Ложь)
	
	СвойствоИД = Число(СвойствоИД);	//ПВХ.ДополнительныеРеквизиты				
	ЗначениеИДИлиТекст = ЗначениеИДИлиТекст; //Спр.ДополнительныеЗначенияРеквизитов
	
	//Найти характеристику
	Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизиты.НайтиПоРеквизиту("IDНаСайте", СвойствоИД); //ИД
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		Сообщить("Не найдена характеристика с ид " + СвойствоИД);
		Возврат;	
	КонецЕсли;
	
	Если НЕ ПростоеЗначение Тогда 
		
		//Найти значение характеристики
		Значение = Справочники.ДополнительныеЗначенияРеквизитов.НайтиПоРеквизиту("IDНаСайте", Число(ЗначениеИДИлиТекст));
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда			
			Сообщить("Не найдено значение характеристики с ид " + СвойствоИД + " с ид " + ЗначениеИДИлиТекст);	
			Возврат;
		КонецЕсли;
		
	Иначе
		Значение = ЗначениеИДИлиТекст;		
	КонецЕсли;		
	
	
	Если ЗначениеЗаполнено(Значение) Тогда 
		
		нСтрокаДХ = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
		нСтрокаДХ.Свойство = Свойство;
		нСтрокаДХ.Значение = Значение;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
    Знач ПропускатьПустыеСтроки = Неопределено)
 
    Результат = Новый Массив;
 
    // для обеспечения обратной совместимости
    Если ПропускатьПустыеСтроки = Неопределено Тогда
        ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
        Если ПустаяСтрока(Строка) Тогда 
            Если Разделитель = " " Тогда
                Результат.Добавить("");
            КонецЕсли;
            Возврат Результат;
        КонецЕсли;
    КонецЕсли;
    //
 
    Позиция = Найти(Строка, Разделитель);
    Пока Позиция > 0 Цикл
        Подстрока = Лев(Строка, Позиция - 1);
        Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
            Результат.Добавить(Подстрока);
        КонецЕсли;
        Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
        Позиция = Найти(Строка, Разделитель);
    КонецЦикла;
 
    Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
        Результат.Добавить(Строка);
    КонецЕсли;
 
    Возврат Результат;
 
КонецФункции

Процедура ЛогироватьCSV(ИмяФайла, Текст)
	
	КаталогЛогов = Новый Файл("C:\1c_exchange_logs_tovar");
	Если КаталогЛогов.Существует() Тогда
		ЗаписьТекста = Новый ЗаписьТекста;
		ЗаписьТекста.Открыть("C:\1c_exchange_logs_tovar\" + ИмяФайла + "_" + Формат(ТекущаяДата(), "ДФ=yyyy_MM_dd_HH_mm_ss") + ".xml");
		ЗаписьТекста.ЗаписатьСтроку(Текст);	
		ЗаписьТекста.Закрыть();	
	КонецЕсли;
	
КонецПроцедуры

// }Импорт товаров из файла экспорта с сайта
//////////////////////////////////////////////////////////////////////////