
Процедура ЗаполнениеПолейПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитПоле = Источник.Метаданные().Реквизиты.Найти("Автор");
	Если РеквизитПоле <> Неопределено И НЕ ЗначениеЗаполнено(Источник[РеквизитПоле.Имя]) Тогда
		Источник[РеквизитПоле.Имя] = ПовторноеИспользованиеСервер.ТекущийПользователь();
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ЗаписатьПринадлежностьККатегории(Номенклатура,Категория,Принадлежность) Экспорт
	
	МЗ = РегистрыСведений.ТоварыПоКатегориям.СоздатьМенеджерЗаписи();
	МЗ.Номенклатура = Номенклатура;
	МЗ.Категория = Категория;
	Если Принадлежность Тогда
		МЗ.Записать();
	Иначе
		МЗ.Удалить();
	КонецЕсли;
	
КонецПроцедуры

Процедура РаскраситьПоСтатусам(Форма,ИмяСписка,ИмяПоляСтатуса) Экспорт
			
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из Форма[ИмяСписка].КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		Форма[ИмяСписка].КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ВыборкаСтатусы = Справочники.СтатусыЗаказов.Выбрать(); 	
	Пока ВыборкаСтатусы.Следующий() Цикл  	
		
		ЦветФона = ВыборкаСтатусы.Цвет.Получить();
		Шрифт = ВыборкаСтатусы.Шрифт.Получить();
		Если ТипЗнч(ЦветФона) <> Тип("Цвет") И ТипЗнч(Шрифт) <> Тип("Шрифт") Тогда
			Продолжить;
		КонецЕсли;
				
		ЭлементУсловногоОформления = Форма[ИмяСписка].КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();    		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));  		
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляСтатуса);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаСтатусы.Ссылка;
		
		Если ТипЗнч(ЦветФона) = Тип("Цвет") Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		Если ТипЗнч(Шрифт) = Тип("Шрифт") Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = "По статусу заказа " + ВыборкаСтатусы.Наименование;
		
	КонецЦикла;  	
		
КонецПроцедуры

Функция ОткрыватьФормуЗаполнения(Статус) Экспорт
	
	Возврат ?(ЗначениеЗаполнено(Статус), Статус.ОткрыватьФормуОформления,Истина); 
	
КонецФункции

Функция ПолучитьСтатусыЗакрытыхЗаказов() Экспорт
	
	Закрытые = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыЗаказов.Ссылка
	|ИЗ
	|	Справочник.СтатусыЗаказов КАК СтатусыЗаказов
	|ГДЕ
	|	НЕ СтатусыЗаказов.ПометкаУдаления
	|	И СтатусыЗаказов.РаботаПоЗаказуЗакрыта";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗакрытые = РезультатЗапроса.Выбрать();
		Пока ВыборкаЗакрытые.Следующий() Цикл
			Закрытые.Вставить(ВыборкаЗакрытые.Ссылка,Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Закрытые;
	
КонецФункции

Функция ЕдиИзм(Знач Номенклатура) Экспорт
	
	Возврат Номенклатура.ЕдиницаИзмерения;
	
КонецФункции

Функция ОстатокДолгаПоЗаказу(Знач Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВзаиморасчетыОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.Взаиморасчеты.Остатки(, Сделка = &Сделка) КАК ВзаиморасчетыОстатки";
	Запрос.УстановитьПараметр("Сделка", Заказ);
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда
		Выб = Рез.Выбрать();
		Если Выб.Следующий() Тогда
			Возврат Выб.СуммаОстаток;
		КонецЕсли;
	КонецЕсли;
	Возврат 0;

КонецФункции

Функция ЦеныЗакупки(Знач Товары, Знач Контрагент, Знач Дата = Неопределено) Экспорт
	
	мСписок = Новый СписокЗначений;
	Если ТипЗнч(Товары) = Тип("СправочникСсылка.Номенклатура") Тогда
		мСписок.Добавить(Товары);
	ИначеЕсли ТипЗнч(Товары) = Тип("Массив") Тогда
		мСписок.ЗагрузитьЗначения(Товары);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныЗакупкиСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ЦеныПоставщиков
	|ИЗ
	|	РегистрСведений.ЦеныЗакупки.СрезПоследних(
	|			&Дата,
	|			Номенклатура В (&Список)
	|				И Контрагент = &Контрагент) КАК ЦеныЗакупкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныЗакупкиСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныЗакупкиСрезПоследних.Цена КАК Цена
	|ПОМЕСТИТЬ ЦеныПоУмолчанию
	|ИЗ
	|	РегистрСведений.ЦеныЗакупки.СрезПоследних(
	|			&Дата,
	|			Номенклатура В (&Список)
	|				И Контрагент = &ПустойКонтрагент) КАК ЦеныЗакупкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЦеныПоставщиков.Номенклатура, ЦеныПоУмолчанию.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныПоставщиков.Цена, ЦеныПоУмолчанию.Цена) КАК Цена
	|ИЗ
	|	ЦеныПоставщиков КАК ЦеныПоставщиков
	|		ПОЛНОЕ СОЕДИНЕНИЕ ЦеныПоУмолчанию КАК ЦеныПоУмолчанию
	|		ПО ЦеныПоставщиков.Номенклатура = ЦеныПоУмолчанию.Номенклатура";
	Запрос.УстановитьПараметр("Список", мСписок);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ЦеныЗакупки = Новый Соответствие;
	Рез = Запрос.Выполнить();
	Выб = Рез.Выбрать();
	Пока Выб.Следующий() Цикл
		ЦеныЗакупки.Вставить(Выб.Номенклатура, Выб.Цена);
	КонецЦикла;
	
	Возврат ЦеныЗакупки;
	
КонецФункции

Функция ШтрихкодНоменклатуры(Знач Номенклатура) Экспорт
	
	Ид = Строка(Номенклатура.Код);
	
	Возврат Ид;
	
КонецФункции