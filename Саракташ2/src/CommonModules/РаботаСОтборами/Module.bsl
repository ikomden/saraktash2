
#Область МеткиОтборов

Процедура ПрикрепитьМеткуОтбора(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, Метка, НаименованиеМетки, ИмяСписка = "", ИмяПараметраЗапроса="") Экспорт
	
	СоздатьЭлементыМеток(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, Метка, НаименованиеМетки, ИмяСписка, ИмяПараметраЗапроса);
	ОбновитьЭлементыМеток(Форма);
	
КонецПроцедуры

Процедура ПрикрепитьМеткиОтбораИзМассива(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, МассивМеток) Экспорт
	
	Для Каждого значениеМетки Из МассивМеток Цикл
		РаботаСОтборами.СоздатьЭлементыМеток(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, значениеМетки, Строка(значениеМетки));
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЭлементыМеток(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, Метка, НаименованиеМетки, ИмяСписка = "", ИмяПараметраЗапроса="") Экспорт
	
	Элементы = Форма.Элементы;
	ДанныеМеток = Форма.ДанныеМеток;
	
	Если ДанныеМеток.Количество() > 0 Тогда
		Если ИмяСписка <> "" И ДанныеМеток[0].Свойство("ИмяСписка") Тогда
			СтруктураПоискаЗначенияОтбора = Новый Структура("Метка, ИмяСписка, ИмяПоляОтбора", Метка, ИмяСписка, ИмяПоляОтбора);
		Иначе
			СтруктураПоискаЗначенияОтбора = Новый Структура("Метка, ИмяПоляОтбора", Метка, ИмяПоляОтбора);
		КонецЕсли;
		Если ДанныеМеток.НайтиСтроки(СтруктураПоискаЗначенияОтбора).Количество() > 0 Тогда
			//добавляется значение отбора, по которому уже есть отбор
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Метка)=Тип("Массив") Тогда
		СписокМеток = Новый СписокЗначений;
		СписокМеток.ЗагрузитьЗначения(Метка);
		Метка = СписокМеток;
	КонецЕсли; 
	
	СтрокаМеток = ДанныеМеток.Добавить();
	НавигационнаяСсылкаФС = "Метка_" + СтрокаМеток.ПолучитьИдентификатор();
	
	СтрокаМеток.Метка = Метка;
	СтрокаМеток.ИмяПоляОтбора		= ИмяПоляОтбора;
	СтрокаМеток.ИмяГруппыРодителя	= ИмяГруппыРодителя;
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() <> ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ПредставлениеМетки = ФорматированнаяСтрокаПредставленияМетки(Лев(НаименованиеМетки,16), НавигационнаяСсылкаФС);
	Иначе
		ПредставлениеМетки = ФорматированнаяСтрокаПредставленияМетки(Лев(НаименованиеМетки,21), НавигационнаяСсылкаФС);
	КонецЕсли;
	СтрокаМеток.ПредставлениеМетки = ПредставлениеМетки;
	Если СтрокаМеток.Свойство("ИмяСписка") Тогда
		СтрокаМеток.ИмяСписка = ИмяСписка;
	КонецЕсли;
	Если СтрокаМеток.Свойство("ИмяПараметраЗапроса") Тогда
		СтрокаМеток.ИмяПараметраЗапроса= ИмяПараметраЗапроса;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяСписка = "", ИспользованиеОтбора=Неопределено) Экспорт
	
	МассивОтбора = Новый Массив;
	Для каждого стр Из Форма.ДанныеМеток Цикл
		Если стр.ИмяПоляОтбора = ИмяПоляОтбора И (ИмяСписка = "" ИЛИ (стр.Свойство("ИмяСписка") И ИмяСписка = стр.ИмяСписка)) Тогда
			Если ТипЗнч(стр.Метка)=Тип("СписокЗначений") Тогда
				Для каждого значениеСписка Из стр.Метка Цикл
				    МассивОтбора.Добавить(значениеСписка.Значение);
				КонецЦикла; 
			Иначе	
				МассивОтбора.Добавить(стр.Метка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользованиеОтбора=Неопределено Тогда
		ИспользованиеОтбора = ЗначениеЗаполнено(МассивОтбора);
	КонецЕсли;
	
	УстановитьЭлементОтбора(СписокОтбора.КомпоновщикНастроек.Настройки.Отбор,ИмяПоляОтбора,МассивОтбора,ВидСравненияКомпоновкиДанных.ВСписке,,ИспользованиеОтбора)
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяПараметраЗапроса) Экспорт
	
	МассивОтбора = Новый Массив;
	СтрокиЗначенийОтбора = Форма.ДанныеМеток.НайтиСтроки(Новый Структура("ИмяПоляОтбора", ИмяПоляОтбора));
	Для каждого строкаОтборов Из СтрокиЗначенийОтбора Цикл
		Если ТипЗнч(строкаОтборов.Метка)=Тип("СписокЗначений") Тогда
			Для каждого значениеСписка Из строкаОтборов.Метка Цикл
				МассивОтбора.Добавить(значениеСписка.Значение);
			КонецЦикла;
		Иначе	
			МассивОтбора.Добавить(строкаОтборов.Метка);
		КонецЕсли;
	КонецЦикла;
	
	СписокОтбора.Параметры.УстановитьЗначениеПараметра("БезОтбора", НЕ ЗначениеЗаполнено(МассивОтбора));
	СписокОтбора.Параметры.УстановитьЗначениеПараметра(ИмяПараметраЗапроса, МассивОтбора);
	
КонецПроцедуры

Процедура ОбновитьЭлементыМеток(Форма, СписокГруппФормыДляУдаленияДобавленныхЭлементов=Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	ДанныеМеток = Форма.ДанныеМеток;
	
	Если СписокГруппФормыДляУдаленияДобавленныхЭлементов=Неопределено Тогда
		СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	КонецЕсли;
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для каждого группаФормы Из СписокГруппФормыДляУдаленияДобавленныхЭлементов Цикл
		ДобавитьМеткиДляУдаления(Форма.Элементы[группаФормы], УдаляемыеЭлементы);
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	НомерМетки = 0;
	Для Каждого ДанныеМетки Из ДанныеМеток Цикл
		
		ГруппаРодитель = Форма.Элементы[ДанныеМетки.ИмяГруппыРодителя];
		
		ПолеМетки = Элементы.Добавить("Метка_" + НомерМетки, Тип("ПолеФормы"), ГруппаРодитель);
		ПолеМетки.Вид = ВидПоляФормы.ПолеНадписи;
		ПолеМетки.ПутьКДанным = "ДанныеМеток[" + НомерМетки + "].ПредставлениеМетки";
		ПолеМетки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ПолеМетки.РастягиватьПоГоризонтали = Истина;
		ПолеМетки.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_МеткаОбработкаНавигационнойСсылки");
		ПолеМетки.Подсказка = ДанныеМетки.Метка;
		// Обход ошибки платформы для тонкого клиента и интерфейсов, которые не "Такси".
		Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() <> ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
			Шрифт = Новый Шрифт(ПолеМетки.Шрифт,, 10);
			ПолеМетки.Шрифт = Шрифт;
		КонецЕсли;
		
		НомерМетки = НомерМетки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьРазвернутьОтборыНаСервере(Форма, Видимость, СтруктураИменЭлементов = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	ИнтерфейсТакси = (ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	Если СтруктураИменЭлементов = Неопределено Тогда
		Если Элементы.Найти("ГруппаПанельУправления")=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ФильтрыНастройкиИДопИнфо.Видимость	= Видимость;
		Элементы.ГруппаПанельУправления.Видимость	= НЕ Видимость;
		Элементы.ПраваяПанель.Ширина = ?(Видимость, ?(ИнтерфейсТакси, 25, 24), 0);
	Иначе
		Элементы[СтруктураИменЭлементов.ФильтрыНастройкиИДопИнфо].Видимость	= Видимость;
		Элементы[СтруктураИменЭлементов.ГруппаПанельУправления].Видимость = НЕ Видимость;
		Элементы[СтруктураИменЭлементов.ПраваяПанель].Ширина = ?(Видимость, ?(ИнтерфейсТакси, 25, 24), 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьМеткуОтбораСервер(Форма, СписокОтбора, МеткаИД, ИмяСписка = "") Экспорт
	
	Элементы = Форма.Элементы;
	ДанныеМеток = Форма.ДанныеМеток;
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
	ИмяПараметраЗапроса = ?(СтрокаМеток.Свойство("ИмяПараметраЗапроса"), СтрокаМеток.ИмяПараметраЗапроса,"");
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	
	ДанныеМеток.Удалить(СтрокаМеток);
	
	ОбновитьЭлементыМеток(Форма, СписокГруппФормыДляУдаленияДобавленныхЭлементов);
	Если ИмяПараметраЗапроса="" Тогда
		УстановитьОтборСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяСписка);
	Иначе
		УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяПараметраЗапроса);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьМеткиОтбораСервер(Форма, СписокОтбора, Метки, ИмяСписка = "") Экспорт
	
	Элементы = Форма.Элементы;
	ДанныеМеток = Форма.ДанныеМеток;
	
	Метки.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	
	Для каждого МеткаИД Из Метки Цикл
		
		СтрокаМеток = ДанныеМеток[Число(МеткаИД.Значение)];
		ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
		ИмяПараметраЗапроса = ?(СтрокаМеток.Свойство("ИмяПараметраЗапроса"), СтрокаМеток.ИмяПараметраЗапроса,"");
		
		ДанныеМеток.Удалить(СтрокаМеток);
		
		Если ИмяПараметраЗапроса="" Тогда
			УстановитьОтборСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяСписка);
		Иначе
			УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяПараметраЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьЭлементыМеток(Форма, СписокГруппФормыДляУдаленияДобавленныхЭлементов);
	
КонецПроцедуры

Функция ПолучитьСписокИмяГруппыРодителя(ДанныеМеток)
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ДанныеМеток.Выгрузить();
	СписокГруппФормыДляУдаленияДобавленныхЭлементов.Свернуть("ИмяГруппыРодителя","");
	
	Возврат СписокГруппФормыДляУдаленияДобавленныхЭлементов.ВыгрузитьКолонку("ИмяГруппыРодителя");
	
КонецФункции

Процедура СохранитьНастройкиОтборов(Знач Форма, ИмяСписка = "", СтруктураИменЭлементов = Неопределено, ВариантОтборовФормы="") Экспорт
	
	ИмяКлючаОбъекта = СтрЗаменить(Форма.ИмяФормы,".","")+ВариантОтборовФормы;
	
	Если ИмяСписка = "" Тогда
		ДанныеМеток = Форма.ДанныеМеток.Выгрузить();
	Иначе
		ДанныеМеток = Форма.ДанныеМеток.Выгрузить();
		ПараметрыОтбора = Новый Структура("ИмяСписка", ИмяСписка);
		ДанныеМеток.НайтиСтроки(ПараметрыОтбора);
	КонецЕсли;
	
	Если СтруктураИменЭлементов = Неопределено Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ДанныеМеток", ДанныеМеток);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду", Форма.ОтборПериод);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ВидимостьПанелиОтборов", Форма.Элементы.ФильтрыНастройкиИДопИнфо.Видимость);
	Иначе
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ДанныеМеток", ДанныеМеток);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду", Форма[СтруктураИменЭлементов.ОтборПериод]);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ВидимостьПанелиОтборов", Форма.Элементы[СтруктураИменЭлементов.ФильтрыНастройкиИДопИнфо].Видимость);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьНастройкиОтборов(Форма, СписокОтбора, ИмяСписка = "", 
	СтруктураИменЭлементов = Неопределено, СтруктураИменПолейОтборов = Неопределено,
	ВариантОтборовФормы="", УстановитьОтборПоПериоду = Истина) Экспорт
	
	ИмяКлючаОбъекта = СтрЗаменить(Форма.ИмяФормы,".","")+ВариантОтборовФормы;
	//Отбор по полям правой панели
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ДанныеМеток");
	ЕстьОтборТекущегоСписка = Ложь;
	
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Форма.ДанныеМеток.Загрузить(СохраненноеЗначение);
		
		//Установить отборы списка по данным в таблице ДанныеМеток
		ЕстьИмяСписка = Ложь; // для форм с несколькими динамическими списками
		ЕстьИмяПараметраЗапроса = Ложь; // для форм, где отбор устанавливается через параметр запроса динамического списка
		
		СтрокаПолейТаблицыДляСвертки = "ИмяПоляОтбора";
		Если СохраненноеЗначение.Колонки.Найти("ИмяСписка")<>Неопределено Тогда
			СтрокаПолейТаблицыДляСвертки = СтрокаПолейТаблицыДляСвертки + ",ИмяСписка";
			ЕстьИмяСписка = Истина;
		КонецЕсли;
		Если СохраненноеЗначение.Колонки.Найти("ИмяПараметраЗапроса")<>Неопределено  Тогда
			СтрокаПолейТаблицыДляСвертки = СтрокаПолейТаблицыДляСвертки + ",ИмяПараметраЗапроса";
			ЕстьИмяПараметраЗапроса = Истина;
		КонецЕсли;
		ТаблицаИменПолейОтборов = СохраненноеЗначение.Скопировать(,СтрокаПолейТаблицыДляСвертки);
		ТаблицаИменПолейОтборов.Свернуть(СтрокаПолейТаблицыДляСвертки, "");
		Для каждого строкаПолейОтборов Из ТаблицаИменПолейОтборов Цикл //цикл по именам полей отбора
			
			//Если нет колонки "ИмяСписка", отбор через компоновку
			//Если есть имя списка, нужно проверить, что поле отбора принадлежит этому списку
			ПолеОтбораПринадлежитСписку = НЕ ЕстьИмяСписка ИЛИ (ЕстьИмяСписка И строкаПолейОтборов.ИмяСписка = ИмяСписка);
			
			Если (ЕстьИмяПараметраЗапроса И строкаПолейОтборов.ИмяПараметраЗапроса<>""
				И ПолеОтбораПринадлежитСписку) Тогда
				//отбор через установку параметров запроса списка
				УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, строкаПолейОтборов.ИмяПоляОтбора, строкаПолейОтборов.ИмяПараметраЗапроса);
				ЕстьОтборТекущегоСписка = Истина;
			ИначеЕсли ПолеОтбораПринадлежитСписку Тогда
				//отбор через компоновку
				УстановитьОтборСписка(Форма, СписокОтбора, строкаПолейОтборов.ИмяПоляОтбора,,Истина);
				ЕстьОтборТекущегоСписка = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьЭлементыМеток(Форма);
		
	КонецЕсли;
	
	//Отбор по периоду
	Если УстановитьОтборПоПериоду Тогда
		Если СтруктураИменЭлементов = Неопределено Тогда
			Форма.ОтборПериод = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду");
			Форма.ПредставлениеПериода = ОбновитьПредставлениеПериода(Форма.ОтборПериод);
			Если СтруктураИменПолейОтборов<> Неопределено И СтруктураИменПолейОтборов.Свойство("ОтборПериод") Тогда
				ИмяПоляОтборПериод = СтруктураИменПолейОтборов.ОтборПериод;
			Иначе
				ИмяПоляОтборПериод = "Дата";
			КонецЕсли;
			
			УстановитьОтборПоПериоду(СписокОтбора.КомпоновщикНастроек.Настройки.Отбор, Форма.ОтборПериод.ДатаНачала, Форма.ОтборПериод.ДатаОкончания, ИмяПоляОтборПериод);
		Иначе
			Форма[СтруктураИменЭлементов.ОтборПериод] = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду");
			Форма[СтруктураИменЭлементов.ПредставлениеПериода] = ОбновитьПредставлениеПериода(Форма[СтруктураИменЭлементов.ОтборПериод]);
			УстановитьОтборПоПериоду(СписокОтбора.КомпоновщикНастроек.Настройки.Отбор, 
				Форма[СтруктураИменЭлементов.ОтборПериод].ДатаНачала, 
				Форма[СтруктураИменЭлементов.ОтборПериод].ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	//Видимость панели отборов
	Если Не ЕстьОтборТекущегоСписка И НЕ ЗначениеЗаполнено(Форма.ОтборПериод) Тогда
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ВидимостьПанелиОтборов", Истина);
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			СвернутьРазвернутьОтборыНаСервере(Форма, СохраненноеЗначение, СтруктураИменЭлементов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьМеткиДляУдаления(ЭлементГруппа, УдаляемыеЭлементы)
	
	Для Каждого СтрокаМеток Из ЭлементГруппа.ПодчиненныеЭлементы Цикл
		Если СтрокаМеток.Вид=ВидПоляФормы.ПолеВвода Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(СтрокаМеток);
	КонецЦикла;
	
КонецПроцедуры

Функция ФорматированнаяСтрокаПредставленияМетки(НаименованиеМетки, НавигационнаяСсылкаФС) Экспорт
	
	//#Если Клиент Тогда
	//Цвет = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ТекстВторостепеннойНадписи");
	//Шрифт = ОбщегоНазначенияКлиентПовтИсп.ШрифтСтиля("ШрифтПравойПанелиОтборов");
	//#Иначе
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	Шрифт = ШрифтыСтиля.ШрифтПравойПанелиОтборов;
	//#КонецЕсли
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеМетки + " ", Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

#КонецОбласти

// Добавить или заменить существующий элемент отбора.
//
// Параметры:
//  ОбластьПоискаДобавления - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Процедура УстановитьЭлементОтбора(ОбластьПоискаДобавления,
								Знач ИмяПоля,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Представление = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	ЧислоИзмененных = ИзменитьЭлементыОтбора(ОбластьПоискаДобавления, ИмяПоля, Представление,
							ПравоеЗначение, ВидСравнения, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	
	Если ЧислоИзмененных = 0 Тогда
		Если ВидСравнения = Неопределено Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив")
				Или ТипЗнч(ПравоеЗначение) = Тип("ФиксированныйМассив")
				Или ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
		КонецЕсли;
		Если РежимОтображения = Неопределено Тогда
			РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		ДобавитьЭлементКомпоновки(ОбластьПоискаДобавления, ИмяПоля, ВидСравнения,
								ПравоеЗначение, Представление, Использование, РежимОтображения, ИдентификаторПользовательскойНастройки);
	КонецЕсли;
	
КонецПроцедуры

// Добавить элемент компоновки в контейнер элементов компоновки.
//
// Параметры:
//  ОбластьДобавления - контейнер с элементами и группами отбора, например.
//                  Список.Отбор или группа в отборе.
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Представление           - Строка - представление элемента компоновки данных.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//  ИдентификаторПользовательскойНастройки - Строка - см. ОтборКомпоновкиДанных.ИдентификаторПользовательскойНастройки
//                                                    в синтакс-помощнике.
//
Функция ДобавитьЭлементКомпоновки(ОбластьДобавления,
									Знач ИмяПоля,
									Знач ВидСравнения,
									Знач ПравоеЗначение = Неопределено,
									Знач Представление  = Неопределено,
									Знач Использование  = Неопределено,
									знач РежимОтображения = Неопределено,
									знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Элемент = ОбластьДобавления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Элемент.ВидСравнения = ВидСравнения;
	
	Если РежимОтображения = Неопределено Тогда
		Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе
		Элемент.РежимОтображения = РежимОтображения;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Элемент.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
	Если Представление <> Неопределено Тогда
		Элемент.Представление = Представление;
	КонецЕсли;
	
	Если Использование <> Неопределено Тогда
		Элемент.Использование = Использование;
	КонецЕсли;
	
	// Важно: установка идентификатора должна выполняться
	// в конце настройки элемента, иначе он будет скопирован
	// в пользовательские настройки частично заполненным.
	Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
	ИначеЕсли Элемент.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
		Элемент.ИдентификаторПользовательскойНастройки = ИмяПоля;
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ОбновитьПредставлениеПериода(Период) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Период) ИЛИ (НЕ ЗначениеЗаполнено(Период.ДатаНачала) И НЕ ЗначениеЗаполнено(Период.ДатаОкончания)) Тогда
		ПредставлениеПериода = НСтр("ru = 'Период: за все время'");
	Иначе
		ДатаОкончанияПериода = ?(ЗначениеЗаполнено(Период.ДатаОкончания), КонецДня(Период.ДатаОкончания), Период.ДатаОкончания);
		Если ДатаОкончанияПериода < Период.ДатаНачала Тогда
			#Если Клиент Тогда
			//УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Неопределено, НСтр("ru = 'Выбрана дата окончания периода, которая меньше даты начала!'"));
			Сообщить("Выбрана дата окончания периода, которая меньше даты начала!");
			#КонецЕсли
			ПредставлениеПериода = НСтр("ru = 'с '")+Формат(Период.ДатаНачала,"ДФ=dd.MM.yyyy");
		Иначе
			ПредставлениеПериода = НСтр("ru = 'за '")+НРег(ПредставлениеПериода(Период.ДатаНачала, ДатаОкончанияПериода));
		КонецЕсли; 
			КонецЕсли;
	
	Возврат ПредставлениеПериода;
	
КонецФункции

// Изменить элемент отбора с заданным именем поля или представлением.
//
// Параметры:
//  ИмяПоля                 - Строка - имя поля компоновки данных (заполняется всегда).
//  Представление           - Строка - представление элемента компоновки данных.
//  ПравоеЗначение          - произвольный - сравниваемое значение.
//  ВидСравнения            - ВидСравненияКомпоновкиДанных - вид сравнения.
//  Использование           - Булево - использование элемента.
//  РежимОтображения        - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - режим отображения.
//
Функция ИзменитьЭлементыОтбора(ОбластьПоиска,
								Знач ИмяПоля = Неопределено,
								Знач Представление = Неопределено,
								Знач ПравоеЗначение = Неопределено,
								Знач ВидСравнения = Неопределено,
								Знач Использование = Неопределено,
								Знач РежимОтображения = Неопределено,
								Знач ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
		СпособПоиска = 1;
	Иначе
		СпособПоиска = 2;
		ЗначениеПоиска = Представление;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	НайтиРекурсивно(ОбластьПоиска.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если ИмяПоля <> Неопределено Тогда
			Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		КонецЕсли;
		Если Представление <> Неопределено Тогда
			Элемент.Представление = Представление;
		КонецЕсли;
		Если Использование <> Неопределено Тогда
			Элемент.Использование = Использование;
		КонецЕсли;
		Если ВидСравнения <> Неопределено Тогда
			Элемент.ВидСравнения = ВидСравнения;
		КонецЕсли;
		Если ПравоеЗначение <> Неопределено Тогда
			Элемент.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
		Если РежимОтображения <> Неопределено Тогда
			Элемент.РежимОтображения = РежимОтображения;
		КонецЕсли;
		Если ИдентификаторПользовательскойНастройки <> Неопределено Тогда
			Элемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивЭлементов.Количество();
	
КонецФункции

Процедура НайтиРекурсивно(КоллекцияЭлементов, МассивЭлементов, СпособПоиска, ЗначениеПоиска)
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если СпособПоиска = 1 Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			ИначеЕсли СпособПоиска = 2 Тогда
				Если ЭлементОтбора.Представление = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			НайтиРекурсивно(ЭлементОтбора.Элементы, МассивЭлементов, СпособПоиска, ЗначениеПоиска);
			
			Если СпособПоиска = 2 И ЭлементОтбора.Представление = ЗначениеПоиска Тогда
				МассивЭлементов.Добавить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтборПоПериоду(СписокОтбор, ДатаНачала, ДатаОкончания, ИмяПоляОтбора = "Дата") Экспорт
	
	// Отбор на список по периоду
	ГруппаОтборПоПериоду = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		СписокОтбор.Элементы,
		"Период",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ДобавитьЭлементКомпоновки(
		ГруппаОтборПоПериоду,
		ИмяПоляОтбора,
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		ДатаНачала,
		"ДатаНачала",
		ЗначениеЗаполнено(ДатаНачала));
	
	ДобавитьЭлементКомпоновки(
		ГруппаОтборПоПериоду,
		ИмяПоляОтбора,
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		ДатаОкончания,
		"ДатаОкончания",
		ЗначениеЗаполнено(ДатаОкончания));
		
КонецПроцедуры

// Добавление группы отбора
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например
//                      Список.Отбор.Элементы или группа в отборе.
//  ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//  Представление строка - представление группы.
//
Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции


// Процедура устанавливает условное оформление в динамических списках
// для колонки "Дата"
//
Процедура УстановитьОформлениеКолонкиДата(ДинСписок) Экспорт
	
	СписокУдаляемыхЭлементов = Новый СписокЗначений;
	Для каждого ЭлементУсловногоОформления Из ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ПредустановленныйТолькоВремяПоляДата"
			ИЛИ ЭлементУсловногоОформления.Представление = "Формат поля Дата (сегодня - только время)" Тогда
			СписокУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	Для каждого Элемент Из СписокУдаляемыхЭлементов Цикл
		ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Удалить(Элемент.Значение);
	КонецЦикла;
	
	ЭлементОформления = ДинСписок.КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = "Формат поля Дата (сегодня - только время)";
	ЭлементОформления.ИдентификаторПользовательскойНастройки = "ПредустановленныйТолькоВремяПоляДата";
	
	ЭлементОформления.Использование = Истина;
	
	ГруппаЭлементовОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ПравоеЗначение	= Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование		= Истина;
	ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ПравоеЗначение	= Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=Ч:мм");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Дата");
	
КонецПроцедуры // УстановитьОформлениеКолонкиДата()
